<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="42750"><g><title>mango_chess::board::BoardState::make_move (7 samples, 0.02%)</title><rect x="0.0351%" y="261" width="0.0164%" height="15" fill="rgb(227,0,7)" fg:x="15" fg:w="7"/><text x="0.2851%" y="271.50"></text></g><g><title>_int_realloc (10 samples, 0.02%)</title><rect x="0.1357%" y="197" width="0.0234%" height="15" fill="rgb(217,0,24)" fg:x="58" fg:w="10"/><text x="0.3857%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.03%)</title><rect x="0.1310%" y="245" width="0.0304%" height="15" fill="rgb(221,193,54)" fg:x="56" fg:w="13"/><text x="0.3810%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.03%)</title><rect x="0.1333%" y="229" width="0.0281%" height="15" fill="rgb(248,212,6)" fg:x="57" fg:w="12"/><text x="0.3833%" y="239.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.03%)</title><rect x="0.1357%" y="213" width="0.0257%" height="15" fill="rgb(208,68,35)" fg:x="58" fg:w="11"/><text x="0.3857%" y="223.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (6 samples, 0.01%)</title><rect x="0.1614%" y="245" width="0.0140%" height="15" fill="rgb(232,128,0)" fg:x="69" fg:w="6"/><text x="0.4114%" y="255.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (6 samples, 0.01%)</title><rect x="0.1614%" y="229" width="0.0140%" height="15" fill="rgb(207,160,47)" fg:x="69" fg:w="6"/><text x="0.4114%" y="239.50"></text></g><g><title>mango_chess::board::BoardState::square_is_attacked (54 samples, 0.13%)</title><rect x="0.0515%" y="261" width="0.1263%" height="15" fill="rgb(228,23,34)" fg:x="22" fg:w="54"/><text x="0.3015%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 0.07%)</title><rect x="0.3439%" y="245" width="0.0725%" height="15" fill="rgb(218,30,26)" fg:x="147" fg:w="31"/><text x="0.5939%" y="255.50"></text></g><g><title>mango_chess::move_ordering::move_sort (25 samples, 0.06%)</title><rect x="0.3579%" y="229" width="0.0585%" height="15" fill="rgb(220,122,19)" fg:x="153" fg:w="25"/><text x="0.6079%" y="239.50"></text></g><g><title>_int_free (13 samples, 0.03%)</title><rect x="0.4281%" y="229" width="0.0304%" height="15" fill="rgb(250,228,42)" fg:x="183" fg:w="13"/><text x="0.6781%" y="239.50"></text></g><g><title>__GI___libc_free (19 samples, 0.04%)</title><rect x="0.4164%" y="245" width="0.0444%" height="15" fill="rgb(240,193,28)" fg:x="178" fg:w="19"/><text x="0.6664%" y="255.50"></text></g><g><title>_int_malloc (26 samples, 0.06%)</title><rect x="0.4702%" y="229" width="0.0608%" height="15" fill="rgb(216,20,37)" fg:x="201" fg:w="26"/><text x="0.7202%" y="239.50"></text></g><g><title>__GI___libc_malloc (33 samples, 0.08%)</title><rect x="0.4608%" y="245" width="0.0772%" height="15" fill="rgb(206,188,39)" fg:x="197" fg:w="33"/><text x="0.7108%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (67 samples, 0.16%)</title><rect x="0.5380%" y="245" width="0.1567%" height="15" fill="rgb(217,207,13)" fg:x="230" fg:w="67"/><text x="0.7880%" y="255.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (13 samples, 0.03%)</title><rect x="0.7906%" y="229" width="0.0304%" height="15" fill="rgb(231,73,38)" fg:x="338" fg:w="13"/><text x="1.0406%" y="239.50"></text></g><g><title>core::slice::sort::recurse (63 samples, 0.15%)</title><rect x="0.7251%" y="245" width="0.1474%" height="15" fill="rgb(225,20,46)" fg:x="310" fg:w="63"/><text x="0.9751%" y="255.50"></text></g><g><title>core::slice::sort::recurse (21 samples, 0.05%)</title><rect x="0.8234%" y="229" width="0.0491%" height="15" fill="rgb(210,31,41)" fg:x="352" fg:w="21"/><text x="1.0734%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (21 samples, 0.05%)</title><rect x="0.8234%" y="213" width="0.0491%" height="15" fill="rgb(221,200,47)" fg:x="352" fg:w="21"/><text x="1.0734%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (17 samples, 0.04%)</title><rect x="1.0760%" y="165" width="0.0398%" height="15" fill="rgb(226,26,5)" fg:x="460" fg:w="17"/><text x="1.3260%" y="175.50"></text></g><g><title>_int_free (9 samples, 0.02%)</title><rect x="1.1181%" y="165" width="0.0211%" height="15" fill="rgb(249,33,26)" fg:x="478" fg:w="9"/><text x="1.3681%" y="175.50"></text></g><g><title>_int_realloc (76 samples, 0.18%)</title><rect x="1.0409%" y="181" width="0.1778%" height="15" fill="rgb(235,183,28)" fg:x="445" fg:w="76"/><text x="1.2909%" y="191.50"></text></g><g><title>_int_malloc (34 samples, 0.08%)</title><rect x="1.1392%" y="165" width="0.0795%" height="15" fill="rgb(221,5,38)" fg:x="487" fg:w="34"/><text x="1.3892%" y="175.50"></text></g><g><title>__GI___libc_realloc (90 samples, 0.21%)</title><rect x="1.0105%" y="197" width="0.2105%" height="15" fill="rgb(247,18,42)" fg:x="432" fg:w="90"/><text x="1.2605%" y="207.50"></text></g><g><title>__rdl_realloc (9 samples, 0.02%)</title><rect x="1.2211%" y="197" width="0.0211%" height="15" fill="rgb(241,131,45)" fg:x="522" fg:w="9"/><text x="1.4711%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (8 samples, 0.02%)</title><rect x="1.2234%" y="181" width="0.0187%" height="15" fill="rgb(249,31,29)" fg:x="523" fg:w="8"/><text x="1.4734%" y="191.50"></text></g><g><title>mango_chess::board::BoardState::make_move (159 samples, 0.37%)</title><rect x="0.8725%" y="245" width="0.3719%" height="15" fill="rgb(225,111,53)" fg:x="373" fg:w="159"/><text x="1.1225%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (118 samples, 0.28%)</title><rect x="0.9684%" y="229" width="0.2760%" height="15" fill="rgb(238,160,17)" fg:x="414" fg:w="118"/><text x="1.2184%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (112 samples, 0.26%)</title><rect x="0.9825%" y="213" width="0.2620%" height="15" fill="rgb(214,148,48)" fg:x="420" fg:w="112"/><text x="1.2325%" y="223.50"></text></g><g><title>__GI___libc_free (52 samples, 0.12%)</title><rect x="2.1778%" y="229" width="0.1216%" height="15" fill="rgb(232,36,49)" fg:x="931" fg:w="52"/><text x="2.4278%" y="239.50"></text></g><g><title>_int_free (34 samples, 0.08%)</title><rect x="2.2199%" y="213" width="0.0795%" height="15" fill="rgb(209,103,24)" fg:x="949" fg:w="34"/><text x="2.4699%" y="223.50"></text></g><g><title>__rust_dealloc (5 samples, 0.01%)</title><rect x="2.3041%" y="229" width="0.0117%" height="15" fill="rgb(229,88,8)" fg:x="985" fg:w="5"/><text x="2.5541%" y="239.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.04%)</title><rect x="2.4515%" y="197" width="0.0398%" height="15" fill="rgb(213,181,19)" fg:x="1048" fg:w="17"/><text x="2.7015%" y="207.50"></text></g><g><title>tcache_get (6 samples, 0.01%)</title><rect x="2.4772%" y="181" width="0.0140%" height="15" fill="rgb(254,191,54)" fg:x="1059" fg:w="6"/><text x="2.7272%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (22 samples, 0.05%)</title><rect x="2.5871%" y="165" width="0.0515%" height="15" fill="rgb(241,83,37)" fg:x="1106" fg:w="22"/><text x="2.8371%" y="175.50"></text></g><g><title>_int_free (26 samples, 0.06%)</title><rect x="2.6456%" y="165" width="0.0608%" height="15" fill="rgb(233,36,39)" fg:x="1131" fg:w="26"/><text x="2.8956%" y="175.50"></text></g><g><title>_int_realloc (107 samples, 0.25%)</title><rect x="2.5287%" y="181" width="0.2503%" height="15" fill="rgb(226,3,54)" fg:x="1081" fg:w="107"/><text x="2.7787%" y="191.50"></text></g><g><title>_int_malloc (31 samples, 0.07%)</title><rect x="2.7064%" y="165" width="0.0725%" height="15" fill="rgb(245,192,40)" fg:x="1157" fg:w="31"/><text x="2.9564%" y="175.50"></text></g><g><title>__GI___libc_realloc (124 samples, 0.29%)</title><rect x="2.4912%" y="197" width="0.2901%" height="15" fill="rgb(238,167,29)" fg:x="1065" fg:w="124"/><text x="2.7412%" y="207.50"></text></g><g><title>__rdl_alloc (5 samples, 0.01%)</title><rect x="2.7813%" y="197" width="0.0117%" height="15" fill="rgb(232,182,51)" fg:x="1189" fg:w="5"/><text x="3.0313%" y="207.50"></text></g><g><title>__rdl_realloc (13 samples, 0.03%)</title><rect x="2.7930%" y="197" width="0.0304%" height="15" fill="rgb(231,60,39)" fg:x="1194" fg:w="13"/><text x="3.0430%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (7 samples, 0.02%)</title><rect x="2.8070%" y="181" width="0.0164%" height="15" fill="rgb(208,69,12)" fg:x="1200" fg:w="7"/><text x="3.0570%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (223 samples, 0.52%)</title><rect x="2.3158%" y="229" width="0.5216%" height="15" fill="rgb(235,93,37)" fg:x="990" fg:w="223"/><text x="2.5658%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (191 samples, 0.45%)</title><rect x="2.3906%" y="213" width="0.4468%" height="15" fill="rgb(213,116,39)" fg:x="1022" fg:w="191"/><text x="2.6406%" y="223.50"></text></g><g><title>__rust_realloc (6 samples, 0.01%)</title><rect x="2.8234%" y="197" width="0.0140%" height="15" fill="rgb(222,207,29)" fg:x="1207" fg:w="6"/><text x="3.0734%" y="207.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.02%)</title><rect x="2.8725%" y="181" width="0.0187%" height="15" fill="rgb(206,96,30)" fg:x="1228" fg:w="8"/><text x="3.1225%" y="191.50"></text></g><g><title>_int_realloc (6 samples, 0.01%)</title><rect x="2.8772%" y="165" width="0.0140%" height="15" fill="rgb(218,138,4)" fg:x="1230" fg:w="6"/><text x="3.1272%" y="175.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (27 samples, 0.06%)</title><rect x="2.8374%" y="229" width="0.0632%" height="15" fill="rgb(250,191,14)" fg:x="1213" fg:w="27"/><text x="3.0874%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.04%)</title><rect x="2.8632%" y="213" width="0.0374%" height="15" fill="rgb(239,60,40)" fg:x="1224" fg:w="16"/><text x="3.1132%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.04%)</title><rect x="2.8655%" y="197" width="0.0351%" height="15" fill="rgb(206,27,48)" fg:x="1225" fg:w="15"/><text x="3.1155%" y="207.50"></text></g><g><title>__GI___libc_realloc (13 samples, 0.03%)</title><rect x="3.0035%" y="165" width="0.0304%" height="15" fill="rgb(225,35,8)" fg:x="1284" fg:w="13"/><text x="3.2535%" y="175.50"></text></g><g><title>_int_realloc (10 samples, 0.02%)</title><rect x="3.0105%" y="149" width="0.0234%" height="15" fill="rgb(250,213,24)" fg:x="1287" fg:w="10"/><text x="3.2605%" y="159.50"></text></g><g><title>_int_malloc (5 samples, 0.01%)</title><rect x="3.0222%" y="133" width="0.0117%" height="15" fill="rgb(247,123,22)" fg:x="1292" fg:w="5"/><text x="3.2722%" y="143.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (62 samples, 0.15%)</title><rect x="2.9006%" y="229" width="0.1450%" height="15" fill="rgb(231,138,38)" fg:x="1240" fg:w="62"/><text x="3.1506%" y="239.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (43 samples, 0.10%)</title><rect x="2.9450%" y="213" width="0.1006%" height="15" fill="rgb(231,145,46)" fg:x="1259" fg:w="43"/><text x="3.1950%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 0.06%)</title><rect x="2.9871%" y="197" width="0.0585%" height="15" fill="rgb(251,118,11)" fg:x="1277" fg:w="25"/><text x="3.2371%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.05%)</title><rect x="2.9965%" y="181" width="0.0491%" height="15" fill="rgb(217,147,25)" fg:x="1281" fg:w="21"/><text x="3.2465%" y="191.50"></text></g><g><title>_int_realloc (16 samples, 0.04%)</title><rect x="3.1111%" y="165" width="0.0374%" height="15" fill="rgb(247,81,37)" fg:x="1330" fg:w="16"/><text x="3.3611%" y="175.50"></text></g><g><title>_int_malloc (10 samples, 0.02%)</title><rect x="3.1251%" y="149" width="0.0234%" height="15" fill="rgb(209,12,38)" fg:x="1336" fg:w="10"/><text x="3.3751%" y="159.50"></text></g><g><title>__GI___libc_realloc (19 samples, 0.04%)</title><rect x="3.1064%" y="181" width="0.0444%" height="15" fill="rgb(227,1,9)" fg:x="1328" fg:w="19"/><text x="3.3564%" y="191.50"></text></g><g><title>mango_chess::board::BoardState::square_is_attacked (819 samples, 1.92%)</title><rect x="1.2444%" y="245" width="1.9158%" height="15" fill="rgb(248,47,43)" fg:x="532" fg:w="819"/><text x="1.4944%" y="255.50">m..</text></g><g><title>mango_chess::move_generation::rook_moves (49 samples, 0.11%)</title><rect x="3.0456%" y="229" width="0.1146%" height="15" fill="rgb(221,10,30)" fg:x="1302" fg:w="49"/><text x="3.2956%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (27 samples, 0.06%)</title><rect x="3.0971%" y="213" width="0.0632%" height="15" fill="rgb(210,229,1)" fg:x="1324" fg:w="27"/><text x="3.3471%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 0.06%)</title><rect x="3.1041%" y="197" width="0.0561%" height="15" fill="rgb(222,148,37)" fg:x="1327" fg:w="24"/><text x="3.3541%" y="207.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.01%)</title><rect x="6.8702%" y="213" width="0.0140%" height="15" fill="rgb(234,67,33)" fg:x="2937" fg:w="6"/><text x="7.1202%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (495 samples, 1.16%)</title><rect x="6.7298%" y="229" width="1.1579%" height="15" fill="rgb(247,98,35)" fg:x="2877" fg:w="495"/><text x="6.9798%" y="239.50"></text></g><g><title>mango_chess::move_ordering::move_sort (426 samples, 1.00%)</title><rect x="6.8912%" y="213" width="0.9965%" height="15" fill="rgb(247,138,52)" fg:x="2946" fg:w="426"/><text x="7.1412%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="7.8877%" y="229" width="0.0140%" height="15" fill="rgb(213,79,30)" fg:x="3372" fg:w="6"/><text x="8.1377%" y="239.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="7.8877%" y="213" width="0.0140%" height="15" fill="rgb(246,177,23)" fg:x="3372" fg:w="6"/><text x="8.1377%" y="223.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="7.8877%" y="197" width="0.0140%" height="15" fill="rgb(230,62,27)" fg:x="3372" fg:w="6"/><text x="8.1377%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="7.8877%" y="181" width="0.0140%" height="15" fill="rgb(216,154,8)" fg:x="3372" fg:w="6"/><text x="8.1377%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="7.8877%" y="165" width="0.0140%" height="15" fill="rgb(244,35,45)" fg:x="3372" fg:w="6"/><text x="8.1377%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="7.8877%" y="149" width="0.0140%" height="15" fill="rgb(251,115,12)" fg:x="3372" fg:w="6"/><text x="8.1377%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="7.8877%" y="133" width="0.0140%" height="15" fill="rgb(240,54,50)" fg:x="3372" fg:w="6"/><text x="8.1377%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="7.8877%" y="117" width="0.0140%" height="15" fill="rgb(233,84,52)" fg:x="3372" fg:w="6"/><text x="8.1377%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="7.8877%" y="101" width="0.0140%" height="15" fill="rgb(207,117,47)" fg:x="3372" fg:w="6"/><text x="8.1377%" y="111.50"></text></g><g><title>free_perturb (34 samples, 0.08%)</title><rect x="10.3930%" y="197" width="0.0795%" height="15" fill="rgb(249,43,39)" fg:x="4443" fg:w="34"/><text x="10.6430%" y="207.50"></text></g><g><title>__GI___libc_free (1,111 samples, 2.60%)</title><rect x="7.9018%" y="229" width="2.5988%" height="15" fill="rgb(209,38,44)" fg:x="3378" fg:w="1111"/><text x="8.1518%" y="239.50">__..</text></g><g><title>_int_free (807 samples, 1.89%)</title><rect x="8.6129%" y="213" width="1.8877%" height="15" fill="rgb(236,212,23)" fg:x="3682" fg:w="807"/><text x="8.8629%" y="223.50">_..</text></g><g><title>unlink_chunk (11 samples, 0.03%)</title><rect x="10.4749%" y="197" width="0.0257%" height="15" fill="rgb(242,79,21)" fg:x="4478" fg:w="11"/><text x="10.7249%" y="207.50"></text></g><g><title>alloc_perturb (18 samples, 0.04%)</title><rect x="13.7357%" y="197" width="0.0421%" height="15" fill="rgb(211,96,35)" fg:x="5872" fg:w="18"/><text x="13.9857%" y="207.50"></text></g><g><title>checked_request2size (29 samples, 0.07%)</title><rect x="13.7778%" y="197" width="0.0678%" height="15" fill="rgb(253,215,40)" fg:x="5890" fg:w="29"/><text x="14.0278%" y="207.50"></text></g><g><title>_int_malloc (1,221 samples, 2.86%)</title><rect x="11.0339%" y="213" width="2.8561%" height="15" fill="rgb(211,81,21)" fg:x="4717" fg:w="1221"/><text x="11.2839%" y="223.50">_i..</text></g><g><title>tcache_put (19 samples, 0.04%)</title><rect x="13.8456%" y="197" width="0.0444%" height="15" fill="rgb(208,190,38)" fg:x="5919" fg:w="19"/><text x="14.0956%" y="207.50"></text></g><g><title>__GI___libc_malloc (1,510 samples, 3.53%)</title><rect x="10.5006%" y="229" width="3.5322%" height="15" fill="rgb(235,213,38)" fg:x="4489" fg:w="1510"/><text x="10.7506%" y="239.50">__G..</text></g><g><title>tcache_get (60 samples, 0.14%)</title><rect x="13.8924%" y="213" width="0.1404%" height="15" fill="rgb(237,122,38)" fg:x="5939" fg:w="60"/><text x="14.1424%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2,277 samples, 5.33%)</title><rect x="14.0327%" y="229" width="5.3263%" height="15" fill="rgb(244,218,35)" fg:x="5999" fg:w="2277"/><text x="14.2827%" y="239.50">__memcp..</text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="19.3474%" y="213" width="0.0117%" height="15" fill="rgb(240,68,47)" fg:x="8271" fg:w="5"/><text x="19.5974%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="19.3474%" y="197" width="0.0117%" height="15" fill="rgb(210,16,53)" fg:x="8271" fg:w="5"/><text x="19.5974%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="19.3474%" y="181" width="0.0117%" height="15" fill="rgb(235,124,12)" fg:x="8271" fg:w="5"/><text x="19.5974%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="19.3474%" y="165" width="0.0117%" height="15" fill="rgb(224,169,11)" fg:x="8271" fg:w="5"/><text x="19.5974%" y="175.50"></text></g><g><title>__memmove_avx_unaligned (133 samples, 0.31%)</title><rect x="19.3591%" y="229" width="0.3111%" height="15" fill="rgb(250,166,2)" fg:x="8276" fg:w="133"/><text x="19.6091%" y="239.50"></text></g><g><title>__rdl_alloc (236 samples, 0.55%)</title><rect x="19.6702%" y="229" width="0.5520%" height="15" fill="rgb(242,216,29)" fg:x="8409" fg:w="236"/><text x="19.9202%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (204 samples, 0.48%)</title><rect x="19.7450%" y="213" width="0.4772%" height="15" fill="rgb(230,116,27)" fg:x="8441" fg:w="204"/><text x="19.9950%" y="223.50"></text></g><g><title>__rdl_dealloc (21 samples, 0.05%)</title><rect x="20.2222%" y="229" width="0.0491%" height="15" fill="rgb(228,99,48)" fg:x="8645" fg:w="21"/><text x="20.4722%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (21 samples, 0.05%)</title><rect x="20.2222%" y="213" width="0.0491%" height="15" fill="rgb(253,11,6)" fg:x="8645" fg:w="21"/><text x="20.4722%" y="223.50"></text></g><g><title>__rust_alloc (75 samples, 0.18%)</title><rect x="20.2713%" y="229" width="0.1754%" height="15" fill="rgb(247,143,39)" fg:x="8666" fg:w="75"/><text x="20.5213%" y="239.50"></text></g><g><title>__rust_dealloc (81 samples, 0.19%)</title><rect x="20.4468%" y="229" width="0.1895%" height="15" fill="rgb(236,97,10)" fg:x="8741" fg:w="81"/><text x="20.6968%" y="239.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (333 samples, 0.78%)</title><rect x="21.7637%" y="213" width="0.7789%" height="15" fill="rgb(233,208,19)" fg:x="9304" fg:w="333"/><text x="22.0137%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.5263%" y="197" width="0.0164%" height="15" fill="rgb(216,164,2)" fg:x="9630" fg:w="7"/><text x="22.7763%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.5263%" y="181" width="0.0164%" height="15" fill="rgb(220,129,5)" fg:x="9630" fg:w="7"/><text x="22.7763%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.5263%" y="165" width="0.0164%" height="15" fill="rgb(242,17,10)" fg:x="9630" fg:w="7"/><text x="22.7763%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.5263%" y="149" width="0.0164%" height="15" fill="rgb(242,107,0)" fg:x="9630" fg:w="7"/><text x="22.7763%" y="159.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.5263%" y="133" width="0.0164%" height="15" fill="rgb(251,28,31)" fg:x="9630" fg:w="7"/><text x="22.7763%" y="143.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.5263%" y="117" width="0.0164%" height="15" fill="rgb(233,223,10)" fg:x="9630" fg:w="7"/><text x="22.7763%" y="127.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.5263%" y="101" width="0.0164%" height="15" fill="rgb(215,21,27)" fg:x="9630" fg:w="7"/><text x="22.7763%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.5263%" y="85" width="0.0164%" height="15" fill="rgb(232,23,21)" fg:x="9630" fg:w="7"/><text x="22.7763%" y="95.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.5263%" y="69" width="0.0164%" height="15" fill="rgb(244,5,23)" fg:x="9630" fg:w="7"/><text x="22.7763%" y="79.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (368 samples, 0.86%)</title><rect x="22.5942%" y="197" width="0.8608%" height="15" fill="rgb(226,81,46)" fg:x="9659" fg:w="368"/><text x="22.8442%" y="207.50"></text></g><g><title>core::slice::sort::recurse (1,216 samples, 2.84%)</title><rect x="20.6363%" y="229" width="2.8444%" height="15" fill="rgb(247,70,30)" fg:x="8822" fg:w="1216"/><text x="20.8863%" y="239.50">co..</text></g><g><title>core::slice::sort::recurse (399 samples, 0.93%)</title><rect x="22.5474%" y="213" width="0.9333%" height="15" fill="rgb(212,68,19)" fg:x="9639" fg:w="399"/><text x="22.7974%" y="223.50"></text></g><g><title>core::slice::sort::recurse (9 samples, 0.02%)</title><rect x="23.4596%" y="197" width="0.0211%" height="15" fill="rgb(240,187,13)" fg:x="10029" fg:w="9"/><text x="23.7096%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (7 samples, 0.02%)</title><rect x="23.4643%" y="181" width="0.0164%" height="15" fill="rgb(223,113,26)" fg:x="10031" fg:w="7"/><text x="23.7143%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (456 samples, 1.07%)</title><rect x="31.3614%" y="149" width="1.0667%" height="15" fill="rgb(206,192,2)" fg:x="13407" fg:w="456"/><text x="31.6114%" y="159.50"></text></g><g><title>__memmove_avx_unaligned (23 samples, 0.05%)</title><rect x="32.4281%" y="149" width="0.0538%" height="15" fill="rgb(241,108,4)" fg:x="13863" fg:w="23"/><text x="32.6781%" y="159.50"></text></g><g><title>_int_free (212 samples, 0.50%)</title><rect x="32.4819%" y="149" width="0.4959%" height="15" fill="rgb(247,173,49)" fg:x="13886" fg:w="212"/><text x="32.7319%" y="159.50"></text></g><g><title>tcache_put (49 samples, 0.11%)</title><rect x="32.8632%" y="133" width="0.1146%" height="15" fill="rgb(224,114,35)" fg:x="14049" fg:w="49"/><text x="33.1132%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="35.2936%" y="133" width="0.0117%" height="15" fill="rgb(245,159,27)" fg:x="15088" fg:w="5"/><text x="35.5436%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="35.2936%" y="117" width="0.0117%" height="15" fill="rgb(245,172,44)" fg:x="15088" fg:w="5"/><text x="35.5436%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="35.2936%" y="101" width="0.0117%" height="15" fill="rgb(236,23,11)" fg:x="15088" fg:w="5"/><text x="35.5436%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="35.2936%" y="85" width="0.0117%" height="15" fill="rgb(205,117,38)" fg:x="15088" fg:w="5"/><text x="35.5436%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="35.2936%" y="69" width="0.0117%" height="15" fill="rgb(237,72,25)" fg:x="15088" fg:w="5"/><text x="35.5436%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="35.2936%" y="53" width="0.0117%" height="15" fill="rgb(244,70,9)" fg:x="15088" fg:w="5"/><text x="35.5436%" y="63.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="35.2936%" y="37" width="0.0117%" height="15" fill="rgb(217,125,39)" fg:x="15088" fg:w="5"/><text x="35.5436%" y="47.50"></text></g><g><title>alloc_perturb (5 samples, 0.01%)</title><rect x="35.3053%" y="133" width="0.0117%" height="15" fill="rgb(235,36,10)" fg:x="15093" fg:w="5"/><text x="35.5553%" y="143.50"></text></g><g><title>checked_request2size (28 samples, 0.07%)</title><rect x="35.3170%" y="133" width="0.0655%" height="15" fill="rgb(251,123,47)" fg:x="15098" fg:w="28"/><text x="35.5670%" y="143.50"></text></g><g><title>tcache_put (8 samples, 0.02%)</title><rect x="35.3825%" y="133" width="0.0187%" height="15" fill="rgb(221,13,13)" fg:x="15126" fg:w="8"/><text x="35.6325%" y="143.50"></text></g><g><title>_int_realloc (2,290 samples, 5.36%)</title><rect x="30.0842%" y="165" width="5.3567%" height="15" fill="rgb(238,131,9)" fg:x="12861" fg:w="2290"/><text x="30.3342%" y="175.50">_int_re..</text></g><g><title>_int_malloc (1,053 samples, 2.46%)</title><rect x="32.9778%" y="149" width="2.4632%" height="15" fill="rgb(211,50,8)" fg:x="14098" fg:w="1053"/><text x="33.2278%" y="159.50">_i..</text></g><g><title>unlink_chunk (17 samples, 0.04%)</title><rect x="35.4012%" y="133" width="0.0398%" height="15" fill="rgb(245,182,24)" fg:x="15134" fg:w="17"/><text x="35.6512%" y="143.50"></text></g><g><title>__GI___libc_realloc (2,751 samples, 6.44%)</title><rect x="29.0199%" y="181" width="6.4351%" height="15" fill="rgb(242,14,37)" fg:x="12406" fg:w="2751"/><text x="29.2699%" y="191.50">__GI___l..</text></g><g><title>checked_request2size (5 samples, 0.01%)</title><rect x="35.4433%" y="165" width="0.0117%" height="15" fill="rgb(246,228,12)" fg:x="15152" fg:w="5"/><text x="35.6933%" y="175.50"></text></g><g><title>__rdl_realloc (286 samples, 0.67%)</title><rect x="35.4550%" y="181" width="0.6690%" height="15" fill="rgb(213,55,15)" fg:x="15157" fg:w="286"/><text x="35.7050%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (214 samples, 0.50%)</title><rect x="35.6234%" y="165" width="0.5006%" height="15" fill="rgb(209,9,3)" fg:x="15229" fg:w="214"/><text x="35.8734%" y="175.50"></text></g><g><title>mango_chess::board::BoardState::make_move (5,455 samples, 12.76%)</title><rect x="23.4807%" y="229" width="12.7602%" height="15" fill="rgb(230,59,30)" fg:x="10038" fg:w="5455"/><text x="23.7307%" y="239.50">mango_chess::board:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3,707 samples, 8.67%)</title><rect x="27.5696%" y="213" width="8.6713%" height="15" fill="rgb(209,121,21)" fg:x="11786" fg:w="3707"/><text x="27.8196%" y="223.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::finish_grow (3,441 samples, 8.05%)</title><rect x="28.1918%" y="197" width="8.0491%" height="15" fill="rgb(220,109,13)" fg:x="12052" fg:w="3441"/><text x="28.4418%" y="207.50">alloc::raw_..</text></g><g><title>__rust_realloc (50 samples, 0.12%)</title><rect x="36.1240%" y="181" width="0.1170%" height="15" fill="rgb(232,18,1)" fg:x="15443" fg:w="50"/><text x="36.3740%" y="191.50"></text></g><g><title>[unknown] (31 samples, 0.07%)</title><rect x="61.3684%" y="213" width="0.0725%" height="15" fill="rgb(215,41,42)" fg:x="26235" fg:w="31"/><text x="61.6184%" y="223.50"></text></g><g><title>[unknown] (31 samples, 0.07%)</title><rect x="61.3684%" y="197" width="0.0725%" height="15" fill="rgb(224,123,36)" fg:x="26235" fg:w="31"/><text x="61.6184%" y="207.50"></text></g><g><title>[unknown] (31 samples, 0.07%)</title><rect x="61.3684%" y="181" width="0.0725%" height="15" fill="rgb(240,125,3)" fg:x="26235" fg:w="31"/><text x="61.6184%" y="191.50"></text></g><g><title>[unknown] (30 samples, 0.07%)</title><rect x="61.3708%" y="165" width="0.0702%" height="15" fill="rgb(205,98,50)" fg:x="26236" fg:w="30"/><text x="61.6208%" y="175.50"></text></g><g><title>[unknown] (30 samples, 0.07%)</title><rect x="61.3708%" y="149" width="0.0702%" height="15" fill="rgb(205,185,37)" fg:x="26236" fg:w="30"/><text x="61.6208%" y="159.50"></text></g><g><title>[unknown] (30 samples, 0.07%)</title><rect x="61.3708%" y="133" width="0.0702%" height="15" fill="rgb(238,207,15)" fg:x="26236" fg:w="30"/><text x="61.6208%" y="143.50"></text></g><g><title>[unknown] (30 samples, 0.07%)</title><rect x="61.3708%" y="117" width="0.0702%" height="15" fill="rgb(213,199,42)" fg:x="26236" fg:w="30"/><text x="61.6208%" y="127.50"></text></g><g><title>[unknown] (16 samples, 0.04%)</title><rect x="61.4035%" y="101" width="0.0374%" height="15" fill="rgb(235,201,11)" fg:x="26250" fg:w="16"/><text x="61.6535%" y="111.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="61.4175%" y="85" width="0.0234%" height="15" fill="rgb(207,46,11)" fg:x="26256" fg:w="10"/><text x="61.6675%" y="95.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="61.4246%" y="69" width="0.0164%" height="15" fill="rgb(241,35,35)" fg:x="26259" fg:w="7"/><text x="61.6746%" y="79.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="61.4269%" y="53" width="0.0140%" height="15" fill="rgb(243,32,47)" fg:x="26260" fg:w="6"/><text x="61.6769%" y="63.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="61.4269%" y="37" width="0.0140%" height="15" fill="rgb(247,202,23)" fg:x="26260" fg:w="6"/><text x="61.6769%" y="47.50"></text></g><g><title>free_perturb (27 samples, 0.06%)</title><rect x="65.6585%" y="181" width="0.0632%" height="15" fill="rgb(219,102,11)" fg:x="28069" fg:w="27"/><text x="65.9085%" y="191.50"></text></g><g><title>tcache_put (36 samples, 0.08%)</title><rect x="65.7216%" y="181" width="0.0842%" height="15" fill="rgb(243,110,44)" fg:x="28096" fg:w="36"/><text x="65.9716%" y="191.50"></text></g><g><title>_int_free (1,325 samples, 3.10%)</title><rect x="62.7485%" y="197" width="3.0994%" height="15" fill="rgb(222,74,54)" fg:x="26825" fg:w="1325"/><text x="62.9985%" y="207.50">_in..</text></g><g><title>unlink_chunk (18 samples, 0.04%)</title><rect x="65.8058%" y="181" width="0.0421%" height="15" fill="rgb(216,99,12)" fg:x="28132" fg:w="18"/><text x="66.0558%" y="191.50"></text></g><g><title>__GI___libc_free (1,886 samples, 4.41%)</title><rect x="61.4409%" y="213" width="4.4117%" height="15" fill="rgb(226,22,26)" fg:x="26266" fg:w="1886"/><text x="61.6909%" y="223.50">__GI_..</text></g><g><title>__rdl_dealloc (38 samples, 0.09%)</title><rect x="65.8526%" y="213" width="0.0889%" height="15" fill="rgb(217,163,10)" fg:x="28152" fg:w="38"/><text x="66.1026%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (38 samples, 0.09%)</title><rect x="65.8526%" y="197" width="0.0889%" height="15" fill="rgb(213,25,53)" fg:x="28152" fg:w="38"/><text x="66.1026%" y="207.50"></text></g><g><title>__rust_dealloc (155 samples, 0.36%)</title><rect x="65.9415%" y="213" width="0.3626%" height="15" fill="rgb(252,105,26)" fg:x="28190" fg:w="155"/><text x="66.1915%" y="223.50"></text></g><g><title>checked_request2size (47 samples, 0.11%)</title><rect x="71.4971%" y="165" width="0.1099%" height="15" fill="rgb(220,39,43)" fg:x="30565" fg:w="47"/><text x="71.7471%" y="175.50"></text></g><g><title>__GI___libc_malloc (526 samples, 1.23%)</title><rect x="70.8444%" y="181" width="1.2304%" height="15" fill="rgb(229,68,48)" fg:x="30286" fg:w="526"/><text x="71.0944%" y="191.50"></text></g><g><title>tcache_get (200 samples, 0.47%)</title><rect x="71.6070%" y="165" width="0.4678%" height="15" fill="rgb(252,8,32)" fg:x="30612" fg:w="200"/><text x="71.8570%" y="175.50"></text></g><g><title>[libc.so.6] (10 samples, 0.02%)</title><rect x="75.7520%" y="149" width="0.0234%" height="15" fill="rgb(223,20,43)" fg:x="32384" fg:w="10"/><text x="76.0020%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (507 samples, 1.19%)</title><rect x="75.7778%" y="149" width="1.1860%" height="15" fill="rgb(229,81,49)" fg:x="32395" fg:w="507"/><text x="76.0278%" y="159.50"></text></g><g><title>__memmove_avx_unaligned (61 samples, 0.14%)</title><rect x="76.9637%" y="149" width="0.1427%" height="15" fill="rgb(236,28,36)" fg:x="32902" fg:w="61"/><text x="77.2137%" y="159.50"></text></g><g><title>free_perturb (9 samples, 0.02%)</title><rect x="80.0608%" y="133" width="0.0211%" height="15" fill="rgb(249,185,26)" fg:x="34226" fg:w="9"/><text x="80.3108%" y="143.50"></text></g><g><title>tcache_put (92 samples, 0.22%)</title><rect x="80.0819%" y="133" width="0.2152%" height="15" fill="rgb(249,174,33)" fg:x="34235" fg:w="92"/><text x="80.3319%" y="143.50"></text></g><g><title>_int_free (1,377 samples, 3.22%)</title><rect x="77.1064%" y="149" width="3.2211%" height="15" fill="rgb(233,201,37)" fg:x="32963" fg:w="1377"/><text x="77.3564%" y="159.50">_in..</text></g><g><title>unlink_chunk (13 samples, 0.03%)</title><rect x="80.2971%" y="133" width="0.0304%" height="15" fill="rgb(221,78,26)" fg:x="34327" fg:w="13"/><text x="80.5471%" y="143.50"></text></g><g><title>checked_request2size (68 samples, 0.16%)</title><rect x="82.8865%" y="133" width="0.1591%" height="15" fill="rgb(250,127,30)" fg:x="35434" fg:w="68"/><text x="83.1365%" y="143.50"></text></g><g><title>tcache_put (74 samples, 0.17%)</title><rect x="83.0456%" y="133" width="0.1731%" height="15" fill="rgb(230,49,44)" fg:x="35502" fg:w="74"/><text x="83.2956%" y="143.50"></text></g><g><title>_int_malloc (1,278 samples, 2.99%)</title><rect x="80.3275%" y="149" width="2.9895%" height="15" fill="rgb(229,67,23)" fg:x="34340" fg:w="1278"/><text x="80.5775%" y="159.50">_in..</text></g><g><title>unlink_chunk (42 samples, 0.10%)</title><rect x="83.2187%" y="133" width="0.0982%" height="15" fill="rgb(249,83,47)" fg:x="35576" fg:w="42"/><text x="83.4687%" y="143.50"></text></g><g><title>_int_realloc (4,082 samples, 9.55%)</title><rect x="73.8035%" y="165" width="9.5485%" height="15" fill="rgb(215,43,3)" fg:x="31551" fg:w="4082"/><text x="74.0535%" y="175.50">_int_realloc</text></g><g><title>unlink_chunk (15 samples, 0.04%)</title><rect x="83.3170%" y="149" width="0.0351%" height="15" fill="rgb(238,154,13)" fg:x="35618" fg:w="15"/><text x="83.5670%" y="159.50"></text></g><g><title>arena_for_chunk (21 samples, 0.05%)</title><rect x="83.3520%" y="165" width="0.0491%" height="15" fill="rgb(219,56,2)" fg:x="35633" fg:w="21"/><text x="83.6020%" y="175.50"></text></g><g><title>__GI___libc_realloc (4,859 samples, 11.37%)</title><rect x="72.0749%" y="181" width="11.3661%" height="15" fill="rgb(233,0,4)" fg:x="30812" fg:w="4859"/><text x="72.3249%" y="191.50">__GI___libc_reall..</text></g><g><title>checked_request2size (17 samples, 0.04%)</title><rect x="83.4012%" y="165" width="0.0398%" height="15" fill="rgb(235,30,7)" fg:x="35654" fg:w="17"/><text x="83.6512%" y="175.50"></text></g><g><title>__rdl_alloc (274 samples, 0.64%)</title><rect x="83.4409%" y="181" width="0.6409%" height="15" fill="rgb(250,79,13)" fg:x="35671" fg:w="274"/><text x="83.6909%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (232 samples, 0.54%)</title><rect x="83.5392%" y="165" width="0.5427%" height="15" fill="rgb(211,146,34)" fg:x="35713" fg:w="232"/><text x="83.7892%" y="175.50"></text></g><g><title>__rdl_realloc (502 samples, 1.17%)</title><rect x="84.0819%" y="181" width="1.1743%" height="15" fill="rgb(228,22,38)" fg:x="35945" fg:w="502"/><text x="84.3319%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (361 samples, 0.84%)</title><rect x="84.4117%" y="165" width="0.8444%" height="15" fill="rgb(235,168,5)" fg:x="36086" fg:w="361"/><text x="84.6617%" y="175.50"></text></g><g><title>__rust_alloc (94 samples, 0.22%)</title><rect x="85.2561%" y="181" width="0.2199%" height="15" fill="rgb(221,155,16)" fg:x="36447" fg:w="94"/><text x="85.5061%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8,373 samples, 19.59%)</title><rect x="66.3041%" y="213" width="19.5860%" height="15" fill="rgb(215,215,53)" fg:x="28345" fg:w="8373"/><text x="66.5541%" y="223.50">alloc::raw_vec::RawVec&lt;T,A&gt;::re..</text></g><g><title>alloc::raw_vec::finish_grow (7,282 samples, 17.03%)</title><rect x="68.8561%" y="197" width="17.0339%" height="15" fill="rgb(223,4,10)" fg:x="29436" fg:w="7282"/><text x="69.1061%" y="207.50">alloc::raw_vec::finish_grow</text></g><g><title>__rust_realloc (177 samples, 0.41%)</title><rect x="85.4760%" y="181" width="0.4140%" height="15" fill="rgb(234,103,6)" fg:x="36541" fg:w="177"/><text x="85.7260%" y="191.50"></text></g><g><title>__GI___libc_malloc (47 samples, 0.11%)</title><rect x="87.1719%" y="165" width="0.1099%" height="15" fill="rgb(227,97,0)" fg:x="37266" fg:w="47"/><text x="87.4219%" y="175.50"></text></g><g><title>tcache_get (16 samples, 0.04%)</title><rect x="87.2444%" y="149" width="0.0374%" height="15" fill="rgb(234,150,53)" fg:x="37297" fg:w="16"/><text x="87.4944%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (45 samples, 0.11%)</title><rect x="87.5626%" y="133" width="0.1053%" height="15" fill="rgb(228,201,54)" fg:x="37433" fg:w="45"/><text x="87.8126%" y="143.50"></text></g><g><title>__memmove_avx_unaligned (5 samples, 0.01%)</title><rect x="87.6678%" y="133" width="0.0117%" height="15" fill="rgb(222,22,37)" fg:x="37478" fg:w="5"/><text x="87.9178%" y="143.50"></text></g><g><title>_int_free (40 samples, 0.09%)</title><rect x="87.6795%" y="133" width="0.0936%" height="15" fill="rgb(237,53,32)" fg:x="37483" fg:w="40"/><text x="87.9295%" y="143.50"></text></g><g><title>tcache_put (10 samples, 0.02%)</title><rect x="87.7497%" y="117" width="0.0234%" height="15" fill="rgb(233,25,53)" fg:x="37513" fg:w="10"/><text x="87.9997%" y="127.50"></text></g><g><title>__GI___libc_realloc (298 samples, 0.70%)</title><rect x="87.2819%" y="165" width="0.6971%" height="15" fill="rgb(210,40,34)" fg:x="37313" fg:w="298"/><text x="87.5319%" y="175.50"></text></g><g><title>_int_realloc (227 samples, 0.53%)</title><rect x="87.4480%" y="149" width="0.5310%" height="15" fill="rgb(241,220,44)" fg:x="37384" fg:w="227"/><text x="87.6980%" y="159.50"></text></g><g><title>_int_malloc (88 samples, 0.21%)</title><rect x="87.7731%" y="133" width="0.2058%" height="15" fill="rgb(235,28,35)" fg:x="37523" fg:w="88"/><text x="88.0231%" y="143.50"></text></g><g><title>unlink_chunk (6 samples, 0.01%)</title><rect x="87.9649%" y="117" width="0.0140%" height="15" fill="rgb(210,56,17)" fg:x="37605" fg:w="6"/><text x="88.2149%" y="127.50"></text></g><g><title>__rdl_alloc (32 samples, 0.07%)</title><rect x="87.9789%" y="165" width="0.0749%" height="15" fill="rgb(224,130,29)" fg:x="37611" fg:w="32"/><text x="88.2289%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (22 samples, 0.05%)</title><rect x="88.0023%" y="149" width="0.0515%" height="15" fill="rgb(235,212,8)" fg:x="37621" fg:w="22"/><text x="88.2523%" y="159.50"></text></g><g><title>__rdl_realloc (25 samples, 0.06%)</title><rect x="88.0538%" y="165" width="0.0585%" height="15" fill="rgb(223,33,50)" fg:x="37643" fg:w="25"/><text x="88.3038%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (13 samples, 0.03%)</title><rect x="88.0819%" y="149" width="0.0304%" height="15" fill="rgb(219,149,13)" fg:x="37655" fg:w="13"/><text x="88.3319%" y="159.50"></text></g><g><title>__rust_alloc (15 samples, 0.04%)</title><rect x="88.1123%" y="165" width="0.0351%" height="15" fill="rgb(250,156,29)" fg:x="37668" fg:w="15"/><text x="88.3623%" y="175.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (973 samples, 2.28%)</title><rect x="85.8901%" y="213" width="2.2760%" height="15" fill="rgb(216,193,19)" fg:x="36718" fg:w="973"/><text x="86.1401%" y="223.50">m..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (530 samples, 1.24%)</title><rect x="86.9263%" y="197" width="1.2398%" height="15" fill="rgb(216,135,14)" fg:x="37161" fg:w="530"/><text x="87.1763%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (479 samples, 1.12%)</title><rect x="87.0456%" y="181" width="1.1205%" height="15" fill="rgb(241,47,5)" fg:x="37212" fg:w="479"/><text x="87.2956%" y="191.50"></text></g><g><title>__rust_realloc (8 samples, 0.02%)</title><rect x="88.1474%" y="165" width="0.0187%" height="15" fill="rgb(233,42,35)" fg:x="37683" fg:w="8"/><text x="88.3974%" y="175.50"></text></g><g><title>__GI___libc_realloc (22 samples, 0.05%)</title><rect x="89.1930%" y="165" width="0.0515%" height="15" fill="rgb(231,13,6)" fg:x="38130" fg:w="22"/><text x="89.4430%" y="175.50"></text></g><g><title>_int_realloc (16 samples, 0.04%)</title><rect x="89.2070%" y="149" width="0.0374%" height="15" fill="rgb(207,181,40)" fg:x="38136" fg:w="16"/><text x="89.4570%" y="159.50"></text></g><g><title>_int_malloc (9 samples, 0.02%)</title><rect x="89.2234%" y="133" width="0.0211%" height="15" fill="rgb(254,173,49)" fg:x="38143" fg:w="9"/><text x="89.4734%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (38 samples, 0.09%)</title><rect x="89.1626%" y="197" width="0.0889%" height="15" fill="rgb(221,1,38)" fg:x="38117" fg:w="38"/><text x="89.4126%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (35 samples, 0.08%)</title><rect x="89.1696%" y="181" width="0.0819%" height="15" fill="rgb(206,124,46)" fg:x="38120" fg:w="35"/><text x="89.4196%" y="191.50"></text></g><g><title>__GI___libc_malloc (52 samples, 0.12%)</title><rect x="90.7462%" y="149" width="0.1216%" height="15" fill="rgb(249,21,11)" fg:x="38794" fg:w="52"/><text x="90.9962%" y="159.50"></text></g><g><title>tcache_get (22 samples, 0.05%)</title><rect x="90.8164%" y="133" width="0.0515%" height="15" fill="rgb(222,201,40)" fg:x="38824" fg:w="22"/><text x="91.0664%" y="143.50"></text></g><g><title>__memcpy_avx_unaligned_erms (26 samples, 0.06%)</title><rect x="91.1135%" y="117" width="0.0608%" height="15" fill="rgb(235,61,29)" fg:x="38951" fg:w="26"/><text x="91.3635%" y="127.50"></text></g><g><title>__memmove_avx_unaligned (8 samples, 0.02%)</title><rect x="91.1743%" y="117" width="0.0187%" height="15" fill="rgb(219,207,3)" fg:x="38977" fg:w="8"/><text x="91.4243%" y="127.50"></text></g><g><title>_int_free (32 samples, 0.07%)</title><rect x="91.1930%" y="117" width="0.0749%" height="15" fill="rgb(222,56,46)" fg:x="38985" fg:w="32"/><text x="91.4430%" y="127.50"></text></g><g><title>tcache_put (7 samples, 0.02%)</title><rect x="91.2515%" y="101" width="0.0164%" height="15" fill="rgb(239,76,54)" fg:x="39010" fg:w="7"/><text x="91.5015%" y="111.50"></text></g><g><title>_int_realloc (217 samples, 0.51%)</title><rect x="91.0222%" y="133" width="0.5076%" height="15" fill="rgb(231,124,27)" fg:x="38912" fg:w="217"/><text x="91.2722%" y="143.50"></text></g><g><title>_int_malloc (112 samples, 0.26%)</title><rect x="91.2678%" y="117" width="0.2620%" height="15" fill="rgb(249,195,6)" fg:x="39017" fg:w="112"/><text x="91.5178%" y="127.50"></text></g><g><title>__GI___libc_realloc (285 samples, 0.67%)</title><rect x="90.8678%" y="149" width="0.6667%" height="15" fill="rgb(237,174,47)" fg:x="38846" fg:w="285"/><text x="91.1178%" y="159.50"></text></g><g><title>__rdl_alloc (22 samples, 0.05%)</title><rect x="91.5345%" y="149" width="0.0515%" height="15" fill="rgb(206,201,31)" fg:x="39131" fg:w="22"/><text x="91.7845%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (20 samples, 0.05%)</title><rect x="91.5392%" y="133" width="0.0468%" height="15" fill="rgb(231,57,52)" fg:x="39133" fg:w="20"/><text x="91.7892%" y="143.50"></text></g><g><title>__rdl_realloc (30 samples, 0.07%)</title><rect x="91.5860%" y="149" width="0.0702%" height="15" fill="rgb(248,177,22)" fg:x="39153" fg:w="30"/><text x="91.8360%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (23 samples, 0.05%)</title><rect x="91.6023%" y="133" width="0.0538%" height="15" fill="rgb(215,211,37)" fg:x="39160" fg:w="23"/><text x="91.8523%" y="143.50"></text></g><g><title>__rust_alloc (11 samples, 0.03%)</title><rect x="91.6561%" y="149" width="0.0257%" height="15" fill="rgb(241,128,51)" fg:x="39183" fg:w="11"/><text x="91.9061%" y="159.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (1,516 samples, 3.55%)</title><rect x="88.1661%" y="213" width="3.5462%" height="15" fill="rgb(227,165,31)" fg:x="37691" fg:w="1516"/><text x="88.4161%" y="223.50">mang..</text></g><g><title>mango_chess::move_generation::bishop_moves (1,052 samples, 2.46%)</title><rect x="89.2515%" y="197" width="2.4608%" height="15" fill="rgb(228,167,24)" fg:x="38155" fg:w="1052"/><text x="89.5015%" y="207.50">ma..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (511 samples, 1.20%)</title><rect x="90.5170%" y="181" width="1.1953%" height="15" fill="rgb(228,143,12)" fg:x="38696" fg:w="511"/><text x="90.7670%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (464 samples, 1.09%)</title><rect x="90.6269%" y="165" width="1.0854%" height="15" fill="rgb(249,149,8)" fg:x="38743" fg:w="464"/><text x="90.8769%" y="175.50"></text></g><g><title>__rust_realloc (13 samples, 0.03%)</title><rect x="91.6819%" y="149" width="0.0304%" height="15" fill="rgb(243,35,44)" fg:x="39194" fg:w="13"/><text x="91.9319%" y="159.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.02%)</title><rect x="93.5953%" y="165" width="0.0187%" height="15" fill="rgb(246,89,9)" fg:x="40012" fg:w="8"/><text x="93.8453%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (88 samples, 0.21%)</title><rect x="94.1029%" y="133" width="0.2058%" height="15" fill="rgb(233,213,13)" fg:x="40229" fg:w="88"/><text x="94.3529%" y="143.50"></text></g><g><title>__memmove_avx_unaligned (9 samples, 0.02%)</title><rect x="94.3088%" y="133" width="0.0211%" height="15" fill="rgb(233,141,41)" fg:x="40317" fg:w="9"/><text x="94.5588%" y="143.50"></text></g><g><title>_int_free (102 samples, 0.24%)</title><rect x="94.3298%" y="133" width="0.2386%" height="15" fill="rgb(239,167,4)" fg:x="40326" fg:w="102"/><text x="94.5798%" y="143.50"></text></g><g><title>tcache_put (9 samples, 0.02%)</title><rect x="94.5474%" y="117" width="0.0211%" height="15" fill="rgb(209,217,16)" fg:x="40419" fg:w="9"/><text x="94.7974%" y="127.50"></text></g><g><title>alloc_perturb (10 samples, 0.02%)</title><rect x="95.3357%" y="117" width="0.0234%" height="15" fill="rgb(219,88,35)" fg:x="40756" fg:w="10"/><text x="95.5857%" y="127.50"></text></g><g><title>checked_request2size (7 samples, 0.02%)</title><rect x="95.3591%" y="117" width="0.0164%" height="15" fill="rgb(220,193,23)" fg:x="40766" fg:w="7"/><text x="95.6091%" y="127.50"></text></g><g><title>_int_realloc (689 samples, 1.61%)</title><rect x="93.8433%" y="149" width="1.6117%" height="15" fill="rgb(230,90,52)" fg:x="40118" fg:w="689"/><text x="94.0933%" y="159.50"></text></g><g><title>_int_malloc (379 samples, 0.89%)</title><rect x="94.5684%" y="133" width="0.8865%" height="15" fill="rgb(252,106,19)" fg:x="40428" fg:w="379"/><text x="94.8184%" y="143.50"></text></g><g><title>unlink_chunk (30 samples, 0.07%)</title><rect x="95.3848%" y="117" width="0.0702%" height="15" fill="rgb(206,74,20)" fg:x="40777" fg:w="30"/><text x="95.6348%" y="127.50"></text></g><g><title>__GI___libc_realloc (792 samples, 1.85%)</title><rect x="93.6140%" y="165" width="1.8526%" height="15" fill="rgb(230,138,44)" fg:x="40020" fg:w="792"/><text x="93.8640%" y="175.50">_..</text></g><g><title>__rdl_realloc (58 samples, 0.14%)</title><rect x="95.4760%" y="165" width="0.1357%" height="15" fill="rgb(235,182,43)" fg:x="40816" fg:w="58"/><text x="95.7260%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (37 samples, 0.09%)</title><rect x="95.5251%" y="149" width="0.0865%" height="15" fill="rgb(242,16,51)" fg:x="40837" fg:w="37"/><text x="95.7751%" y="159.50"></text></g><g><title>mango_chess::board::BoardState::square_is_attacked (25,405 samples, 59.43%)</title><rect x="36.2409%" y="229" width="59.4269%" height="15" fill="rgb(248,9,4)" fg:x="15493" fg:w="25405"/><text x="36.4909%" y="239.50">mango_chess::board::BoardState::square_is_attacked</text></g><g><title>mango_chess::move_generation::rook_moves (1,691 samples, 3.96%)</title><rect x="91.7123%" y="213" width="3.9556%" height="15" fill="rgb(210,31,22)" fg:x="39207" fg:w="1691"/><text x="91.9623%" y="223.50">mang..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,031 samples, 2.41%)</title><rect x="93.2561%" y="197" width="2.4117%" height="15" fill="rgb(239,54,39)" fg:x="39867" fg:w="1031"/><text x="93.5061%" y="207.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (955 samples, 2.23%)</title><rect x="93.4339%" y="181" width="2.2339%" height="15" fill="rgb(230,99,41)" fg:x="39943" fg:w="955"/><text x="93.6839%" y="191.50">a..</text></g><g><title>__rust_realloc (21 samples, 0.05%)</title><rect x="95.6187%" y="165" width="0.0491%" height="15" fill="rgb(253,106,12)" fg:x="40877" fg:w="21"/><text x="95.8687%" y="175.50"></text></g><g><title>mango_chess::engine::negamax (368 samples, 0.86%)</title><rect x="95.6678%" y="229" width="0.8608%" height="15" fill="rgb(213,46,41)" fg:x="40898" fg:w="368"/><text x="95.9178%" y="239.50"></text></g><g><title>__GI___libc_free (39 samples, 0.09%)</title><rect x="97.0994%" y="213" width="0.0912%" height="15" fill="rgb(215,133,35)" fg:x="41510" fg:w="39"/><text x="97.3494%" y="223.50"></text></g><g><title>_int_free (29 samples, 0.07%)</title><rect x="97.1228%" y="197" width="0.0678%" height="15" fill="rgb(213,28,5)" fg:x="41520" fg:w="29"/><text x="97.3728%" y="207.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.01%)</title><rect x="97.1906%" y="213" width="0.0140%" height="15" fill="rgb(215,77,49)" fg:x="41549" fg:w="6"/><text x="97.4406%" y="223.50"></text></g><g><title>__rdl_alloc (5 samples, 0.01%)</title><rect x="97.2047%" y="213" width="0.0117%" height="15" fill="rgb(248,100,22)" fg:x="41555" fg:w="5"/><text x="97.4547%" y="223.50"></text></g><g><title>__rust_alloc (5 samples, 0.01%)</title><rect x="97.2211%" y="213" width="0.0117%" height="15" fill="rgb(208,67,9)" fg:x="41562" fg:w="5"/><text x="97.4711%" y="223.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.02%)</title><rect x="97.3123%" y="181" width="0.0211%" height="15" fill="rgb(219,133,21)" fg:x="41601" fg:w="9"/><text x="97.5623%" y="191.50"></text></g><g><title>tcache_get (5 samples, 0.01%)</title><rect x="97.3216%" y="165" width="0.0117%" height="15" fill="rgb(246,46,29)" fg:x="41605" fg:w="5"/><text x="97.5716%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (17 samples, 0.04%)</title><rect x="97.3965%" y="149" width="0.0398%" height="15" fill="rgb(246,185,52)" fg:x="41637" fg:w="17"/><text x="97.6465%" y="159.50"></text></g><g><title>_int_free (24 samples, 0.06%)</title><rect x="97.4386%" y="149" width="0.0561%" height="15" fill="rgb(252,136,11)" fg:x="41655" fg:w="24"/><text x="97.6886%" y="159.50"></text></g><g><title>_int_realloc (112 samples, 0.26%)</title><rect x="97.3544%" y="165" width="0.2620%" height="15" fill="rgb(219,138,53)" fg:x="41619" fg:w="112"/><text x="97.6044%" y="175.50"></text></g><g><title>_int_malloc (52 samples, 0.12%)</title><rect x="97.4947%" y="149" width="0.1216%" height="15" fill="rgb(211,51,23)" fg:x="41679" fg:w="52"/><text x="97.7447%" y="159.50"></text></g><g><title>__GI___libc_realloc (122 samples, 0.29%)</title><rect x="97.3333%" y="181" width="0.2854%" height="15" fill="rgb(247,221,28)" fg:x="41610" fg:w="122"/><text x="97.5833%" y="191.50"></text></g><g><title>__rdl_realloc (11 samples, 0.03%)</title><rect x="97.6281%" y="181" width="0.0257%" height="15" fill="rgb(251,222,45)" fg:x="41736" fg:w="11"/><text x="97.8781%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (7 samples, 0.02%)</title><rect x="97.6374%" y="165" width="0.0164%" height="15" fill="rgb(217,162,53)" fg:x="41740" fg:w="7"/><text x="97.8874%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (181 samples, 0.42%)</title><rect x="97.2374%" y="213" width="0.4234%" height="15" fill="rgb(229,93,14)" fg:x="41569" fg:w="181"/><text x="97.4874%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (171 samples, 0.40%)</title><rect x="97.2608%" y="197" width="0.4000%" height="15" fill="rgb(209,67,49)" fg:x="41579" fg:w="171"/><text x="97.5108%" y="207.50"></text></g><g><title>_int_realloc (21 samples, 0.05%)</title><rect x="97.9228%" y="149" width="0.0491%" height="15" fill="rgb(213,87,29)" fg:x="41862" fg:w="21"/><text x="98.1728%" y="159.50"></text></g><g><title>_int_malloc (9 samples, 0.02%)</title><rect x="97.9509%" y="133" width="0.0211%" height="15" fill="rgb(205,151,52)" fg:x="41874" fg:w="9"/><text x="98.2009%" y="143.50"></text></g><g><title>__GI___libc_realloc (32 samples, 0.07%)</title><rect x="97.8994%" y="165" width="0.0749%" height="15" fill="rgb(253,215,39)" fg:x="41852" fg:w="32"/><text x="98.1494%" y="175.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (137 samples, 0.32%)</title><rect x="97.6608%" y="213" width="0.3205%" height="15" fill="rgb(221,220,41)" fg:x="41750" fg:w="137"/><text x="97.9108%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (36 samples, 0.08%)</title><rect x="97.8971%" y="197" width="0.0842%" height="15" fill="rgb(218,133,21)" fg:x="41851" fg:w="36"/><text x="98.1471%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (36 samples, 0.08%)</title><rect x="97.8971%" y="181" width="0.0842%" height="15" fill="rgb(221,193,43)" fg:x="41851" fg:w="36"/><text x="98.1471%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (15 samples, 0.04%)</title><rect x="98.8842%" y="133" width="0.0351%" height="15" fill="rgb(240,128,52)" fg:x="42273" fg:w="15"/><text x="99.1342%" y="143.50"></text></g><g><title>_int_free (11 samples, 0.03%)</title><rect x="98.9193%" y="133" width="0.0257%" height="15" fill="rgb(253,114,12)" fg:x="42288" fg:w="11"/><text x="99.1693%" y="143.50"></text></g><g><title>_int_malloc (37 samples, 0.09%)</title><rect x="98.9450%" y="133" width="0.0865%" height="15" fill="rgb(215,223,47)" fg:x="42299" fg:w="37"/><text x="99.1950%" y="143.50"></text></g><g><title>_int_realloc (93 samples, 0.22%)</title><rect x="98.8164%" y="149" width="0.2175%" height="15" fill="rgb(248,225,23)" fg:x="42244" fg:w="93"/><text x="99.0664%" y="159.50"></text></g><g><title>__GI___libc_realloc (128 samples, 0.30%)</title><rect x="98.7462%" y="165" width="0.2994%" height="15" fill="rgb(250,108,0)" fg:x="42214" fg:w="128"/><text x="98.9962%" y="175.50"></text></g><g><title>checked_request2size (5 samples, 0.01%)</title><rect x="99.0339%" y="149" width="0.0117%" height="15" fill="rgb(228,208,7)" fg:x="42337" fg:w="5"/><text x="99.2839%" y="159.50"></text></g><g><title>__rdl_realloc (7 samples, 0.02%)</title><rect x="99.0456%" y="165" width="0.0164%" height="15" fill="rgb(244,45,10)" fg:x="42342" fg:w="7"/><text x="99.2956%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 0.01%)</title><rect x="99.0480%" y="149" width="0.0140%" height="15" fill="rgb(207,125,25)" fg:x="42343" fg:w="6"/><text x="99.2980%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (154 samples, 0.36%)</title><rect x="98.7064%" y="197" width="0.3602%" height="15" fill="rgb(210,195,18)" fg:x="42197" fg:w="154"/><text x="98.9564%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (144 samples, 0.34%)</title><rect x="98.7298%" y="181" width="0.3368%" height="15" fill="rgb(249,80,12)" fg:x="42207" fg:w="144"/><text x="98.9798%" y="191.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (530 samples, 1.24%)</title><rect x="97.9813%" y="213" width="1.2398%" height="15" fill="rgb(221,65,9)" fg:x="41887" fg:w="530"/><text x="98.2313%" y="223.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (66 samples, 0.15%)</title><rect x="99.0667%" y="197" width="0.1544%" height="15" fill="rgb(235,49,36)" fg:x="42351" fg:w="66"/><text x="99.3167%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.02%)</title><rect x="99.2000%" y="181" width="0.0211%" height="15" fill="rgb(225,32,20)" fg:x="42408" fg:w="9"/><text x="99.4500%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.02%)</title><rect x="99.2000%" y="165" width="0.0211%" height="15" fill="rgb(215,141,46)" fg:x="42408" fg:w="9"/><text x="99.4500%" y="175.50"></text></g><g><title>__GI___libc_realloc (9 samples, 0.02%)</title><rect x="99.2000%" y="149" width="0.0211%" height="15" fill="rgb(250,160,47)" fg:x="42408" fg:w="9"/><text x="99.4500%" y="159.50"></text></g><g><title>_int_realloc (7 samples, 0.02%)</title><rect x="99.2047%" y="133" width="0.0164%" height="15" fill="rgb(216,222,40)" fg:x="42410" fg:w="7"/><text x="99.4547%" y="143.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.02%)</title><rect x="99.6702%" y="133" width="0.0211%" height="15" fill="rgb(234,217,39)" fg:x="42609" fg:w="9"/><text x="99.9202%" y="143.50"></text></g><g><title>_int_free (5 samples, 0.01%)</title><rect x="99.6912%" y="133" width="0.0117%" height="15" fill="rgb(207,178,40)" fg:x="42618" fg:w="5"/><text x="99.9412%" y="143.50"></text></g><g><title>_int_realloc (43 samples, 0.10%)</title><rect x="99.6538%" y="149" width="0.1006%" height="15" fill="rgb(221,136,13)" fg:x="42602" fg:w="43"/><text x="99.9038%" y="159.50"></text></g><g><title>_int_malloc (22 samples, 0.05%)</title><rect x="99.7029%" y="133" width="0.0515%" height="15" fill="rgb(249,199,10)" fg:x="42623" fg:w="22"/><text x="99.9529%" y="143.50"></text></g><g><title>__GI___libc_realloc (58 samples, 0.14%)</title><rect x="99.6211%" y="165" width="0.1357%" height="15" fill="rgb(249,222,13)" fg:x="42588" fg:w="58"/><text x="99.8711%" y="175.50"></text></g><g><title>mango_chess::engine::negamax (41,300 samples, 96.61%)</title><rect x="3.1602%" y="245" width="96.6082%" height="15" fill="rgb(244,185,38)" fg:x="1351" fg:w="41300"/><text x="3.4102%" y="255.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_player (1,385 samples, 3.24%)</title><rect x="96.5287%" y="229" width="3.2398%" height="15" fill="rgb(236,202,9)" fg:x="41266" fg:w="1385"/><text x="96.7787%" y="239.50">man..</text></g><g><title>mango_chess::move_generation::rook_moves (234 samples, 0.55%)</title><rect x="99.2211%" y="213" width="0.5474%" height="15" fill="rgb(250,229,37)" fg:x="42417" fg:w="234"/><text x="99.4711%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (68 samples, 0.16%)</title><rect x="99.6094%" y="197" width="0.1591%" height="15" fill="rgb(206,174,23)" fg:x="42583" fg:w="68"/><text x="99.8594%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (65 samples, 0.15%)</title><rect x="99.6164%" y="181" width="0.1520%" height="15" fill="rgb(211,33,43)" fg:x="42586" fg:w="65"/><text x="99.8664%" y="191.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.01%)</title><rect x="99.8152%" y="197" width="0.0117%" height="15" fill="rgb(245,58,50)" fg:x="42671" fg:w="5"/><text x="100.0652%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.04%)</title><rect x="99.8035%" y="229" width="0.0351%" height="15" fill="rgb(244,68,36)" fg:x="42666" fg:w="15"/><text x="100.0535%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.03%)</title><rect x="99.8058%" y="213" width="0.0327%" height="15" fill="rgb(232,229,15)" fg:x="42667" fg:w="14"/><text x="100.0558%" y="223.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (8 samples, 0.02%)</title><rect x="99.8386%" y="229" width="0.0187%" height="15" fill="rgb(254,30,23)" fg:x="42681" fg:w="8"/><text x="100.0886%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.03%)</title><rect x="99.8994%" y="213" width="0.0304%" height="15" fill="rgb(235,160,14)" fg:x="42707" fg:w="13"/><text x="100.1494%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.03%)</title><rect x="99.8994%" y="197" width="0.0304%" height="15" fill="rgb(212,155,44)" fg:x="42707" fg:w="13"/><text x="100.1494%" y="207.50"></text></g><g><title>__GI___libc_realloc (13 samples, 0.03%)</title><rect x="99.8994%" y="181" width="0.0304%" height="15" fill="rgb(226,2,50)" fg:x="42707" fg:w="13"/><text x="100.1494%" y="191.50"></text></g><g><title>_int_realloc (11 samples, 0.03%)</title><rect x="99.9041%" y="165" width="0.0257%" height="15" fill="rgb(234,177,6)" fg:x="42709" fg:w="11"/><text x="100.1541%" y="175.50"></text></g><g><title>_int_malloc (7 samples, 0.02%)</title><rect x="99.9135%" y="149" width="0.0164%" height="15" fill="rgb(217,24,9)" fg:x="42713" fg:w="7"/><text x="100.1635%" y="159.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (37 samples, 0.09%)</title><rect x="99.8573%" y="229" width="0.0865%" height="15" fill="rgb(220,13,46)" fg:x="42689" fg:w="37"/><text x="100.1073%" y="239.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (6 samples, 0.01%)</title><rect x="99.9298%" y="213" width="0.0140%" height="15" fill="rgb(239,221,27)" fg:x="42720" fg:w="6"/><text x="100.1798%" y="223.50"></text></g><g><title>mango_chess::engine::negamax (42,660 samples, 99.79%)</title><rect x="0.1778%" y="261" width="99.7895%" height="15" fill="rgb(222,198,25)" fg:x="76" fg:w="42660"/><text x="0.4278%" y="271.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_player (85 samples, 0.20%)</title><rect x="99.7684%" y="245" width="0.1988%" height="15" fill="rgb(211,99,13)" fg:x="42651" fg:w="85"/><text x="100.0184%" y="255.50"></text></g><g><title>mango_chess::move_generation::rook_moves (10 samples, 0.02%)</title><rect x="99.9439%" y="229" width="0.0234%" height="15" fill="rgb(232,111,31)" fg:x="42726" fg:w="10"/><text x="100.1939%" y="239.50"></text></g><g><title>mango_chess::engine::negamax (42,739 samples, 99.97%)</title><rect x="0.0094%" y="277" width="99.9743%" height="15" fill="rgb(245,82,37)" fg:x="4" fg:w="42739"/><text x="0.2594%" y="287.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_player (7 samples, 0.02%)</title><rect x="99.9673%" y="261" width="0.0164%" height="15" fill="rgb(227,149,46)" fg:x="42736" fg:w="7"/><text x="100.2173%" y="271.50"></text></g><g><title>mango_chess (42,744 samples, 99.99%)</title><rect x="0.0000%" y="581" width="99.9860%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="42744"/><text x="0.2500%" y="591.50">mango_chess</text></g><g><title>_start (42,743 samples, 99.98%)</title><rect x="0.0023%" y="565" width="99.9836%" height="15" fill="rgb(226,80,48)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="575.50">_start</text></g><g><title>__libc_start_main_impl (42,743 samples, 99.98%)</title><rect x="0.0023%" y="549" width="99.9836%" height="15" fill="rgb(238,224,15)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="559.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (42,743 samples, 99.98%)</title><rect x="0.0023%" y="533" width="99.9836%" height="15" fill="rgb(241,136,10)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="543.50">__libc_start_call_main</text></g><g><title>main (42,743 samples, 99.98%)</title><rect x="0.0023%" y="517" width="99.9836%" height="15" fill="rgb(208,32,45)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (42,743 samples, 99.98%)</title><rect x="0.0023%" y="501" width="99.9836%" height="15" fill="rgb(207,135,9)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (42,743 samples, 99.98%)</title><rect x="0.0023%" y="485" width="99.9836%" height="15" fill="rgb(206,86,44)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (42,743 samples, 99.98%)</title><rect x="0.0023%" y="469" width="99.9836%" height="15" fill="rgb(245,177,15)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (42,743 samples, 99.98%)</title><rect x="0.0023%" y="453" width="99.9836%" height="15" fill="rgb(206,64,50)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="463.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (42,743 samples, 99.98%)</title><rect x="0.0023%" y="437" width="99.9836%" height="15" fill="rgb(234,36,40)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="447.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (42,743 samples, 99.98%)</title><rect x="0.0023%" y="421" width="99.9836%" height="15" fill="rgb(213,64,8)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="431.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (42,743 samples, 99.98%)</title><rect x="0.0023%" y="405" width="99.9836%" height="15" fill="rgb(210,75,36)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (42,743 samples, 99.98%)</title><rect x="0.0023%" y="389" width="99.9836%" height="15" fill="rgb(229,88,21)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="399.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (42,743 samples, 99.98%)</title><rect x="0.0023%" y="373" width="99.9836%" height="15" fill="rgb(252,204,47)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="383.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (42,743 samples, 99.98%)</title><rect x="0.0023%" y="357" width="99.9836%" height="15" fill="rgb(208,77,27)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="367.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (42,743 samples, 99.98%)</title><rect x="0.0023%" y="341" width="99.9836%" height="15" fill="rgb(221,76,26)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="351.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mango_chess::main (42,743 samples, 99.98%)</title><rect x="0.0023%" y="325" width="99.9836%" height="15" fill="rgb(225,139,18)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="335.50">mango_chess::main</text></g><g><title>mango_chess::engine::search (42,743 samples, 99.98%)</title><rect x="0.0023%" y="309" width="99.9836%" height="15" fill="rgb(230,137,11)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="319.50">mango_chess::engine::search</text></g><g><title>mango_chess::engine::negamax (42,743 samples, 99.98%)</title><rect x="0.0023%" y="293" width="99.9836%" height="15" fill="rgb(212,28,1)" fg:x="1" fg:w="42743"/><text x="0.2523%" y="303.50">mango_chess::engine::negamax</text></g><g><title>all (42,750 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="42750"/><text x="0.2500%" y="607.50"></text></g><g><title>perf-exec (6 samples, 0.01%)</title><rect x="99.9860%" y="581" width="0.0140%" height="15" fill="rgb(222,171,42)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="565" width="0.0140%" height="15" fill="rgb(243,84,45)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="549" width="0.0140%" height="15" fill="rgb(252,49,23)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="533" width="0.0140%" height="15" fill="rgb(215,19,7)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="517" width="0.0140%" height="15" fill="rgb(238,81,41)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="501" width="0.0140%" height="15" fill="rgb(210,199,37)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="485" width="0.0140%" height="15" fill="rgb(244,192,49)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="469" width="0.0140%" height="15" fill="rgb(226,211,11)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="453" width="0.0140%" height="15" fill="rgb(236,162,54)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="437" width="0.0140%" height="15" fill="rgb(220,229,9)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="421" width="0.0140%" height="15" fill="rgb(250,87,22)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="405" width="0.0140%" height="15" fill="rgb(239,43,17)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9860%" y="389" width="0.0140%" height="15" fill="rgb(231,177,25)" fg:x="42744" fg:w="6"/><text x="100.2360%" y="399.50"></text></g></svg></svg>