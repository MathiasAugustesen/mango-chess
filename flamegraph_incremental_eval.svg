<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="27017"><g><title>mango_chess::board::BoardState::make_move (24 samples, 0.09%)</title><rect x="0.0518%" y="277" width="0.0888%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="24"/><text x="0.3018%" y="287.50"></text></g><g><title>mango_chess::board::BoardState::unmake_move (19 samples, 0.07%)</title><rect x="0.1407%" y="277" width="0.0703%" height="15" fill="rgb(217,0,24)" fg:x="38" fg:w="19"/><text x="0.3907%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7292%" y="261" width="0.0148%" height="15" fill="rgb(221,193,54)" fg:x="197" fg:w="4"/><text x="0.9792%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7292%" y="245" width="0.0148%" height="15" fill="rgb(248,212,6)" fg:x="197" fg:w="4"/><text x="0.9792%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7292%" y="229" width="0.0148%" height="15" fill="rgb(208,68,35)" fg:x="197" fg:w="4"/><text x="0.9792%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7292%" y="213" width="0.0148%" height="15" fill="rgb(232,128,0)" fg:x="197" fg:w="4"/><text x="0.9792%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7292%" y="197" width="0.0148%" height="15" fill="rgb(207,160,47)" fg:x="197" fg:w="4"/><text x="0.9792%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7292%" y="181" width="0.0148%" height="15" fill="rgb(228,23,34)" fg:x="197" fg:w="4"/><text x="0.9792%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="0.7292%" y="165" width="0.0148%" height="15" fill="rgb(218,30,26)" fg:x="197" fg:w="4"/><text x="0.9792%" y="175.50"></text></g><g><title>__GI___libc_free (27 samples, 0.10%)</title><rect x="0.7440%" y="261" width="0.0999%" height="15" fill="rgb(220,122,19)" fg:x="201" fg:w="27"/><text x="0.9940%" y="271.50"></text></g><g><title>_int_free (25 samples, 0.09%)</title><rect x="0.7514%" y="245" width="0.0925%" height="15" fill="rgb(250,228,42)" fg:x="203" fg:w="25"/><text x="1.0014%" y="255.50"></text></g><g><title>mango_chess::board::BoardState::make_move (924 samples, 3.42%)</title><rect x="0.8476%" y="261" width="3.4201%" height="15" fill="rgb(240,193,28)" fg:x="229" fg:w="924"/><text x="1.0976%" y="271.50">man..</text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="4.2344%" y="245" width="0.0333%" height="15" fill="rgb(216,20,37)" fg:x="1144" fg:w="9"/><text x="4.4844%" y="255.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="4.2344%" y="229" width="0.0333%" height="15" fill="rgb(206,188,39)" fg:x="1144" fg:w="9"/><text x="4.4844%" y="239.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="4.2344%" y="213" width="0.0333%" height="15" fill="rgb(217,207,13)" fg:x="1144" fg:w="9"/><text x="4.4844%" y="223.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="4.2381%" y="197" width="0.0296%" height="15" fill="rgb(231,73,38)" fg:x="1145" fg:w="8"/><text x="4.4881%" y="207.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="4.2381%" y="181" width="0.0296%" height="15" fill="rgb(225,20,46)" fg:x="1145" fg:w="8"/><text x="4.4881%" y="191.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="4.2381%" y="165" width="0.0296%" height="15" fill="rgb(210,31,41)" fg:x="1145" fg:w="8"/><text x="4.4881%" y="175.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="4.2381%" y="149" width="0.0296%" height="15" fill="rgb(221,200,47)" fg:x="1145" fg:w="8"/><text x="4.4881%" y="159.50"></text></g><g><title>mango_chess::board::BoardState::unmake_move (520 samples, 1.92%)</title><rect x="4.2677%" y="261" width="1.9247%" height="15" fill="rgb(226,26,5)" fg:x="1153" fg:w="520"/><text x="4.5177%" y="271.50">m..</text></g><g><title>mango_chess::engine::negamax (166 samples, 0.61%)</title><rect x="6.1924%" y="261" width="0.6144%" height="15" fill="rgb(249,33,26)" fg:x="1673" fg:w="166"/><text x="6.4424%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="8.4947%" y="245" width="0.0148%" height="15" fill="rgb(235,183,28)" fg:x="2295" fg:w="4"/><text x="8.7447%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="8.4947%" y="229" width="0.0148%" height="15" fill="rgb(221,5,38)" fg:x="2295" fg:w="4"/><text x="8.7447%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="8.4947%" y="213" width="0.0148%" height="15" fill="rgb(247,18,42)" fg:x="2295" fg:w="4"/><text x="8.7447%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="8.4947%" y="197" width="0.0148%" height="15" fill="rgb(241,131,45)" fg:x="2295" fg:w="4"/><text x="8.7447%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="8.4947%" y="181" width="0.0148%" height="15" fill="rgb(249,31,29)" fg:x="2295" fg:w="4"/><text x="8.7447%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="8.4947%" y="165" width="0.0148%" height="15" fill="rgb(225,111,53)" fg:x="2295" fg:w="4"/><text x="8.7447%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="8.4947%" y="149" width="0.0148%" height="15" fill="rgb(238,160,17)" fg:x="2295" fg:w="4"/><text x="8.7447%" y="159.50"></text></g><g><title>__GI___libc_free (70 samples, 0.26%)</title><rect x="8.5095%" y="245" width="0.2591%" height="15" fill="rgb(214,148,48)" fg:x="2299" fg:w="70"/><text x="8.7595%" y="255.50"></text></g><g><title>_int_free (50 samples, 0.19%)</title><rect x="8.5835%" y="229" width="0.1851%" height="15" fill="rgb(232,36,49)" fg:x="2319" fg:w="50"/><text x="8.8335%" y="239.50"></text></g><g><title>unlink_chunk (11 samples, 0.04%)</title><rect x="8.7278%" y="213" width="0.0407%" height="15" fill="rgb(209,103,24)" fg:x="2358" fg:w="11"/><text x="8.9778%" y="223.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.10%)</title><rect x="8.7686%" y="245" width="0.1036%" height="15" fill="rgb(229,88,8)" fg:x="2369" fg:w="28"/><text x="9.0186%" y="255.50"></text></g><g><title>tcache_get (4 samples, 0.01%)</title><rect x="8.8574%" y="229" width="0.0148%" height="15" fill="rgb(213,181,19)" fg:x="2393" fg:w="4"/><text x="9.1074%" y="239.50"></text></g><g><title>__rdl_alloc (3 samples, 0.01%)</title><rect x="8.8722%" y="245" width="0.0111%" height="15" fill="rgb(254,191,54)" fg:x="2397" fg:w="3"/><text x="9.1222%" y="255.50"></text></g><g><title>__rust_dealloc (12 samples, 0.04%)</title><rect x="8.8907%" y="245" width="0.0444%" height="15" fill="rgb(241,83,37)" fg:x="2402" fg:w="12"/><text x="9.1407%" y="255.50"></text></g><g><title>__GI___libc_malloc (81 samples, 0.30%)</title><rect x="9.2164%" y="213" width="0.2998%" height="15" fill="rgb(233,36,39)" fg:x="2490" fg:w="81"/><text x="9.4664%" y="223.50"></text></g><g><title>_int_malloc (71 samples, 0.26%)</title><rect x="9.2534%" y="197" width="0.2628%" height="15" fill="rgb(226,3,54)" fg:x="2500" fg:w="71"/><text x="9.5034%" y="207.50"></text></g><g><title>unlink_chunk (8 samples, 0.03%)</title><rect x="9.4866%" y="181" width="0.0296%" height="15" fill="rgb(245,192,40)" fg:x="2563" fg:w="8"/><text x="9.7366%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (32 samples, 0.12%)</title><rect x="9.8382%" y="181" width="0.1184%" height="15" fill="rgb(238,167,29)" fg:x="2658" fg:w="32"/><text x="10.0882%" y="191.50"></text></g><g><title>_int_free (41 samples, 0.15%)</title><rect x="9.9567%" y="181" width="0.1518%" height="15" fill="rgb(232,182,51)" fg:x="2690" fg:w="41"/><text x="10.2067%" y="191.50"></text></g><g><title>tcache_put (3 samples, 0.01%)</title><rect x="10.0973%" y="165" width="0.0111%" height="15" fill="rgb(231,60,39)" fg:x="2728" fg:w="3"/><text x="10.3473%" y="175.50"></text></g><g><title>alloc_perturb (4 samples, 0.01%)</title><rect x="10.5082%" y="165" width="0.0148%" height="15" fill="rgb(208,69,12)" fg:x="2839" fg:w="4"/><text x="10.7582%" y="175.50"></text></g><g><title>_int_malloc (132 samples, 0.49%)</title><rect x="10.1085%" y="181" width="0.4886%" height="15" fill="rgb(235,93,37)" fg:x="2731" fg:w="132"/><text x="10.3585%" y="191.50"></text></g><g><title>unlink_chunk (17 samples, 0.06%)</title><rect x="10.5341%" y="165" width="0.0629%" height="15" fill="rgb(213,116,39)" fg:x="2846" fg:w="17"/><text x="10.7841%" y="175.50"></text></g><g><title>_int_realloc (264 samples, 0.98%)</title><rect x="9.6310%" y="197" width="0.9772%" height="15" fill="rgb(222,207,29)" fg:x="2602" fg:w="264"/><text x="9.8810%" y="207.50"></text></g><g><title>unlink_chunk (3 samples, 0.01%)</title><rect x="10.5970%" y="181" width="0.0111%" height="15" fill="rgb(206,96,30)" fg:x="2863" fg:w="3"/><text x="10.8470%" y="191.50"></text></g><g><title>__GI___libc_realloc (299 samples, 1.11%)</title><rect x="9.5162%" y="213" width="1.1067%" height="15" fill="rgb(218,138,4)" fg:x="2571" fg:w="299"/><text x="9.7662%" y="223.50"></text></g><g><title>checked_request2size (4 samples, 0.01%)</title><rect x="10.6081%" y="197" width="0.0148%" height="15" fill="rgb(250,191,14)" fg:x="2866" fg:w="4"/><text x="10.8581%" y="207.50"></text></g><g><title>__rdl_realloc (14 samples, 0.05%)</title><rect x="10.6266%" y="213" width="0.0518%" height="15" fill="rgb(239,60,40)" fg:x="2871" fg:w="14"/><text x="10.8766%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (7 samples, 0.03%)</title><rect x="10.6526%" y="197" width="0.0259%" height="15" fill="rgb(206,27,48)" fg:x="2878" fg:w="7"/><text x="10.9026%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (476 samples, 1.76%)</title><rect x="8.9351%" y="245" width="1.7619%" height="15" fill="rgb(225,35,8)" fg:x="2414" fg:w="476"/><text x="9.1851%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (429 samples, 1.59%)</title><rect x="9.1091%" y="229" width="1.5879%" height="15" fill="rgb(250,213,24)" fg:x="2461" fg:w="429"/><text x="9.3591%" y="239.50"></text></g><g><title>__rust_realloc (4 samples, 0.01%)</title><rect x="10.6822%" y="213" width="0.0148%" height="15" fill="rgb(247,123,22)" fg:x="2886" fg:w="4"/><text x="10.9322%" y="223.50"></text></g><g><title>[unknown] (23 samples, 0.09%)</title><rect x="43.7243%" y="229" width="0.0851%" height="15" fill="rgb(231,138,38)" fg:x="11813" fg:w="23"/><text x="43.9743%" y="239.50"></text></g><g><title>[unknown] (23 samples, 0.09%)</title><rect x="43.7243%" y="213" width="0.0851%" height="15" fill="rgb(231,145,46)" fg:x="11813" fg:w="23"/><text x="43.9743%" y="223.50"></text></g><g><title>[unknown] (23 samples, 0.09%)</title><rect x="43.7243%" y="197" width="0.0851%" height="15" fill="rgb(251,118,11)" fg:x="11813" fg:w="23"/><text x="43.9743%" y="207.50"></text></g><g><title>[unknown] (22 samples, 0.08%)</title><rect x="43.7280%" y="181" width="0.0814%" height="15" fill="rgb(217,147,25)" fg:x="11814" fg:w="22"/><text x="43.9780%" y="191.50"></text></g><g><title>[unknown] (22 samples, 0.08%)</title><rect x="43.7280%" y="165" width="0.0814%" height="15" fill="rgb(247,81,37)" fg:x="11814" fg:w="22"/><text x="43.9780%" y="175.50"></text></g><g><title>[unknown] (22 samples, 0.08%)</title><rect x="43.7280%" y="149" width="0.0814%" height="15" fill="rgb(209,12,38)" fg:x="11814" fg:w="22"/><text x="43.9780%" y="159.50"></text></g><g><title>[unknown] (22 samples, 0.08%)</title><rect x="43.7280%" y="133" width="0.0814%" height="15" fill="rgb(227,1,9)" fg:x="11814" fg:w="22"/><text x="43.9780%" y="143.50"></text></g><g><title>[unknown] (15 samples, 0.06%)</title><rect x="43.7539%" y="117" width="0.0555%" height="15" fill="rgb(248,47,43)" fg:x="11821" fg:w="15"/><text x="44.0039%" y="127.50"></text></g><g><title>[unknown] (15 samples, 0.06%)</title><rect x="43.7539%" y="101" width="0.0555%" height="15" fill="rgb(221,10,30)" fg:x="11821" fg:w="15"/><text x="44.0039%" y="111.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="43.7761%" y="85" width="0.0333%" height="15" fill="rgb(210,229,1)" fg:x="11827" fg:w="9"/><text x="44.0261%" y="95.50"></text></g><g><title>[unknown] (9 samples, 0.03%)</title><rect x="43.7761%" y="69" width="0.0333%" height="15" fill="rgb(222,148,37)" fg:x="11827" fg:w="9"/><text x="44.0261%" y="79.50"></text></g><g><title>[unknown] (8 samples, 0.03%)</title><rect x="43.7798%" y="53" width="0.0296%" height="15" fill="rgb(234,67,33)" fg:x="11828" fg:w="8"/><text x="44.0298%" y="63.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="43.7983%" y="37" width="0.0111%" height="15" fill="rgb(247,98,35)" fg:x="11833" fg:w="3"/><text x="44.0483%" y="47.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="47.8477%" y="197" width="0.0111%" height="15" fill="rgb(247,138,52)" fg:x="12927" fg:w="3"/><text x="48.0977%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="47.8477%" y="181" width="0.0111%" height="15" fill="rgb(213,79,30)" fg:x="12927" fg:w="3"/><text x="48.0977%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="47.8477%" y="165" width="0.0111%" height="15" fill="rgb(246,177,23)" fg:x="12927" fg:w="3"/><text x="48.0977%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="47.8477%" y="149" width="0.0111%" height="15" fill="rgb(230,62,27)" fg:x="12927" fg:w="3"/><text x="48.0977%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="47.8477%" y="133" width="0.0111%" height="15" fill="rgb(216,154,8)" fg:x="12927" fg:w="3"/><text x="48.0977%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="47.8477%" y="117" width="0.0111%" height="15" fill="rgb(244,35,45)" fg:x="12927" fg:w="3"/><text x="48.0977%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="47.8477%" y="101" width="0.0111%" height="15" fill="rgb(251,115,12)" fg:x="12927" fg:w="3"/><text x="48.0977%" y="111.50"></text></g><g><title>free_perturb (16 samples, 0.06%)</title><rect x="47.8588%" y="197" width="0.0592%" height="15" fill="rgb(240,54,50)" fg:x="12930" fg:w="16"/><text x="48.1088%" y="207.50"></text></g><g><title>tcache_put (11 samples, 0.04%)</title><rect x="47.9180%" y="197" width="0.0407%" height="15" fill="rgb(233,84,52)" fg:x="12946" fg:w="11"/><text x="48.1680%" y="207.50"></text></g><g><title>_int_free (1,105 samples, 4.09%)</title><rect x="44.9569%" y="213" width="4.0900%" height="15" fill="rgb(207,117,47)" fg:x="12146" fg:w="1105"/><text x="45.2069%" y="223.50">_int..</text></g><g><title>unlink_chunk (294 samples, 1.09%)</title><rect x="47.9587%" y="197" width="1.0882%" height="15" fill="rgb(249,43,39)" fg:x="12957" fg:w="294"/><text x="48.2087%" y="207.50"></text></g><g><title>__GI___libc_free (1,416 samples, 5.24%)</title><rect x="43.8095%" y="229" width="5.2411%" height="15" fill="rgb(209,38,44)" fg:x="11836" fg:w="1416"/><text x="44.0595%" y="239.50">__GI__..</text></g><g><title>__rdl_dealloc (29 samples, 0.11%)</title><rect x="49.0506%" y="229" width="0.1073%" height="15" fill="rgb(236,212,23)" fg:x="13252" fg:w="29"/><text x="49.3006%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (29 samples, 0.11%)</title><rect x="49.0506%" y="213" width="0.1073%" height="15" fill="rgb(242,79,21)" fg:x="13252" fg:w="29"/><text x="49.3006%" y="223.50"></text></g><g><title>__rust_dealloc (128 samples, 0.47%)</title><rect x="49.1579%" y="229" width="0.4738%" height="15" fill="rgb(211,96,35)" fg:x="13281" fg:w="128"/><text x="49.4079%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="52.6002%" y="213" width="0.0185%" height="15" fill="rgb(253,215,40)" fg:x="14211" fg:w="5"/><text x="52.8502%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="52.6002%" y="197" width="0.0185%" height="15" fill="rgb(211,81,21)" fg:x="14211" fg:w="5"/><text x="52.8502%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="52.6002%" y="181" width="0.0185%" height="15" fill="rgb(208,190,38)" fg:x="14211" fg:w="5"/><text x="52.8502%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="52.6002%" y="165" width="0.0185%" height="15" fill="rgb(235,213,38)" fg:x="14211" fg:w="5"/><text x="52.8502%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="52.6002%" y="149" width="0.0185%" height="15" fill="rgb(237,122,38)" fg:x="14211" fg:w="5"/><text x="52.8502%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="52.6002%" y="133" width="0.0185%" height="15" fill="rgb(244,218,35)" fg:x="14211" fg:w="5"/><text x="52.8502%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="52.6002%" y="117" width="0.0185%" height="15" fill="rgb(240,68,47)" fg:x="14211" fg:w="5"/><text x="52.8502%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="54.9950%" y="197" width="0.0111%" height="15" fill="rgb(210,16,53)" fg:x="14858" fg:w="3"/><text x="55.2450%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="54.9950%" y="181" width="0.0111%" height="15" fill="rgb(235,124,12)" fg:x="14858" fg:w="3"/><text x="55.2450%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="54.9950%" y="165" width="0.0111%" height="15" fill="rgb(224,169,11)" fg:x="14858" fg:w="3"/><text x="55.2450%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="54.9950%" y="149" width="0.0111%" height="15" fill="rgb(250,166,2)" fg:x="14858" fg:w="3"/><text x="55.2450%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="54.9950%" y="133" width="0.0111%" height="15" fill="rgb(242,216,29)" fg:x="14858" fg:w="3"/><text x="55.2450%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="54.9950%" y="117" width="0.0111%" height="15" fill="rgb(230,116,27)" fg:x="14858" fg:w="3"/><text x="55.2450%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="54.9950%" y="101" width="0.0111%" height="15" fill="rgb(228,99,48)" fg:x="14858" fg:w="3"/><text x="55.2450%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="54.9950%" y="85" width="0.0111%" height="15" fill="rgb(253,11,6)" fg:x="14858" fg:w="3"/><text x="55.2450%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="54.9950%" y="69" width="0.0111%" height="15" fill="rgb(247,143,39)" fg:x="14858" fg:w="3"/><text x="55.2450%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="62.0276%" y="165" width="0.0185%" height="15" fill="rgb(236,97,10)" fg:x="16758" fg:w="5"/><text x="62.2776%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="62.0276%" y="149" width="0.0185%" height="15" fill="rgb(233,208,19)" fg:x="16758" fg:w="5"/><text x="62.2776%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="62.0276%" y="133" width="0.0185%" height="15" fill="rgb(216,164,2)" fg:x="16758" fg:w="5"/><text x="62.2776%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="62.0276%" y="117" width="0.0185%" height="15" fill="rgb(220,129,5)" fg:x="16758" fg:w="5"/><text x="62.2776%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="62.0276%" y="101" width="0.0185%" height="15" fill="rgb(242,17,10)" fg:x="16758" fg:w="5"/><text x="62.2776%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="62.0276%" y="85" width="0.0185%" height="15" fill="rgb(242,107,0)" fg:x="16758" fg:w="5"/><text x="62.2776%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="62.0276%" y="69" width="0.0185%" height="15" fill="rgb(251,28,31)" fg:x="16758" fg:w="5"/><text x="62.2776%" y="79.50"></text></g><g><title>checked_request2size (28 samples, 0.10%)</title><rect x="62.0461%" y="165" width="0.1036%" height="15" fill="rgb(233,223,10)" fg:x="16763" fg:w="28"/><text x="62.2961%" y="175.50"></text></g><g><title>tcache_put (20 samples, 0.07%)</title><rect x="62.1498%" y="165" width="0.0740%" height="15" fill="rgb(215,21,27)" fg:x="16791" fg:w="20"/><text x="62.3998%" y="175.50"></text></g><g><title>_int_malloc (1,986 samples, 7.35%)</title><rect x="55.7353%" y="181" width="7.3509%" height="15" fill="rgb(232,23,21)" fg:x="15058" fg:w="1986"/><text x="55.9853%" y="191.50">_int_malloc</text></g><g><title>unlink_chunk (233 samples, 0.86%)</title><rect x="62.2238%" y="165" width="0.8624%" height="15" fill="rgb(244,5,23)" fg:x="16811" fg:w="233"/><text x="62.4738%" y="175.50"></text></g><g><title>arena_for_chunk (4 samples, 0.01%)</title><rect x="63.0862%" y="181" width="0.0148%" height="15" fill="rgb(226,81,46)" fg:x="17044" fg:w="4"/><text x="63.3362%" y="191.50"></text></g><g><title>__GI___libc_malloc (2,212 samples, 8.19%)</title><rect x="55.0061%" y="197" width="8.1874%" height="15" fill="rgb(247,70,30)" fg:x="14861" fg:w="2212"/><text x="55.2561%" y="207.50">__GI___libc..</text></g><g><title>tcache_get (25 samples, 0.09%)</title><rect x="63.1010%" y="181" width="0.0925%" height="15" fill="rgb(212,68,19)" fg:x="17048" fg:w="25"/><text x="63.3510%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (264 samples, 0.98%)</title><rect x="67.7055%" y="165" width="0.9772%" height="15" fill="rgb(240,187,13)" fg:x="18292" fg:w="264"/><text x="67.9555%" y="175.50"></text></g><g><title>__memmove_avx_unaligned (44 samples, 0.16%)</title><rect x="68.6827%" y="165" width="0.1629%" height="15" fill="rgb(223,113,26)" fg:x="18556" fg:w="44"/><text x="68.9327%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="70.8369%" y="149" width="0.0111%" height="15" fill="rgb(206,192,2)" fg:x="19138" fg:w="3"/><text x="71.0869%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="70.8369%" y="133" width="0.0111%" height="15" fill="rgb(241,108,4)" fg:x="19138" fg:w="3"/><text x="71.0869%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="70.8369%" y="117" width="0.0111%" height="15" fill="rgb(247,173,49)" fg:x="19138" fg:w="3"/><text x="71.0869%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="70.8369%" y="101" width="0.0111%" height="15" fill="rgb(224,114,35)" fg:x="19138" fg:w="3"/><text x="71.0869%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="70.8369%" y="85" width="0.0111%" height="15" fill="rgb(245,159,27)" fg:x="19138" fg:w="3"/><text x="71.0869%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="70.8369%" y="69" width="0.0111%" height="15" fill="rgb(245,172,44)" fg:x="19138" fg:w="3"/><text x="71.0869%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="70.8369%" y="53" width="0.0111%" height="15" fill="rgb(236,23,11)" fg:x="19138" fg:w="3"/><text x="71.0869%" y="63.50"></text></g><g><title>_int_free (549 samples, 2.03%)</title><rect x="68.8455%" y="165" width="2.0321%" height="15" fill="rgb(205,117,38)" fg:x="18600" fg:w="549"/><text x="69.0955%" y="175.50">_..</text></g><g><title>free_perturb (8 samples, 0.03%)</title><rect x="70.8480%" y="149" width="0.0296%" height="15" fill="rgb(237,72,25)" fg:x="19141" fg:w="8"/><text x="71.0980%" y="159.50"></text></g><g><title>alloc_perturb (20 samples, 0.07%)</title><rect x="74.1903%" y="149" width="0.0740%" height="15" fill="rgb(244,70,9)" fg:x="20044" fg:w="20"/><text x="74.4403%" y="159.50"></text></g><g><title>checked_request2size (39 samples, 0.14%)</title><rect x="74.2644%" y="149" width="0.1444%" height="15" fill="rgb(217,125,39)" fg:x="20064" fg:w="39"/><text x="74.5144%" y="159.50"></text></g><g><title>_int_malloc (1,227 samples, 4.54%)</title><rect x="70.8776%" y="165" width="4.5416%" height="15" fill="rgb(235,36,10)" fg:x="19149" fg:w="1227"/><text x="71.1276%" y="175.50">_int_..</text></g><g><title>unlink_chunk (273 samples, 1.01%)</title><rect x="74.4087%" y="149" width="1.0105%" height="15" fill="rgb(251,123,47)" fg:x="20103" fg:w="273"/><text x="74.6587%" y="159.50"></text></g><g><title>_int_realloc (3,040 samples, 11.25%)</title><rect x="64.8962%" y="181" width="11.2522%" height="15" fill="rgb(221,13,13)" fg:x="17533" fg:w="3040"/><text x="65.1462%" y="191.50">_int_realloc</text></g><g><title>unlink_chunk (197 samples, 0.73%)</title><rect x="75.4192%" y="165" width="0.7292%" height="15" fill="rgb(238,131,9)" fg:x="20376" fg:w="197"/><text x="75.6692%" y="175.50"></text></g><g><title>arena_for_chunk (4 samples, 0.01%)</title><rect x="76.1484%" y="181" width="0.0148%" height="15" fill="rgb(211,50,8)" fg:x="20573" fg:w="4"/><text x="76.3984%" y="191.50"></text></g><g><title>__GI___libc_realloc (3,540 samples, 13.10%)</title><rect x="63.1935%" y="197" width="13.1029%" height="15" fill="rgb(245,182,24)" fg:x="17073" fg:w="3540"/><text x="63.4435%" y="207.50">__GI___libc_realloc</text></g><g><title>checked_request2size (36 samples, 0.13%)</title><rect x="76.1632%" y="181" width="0.1332%" height="15" fill="rgb(242,14,37)" fg:x="20577" fg:w="36"/><text x="76.4132%" y="191.50"></text></g><g><title>__rdl_alloc (164 samples, 0.61%)</title><rect x="76.2964%" y="197" width="0.6070%" height="15" fill="rgb(246,228,12)" fg:x="20613" fg:w="164"/><text x="76.5464%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (146 samples, 0.54%)</title><rect x="76.3630%" y="181" width="0.5404%" height="15" fill="rgb(213,55,15)" fg:x="20631" fg:w="146"/><text x="76.6130%" y="191.50"></text></g><g><title>__rdl_realloc (426 samples, 1.58%)</title><rect x="76.9034%" y="197" width="1.5768%" height="15" fill="rgb(209,9,3)" fg:x="20777" fg:w="426"/><text x="77.1534%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (299 samples, 1.11%)</title><rect x="77.3735%" y="181" width="1.1067%" height="15" fill="rgb(230,59,30)" fg:x="20904" fg:w="299"/><text x="77.6235%" y="191.50"></text></g><g><title>__rust_alloc (94 samples, 0.35%)</title><rect x="78.4802%" y="197" width="0.3479%" height="15" fill="rgb(209,121,21)" fg:x="21203" fg:w="94"/><text x="78.7302%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8,000 samples, 29.61%)</title><rect x="49.6317%" y="229" width="29.6110%" height="15" fill="rgb(220,109,13)" fg:x="13409" fg:w="8000"/><text x="49.8817%" y="239.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push</text></g><g><title>alloc::raw_vec::finish_grow (7,193 samples, 26.62%)</title><rect x="52.6187%" y="213" width="26.6240%" height="15" fill="rgb(232,18,1)" fg:x="14216" fg:w="7193"/><text x="52.8687%" y="223.50">alloc::raw_vec::finish_grow</text></g><g><title>__rust_realloc (112 samples, 0.41%)</title><rect x="78.8281%" y="197" width="0.4146%" height="15" fill="rgb(215,41,42)" fg:x="21297" fg:w="112"/><text x="79.0781%" y="207.50"></text></g><g><title>__GI___libc_malloc (24 samples, 0.09%)</title><rect x="80.5604%" y="181" width="0.0888%" height="15" fill="rgb(224,123,36)" fg:x="21765" fg:w="24"/><text x="80.8104%" y="191.50"></text></g><g><title>tcache_get (11 samples, 0.04%)</title><rect x="80.6085%" y="165" width="0.0407%" height="15" fill="rgb(240,125,3)" fg:x="21778" fg:w="11"/><text x="80.8585%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (22 samples, 0.08%)</title><rect x="80.9527%" y="149" width="0.0814%" height="15" fill="rgb(205,98,50)" fg:x="21871" fg:w="22"/><text x="81.2027%" y="159.50"></text></g><g><title>__memmove_avx_unaligned (5 samples, 0.02%)</title><rect x="81.0342%" y="149" width="0.0185%" height="15" fill="rgb(205,185,37)" fg:x="21893" fg:w="5"/><text x="81.2842%" y="159.50"></text></g><g><title>_int_free (33 samples, 0.12%)</title><rect x="81.0527%" y="149" width="0.1221%" height="15" fill="rgb(238,207,15)" fg:x="21898" fg:w="33"/><text x="81.3027%" y="159.50"></text></g><g><title>tcache_put (7 samples, 0.03%)</title><rect x="81.1489%" y="133" width="0.0259%" height="15" fill="rgb(213,199,42)" fg:x="21924" fg:w="7"/><text x="81.3989%" y="143.50"></text></g><g><title>checked_request2size (3 samples, 0.01%)</title><rect x="81.6930%" y="133" width="0.0111%" height="15" fill="rgb(235,201,11)" fg:x="22071" fg:w="3"/><text x="81.9430%" y="143.50"></text></g><g><title>_int_malloc (171 samples, 0.63%)</title><rect x="81.1748%" y="149" width="0.6329%" height="15" fill="rgb(207,46,11)" fg:x="21931" fg:w="171"/><text x="81.4248%" y="159.50"></text></g><g><title>unlink_chunk (27 samples, 0.10%)</title><rect x="81.7078%" y="133" width="0.0999%" height="15" fill="rgb(241,35,35)" fg:x="22075" fg:w="27"/><text x="81.9578%" y="143.50"></text></g><g><title>_int_realloc (275 samples, 1.02%)</title><rect x="80.7936%" y="165" width="1.0179%" height="15" fill="rgb(243,32,47)" fg:x="21828" fg:w="275"/><text x="81.0436%" y="175.50"></text></g><g><title>arena_for_chunk (3 samples, 0.01%)</title><rect x="81.8115%" y="165" width="0.0111%" height="15" fill="rgb(247,202,23)" fg:x="22103" fg:w="3"/><text x="82.0615%" y="175.50"></text></g><g><title>__GI___libc_realloc (319 samples, 1.18%)</title><rect x="80.6492%" y="181" width="1.1807%" height="15" fill="rgb(219,102,11)" fg:x="21789" fg:w="319"/><text x="80.8992%" y="191.50"></text></g><g><title>__rdl_alloc (14 samples, 0.05%)</title><rect x="81.8300%" y="181" width="0.0518%" height="15" fill="rgb(243,110,44)" fg:x="22108" fg:w="14"/><text x="82.0800%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.04%)</title><rect x="81.8448%" y="165" width="0.0370%" height="15" fill="rgb(222,74,54)" fg:x="22112" fg:w="10"/><text x="82.0948%" y="175.50"></text></g><g><title>__rdl_realloc (19 samples, 0.07%)</title><rect x="81.8818%" y="181" width="0.0703%" height="15" fill="rgb(216,99,12)" fg:x="22122" fg:w="19"/><text x="82.1318%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (13 samples, 0.05%)</title><rect x="81.9040%" y="165" width="0.0481%" height="15" fill="rgb(226,22,26)" fg:x="22128" fg:w="13"/><text x="82.1540%" y="175.50"></text></g><g><title>__rust_alloc (8 samples, 0.03%)</title><rect x="81.9521%" y="181" width="0.0296%" height="15" fill="rgb(217,163,10)" fg:x="22141" fg:w="8"/><text x="82.2021%" y="191.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (748 samples, 2.77%)</title><rect x="79.2427%" y="229" width="2.7686%" height="15" fill="rgb(213,25,53)" fg:x="21409" fg:w="748"/><text x="79.4927%" y="239.50">ma..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (462 samples, 1.71%)</title><rect x="80.3013%" y="213" width="1.7100%" height="15" fill="rgb(252,105,26)" fg:x="21695" fg:w="462"/><text x="80.5513%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (427 samples, 1.58%)</title><rect x="80.4308%" y="197" width="1.5805%" height="15" fill="rgb(220,39,43)" fg:x="21730" fg:w="427"/><text x="80.6808%" y="207.50"></text></g><g><title>__rust_realloc (8 samples, 0.03%)</title><rect x="81.9817%" y="181" width="0.0296%" height="15" fill="rgb(229,68,48)" fg:x="22149" fg:w="8"/><text x="82.2317%" y="191.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.02%)</title><rect x="82.2223%" y="181" width="0.0222%" height="15" fill="rgb(252,8,32)" fg:x="22214" fg:w="6"/><text x="82.4723%" y="191.50"></text></g><g><title>_int_realloc (6 samples, 0.02%)</title><rect x="82.2223%" y="165" width="0.0222%" height="15" fill="rgb(223,20,43)" fg:x="22214" fg:w="6"/><text x="82.4723%" y="175.50"></text></g><g><title>_int_malloc (4 samples, 0.01%)</title><rect x="82.2297%" y="149" width="0.0148%" height="15" fill="rgb(229,81,49)" fg:x="22216" fg:w="4"/><text x="82.4797%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (11 samples, 0.04%)</title><rect x="82.2075%" y="213" width="0.0407%" height="15" fill="rgb(236,28,36)" fg:x="22210" fg:w="11"/><text x="82.4575%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.03%)</title><rect x="82.2149%" y="197" width="0.0333%" height="15" fill="rgb(249,185,26)" fg:x="22212" fg:w="9"/><text x="82.4649%" y="207.50"></text></g><g><title>__GI___libc_malloc (36 samples, 0.13%)</title><rect x="83.4660%" y="165" width="0.1332%" height="15" fill="rgb(249,174,33)" fg:x="22550" fg:w="36"/><text x="83.7160%" y="175.50"></text></g><g><title>tcache_get (13 samples, 0.05%)</title><rect x="83.5511%" y="149" width="0.0481%" height="15" fill="rgb(233,201,37)" fg:x="22573" fg:w="13"/><text x="83.8011%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (11 samples, 0.04%)</title><rect x="83.7806%" y="133" width="0.0407%" height="15" fill="rgb(221,78,26)" fg:x="22635" fg:w="11"/><text x="84.0306%" y="143.50"></text></g><g><title>_int_free (16 samples, 0.06%)</title><rect x="83.8287%" y="133" width="0.0592%" height="15" fill="rgb(250,127,30)" fg:x="22648" fg:w="16"/><text x="84.0787%" y="143.50"></text></g><g><title>tcache_put (3 samples, 0.01%)</title><rect x="84.3395%" y="117" width="0.0111%" height="15" fill="rgb(230,49,44)" fg:x="22786" fg:w="3"/><text x="84.5895%" y="127.50"></text></g><g><title>_int_malloc (147 samples, 0.54%)</title><rect x="83.8879%" y="133" width="0.5441%" height="15" fill="rgb(229,67,23)" fg:x="22664" fg:w="147"/><text x="84.1379%" y="143.50"></text></g><g><title>unlink_chunk (22 samples, 0.08%)</title><rect x="84.3506%" y="117" width="0.0814%" height="15" fill="rgb(249,83,47)" fg:x="22789" fg:w="22"/><text x="84.6006%" y="127.50"></text></g><g><title>_int_realloc (208 samples, 0.77%)</title><rect x="83.6732%" y="149" width="0.7699%" height="15" fill="rgb(215,43,3)" fg:x="22606" fg:w="208"/><text x="83.9232%" y="159.50"></text></g><g><title>unlink_chunk (3 samples, 0.01%)</title><rect x="84.4320%" y="133" width="0.0111%" height="15" fill="rgb(238,154,13)" fg:x="22811" fg:w="3"/><text x="84.6820%" y="143.50"></text></g><g><title>__GI___libc_realloc (231 samples, 0.86%)</title><rect x="83.5992%" y="165" width="0.8550%" height="15" fill="rgb(219,56,2)" fg:x="22586" fg:w="231"/><text x="83.8492%" y="175.50"></text></g><g><title>arena_for_chunk (3 samples, 0.01%)</title><rect x="84.4431%" y="149" width="0.0111%" height="15" fill="rgb(233,0,4)" fg:x="22814" fg:w="3"/><text x="84.6931%" y="159.50"></text></g><g><title>__rdl_alloc (15 samples, 0.06%)</title><rect x="84.4542%" y="165" width="0.0555%" height="15" fill="rgb(235,30,7)" fg:x="22817" fg:w="15"/><text x="84.7042%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.05%)</title><rect x="84.4616%" y="149" width="0.0481%" height="15" fill="rgb(250,79,13)" fg:x="22819" fg:w="13"/><text x="84.7116%" y="159.50"></text></g><g><title>__rdl_realloc (17 samples, 0.06%)</title><rect x="84.5098%" y="165" width="0.0629%" height="15" fill="rgb(211,146,34)" fg:x="22832" fg:w="17"/><text x="84.7598%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (10 samples, 0.04%)</title><rect x="84.5357%" y="149" width="0.0370%" height="15" fill="rgb(228,22,38)" fg:x="22839" fg:w="10"/><text x="84.7857%" y="159.50"></text></g><g><title>__rust_alloc (9 samples, 0.03%)</title><rect x="84.5727%" y="165" width="0.0333%" height="15" fill="rgb(235,168,5)" fg:x="22849" fg:w="9"/><text x="84.8227%" y="175.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (710 samples, 2.63%)</title><rect x="82.0113%" y="229" width="2.6280%" height="15" fill="rgb(221,155,16)" fg:x="22157" fg:w="710"/><text x="82.2613%" y="239.50">ma..</text></g><g><title>mango_chess::move_generation::bishop_moves (646 samples, 2.39%)</title><rect x="82.2482%" y="213" width="2.3911%" height="15" fill="rgb(215,215,53)" fg:x="22221" fg:w="646"/><text x="82.4982%" y="223.50">ma..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (374 samples, 1.38%)</title><rect x="83.2550%" y="197" width="1.3843%" height="15" fill="rgb(223,4,10)" fg:x="22493" fg:w="374"/><text x="83.5050%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (344 samples, 1.27%)</title><rect x="83.3660%" y="181" width="1.2733%" height="15" fill="rgb(234,103,6)" fg:x="22523" fg:w="344"/><text x="83.6160%" y="191.50"></text></g><g><title>__rust_realloc (9 samples, 0.03%)</title><rect x="84.6060%" y="165" width="0.0333%" height="15" fill="rgb(227,97,0)" fg:x="22858" fg:w="9"/><text x="84.8560%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="85.6276%" y="213" width="0.0111%" height="15" fill="rgb(234,150,53)" fg:x="23134" fg:w="3"/><text x="85.8776%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="85.6276%" y="197" width="0.0111%" height="15" fill="rgb(228,201,54)" fg:x="23134" fg:w="3"/><text x="85.8776%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="85.6276%" y="181" width="0.0111%" height="15" fill="rgb(222,22,37)" fg:x="23134" fg:w="3"/><text x="85.8776%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="85.6276%" y="165" width="0.0111%" height="15" fill="rgb(237,53,32)" fg:x="23134" fg:w="3"/><text x="85.8776%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="85.6276%" y="149" width="0.0111%" height="15" fill="rgb(233,25,53)" fg:x="23134" fg:w="3"/><text x="85.8776%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="85.6276%" y="133" width="0.0111%" height="15" fill="rgb(210,40,34)" fg:x="23134" fg:w="3"/><text x="85.8776%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="85.6276%" y="117" width="0.0111%" height="15" fill="rgb(241,220,44)" fg:x="23134" fg:w="3"/><text x="85.8776%" y="127.50"></text></g><g><title>__memcpy_avx_unaligned_erms (15 samples, 0.06%)</title><rect x="86.0384%" y="149" width="0.0555%" height="15" fill="rgb(235,28,35)" fg:x="23245" fg:w="15"/><text x="86.2884%" y="159.50"></text></g><g><title>_int_free (19 samples, 0.07%)</title><rect x="86.0939%" y="149" width="0.0703%" height="15" fill="rgb(210,56,17)" fg:x="23260" fg:w="19"/><text x="86.3439%" y="159.50"></text></g><g><title>tcache_put (4 samples, 0.01%)</title><rect x="86.1495%" y="133" width="0.0148%" height="15" fill="rgb(224,130,29)" fg:x="23275" fg:w="4"/><text x="86.3995%" y="143.50"></text></g><g><title>_int_malloc (67 samples, 0.25%)</title><rect x="86.1643%" y="149" width="0.2480%" height="15" fill="rgb(235,212,8)" fg:x="23279" fg:w="67"/><text x="86.4143%" y="159.50"></text></g><g><title>unlink_chunk (12 samples, 0.04%)</title><rect x="86.3678%" y="133" width="0.0444%" height="15" fill="rgb(223,33,50)" fg:x="23334" fg:w="12"/><text x="86.6178%" y="143.50"></text></g><g><title>_int_realloc (146 samples, 0.54%)</title><rect x="85.9311%" y="165" width="0.5404%" height="15" fill="rgb(219,149,13)" fg:x="23216" fg:w="146"/><text x="86.1811%" y="175.50"></text></g><g><title>unlink_chunk (16 samples, 0.06%)</title><rect x="86.4123%" y="149" width="0.0592%" height="15" fill="rgb(250,156,29)" fg:x="23346" fg:w="16"/><text x="86.6623%" y="159.50"></text></g><g><title>__GI___libc_realloc (175 samples, 0.65%)</title><rect x="85.8274%" y="181" width="0.6477%" height="15" fill="rgb(216,193,19)" fg:x="23188" fg:w="175"/><text x="86.0774%" y="191.50"></text></g><g><title>__rdl_realloc (23 samples, 0.09%)</title><rect x="86.4789%" y="181" width="0.0851%" height="15" fill="rgb(216,135,14)" fg:x="23364" fg:w="23"/><text x="86.7289%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (13 samples, 0.05%)</title><rect x="86.5159%" y="165" width="0.0481%" height="15" fill="rgb(241,47,5)" fg:x="23374" fg:w="13"/><text x="86.7659%" y="175.50"></text></g><g><title>mango_chess::board::BoardState::is_valid_move (20,507 samples, 75.90%)</title><rect x="10.6970%" y="245" width="75.9041%" height="15" fill="rgb(233,42,35)" fg:x="2890" fg:w="20507"/><text x="10.9470%" y="255.50">mango_chess::board::BoardState::is_valid_move</text></g><g><title>mango_chess::move_generation::rook_moves (530 samples, 1.96%)</title><rect x="84.6393%" y="229" width="1.9617%" height="15" fill="rgb(231,13,6)" fg:x="22867" fg:w="530"/><text x="84.8893%" y="239.50">m..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (260 samples, 0.96%)</title><rect x="85.6387%" y="213" width="0.9624%" height="15" fill="rgb(207,181,40)" fg:x="23137" fg:w="260"/><text x="85.8887%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (227 samples, 0.84%)</title><rect x="85.7608%" y="197" width="0.8402%" height="15" fill="rgb(254,173,49)" fg:x="23170" fg:w="227"/><text x="86.0108%" y="207.50"></text></g><g><title>__rust_realloc (9 samples, 0.03%)</title><rect x="86.5677%" y="181" width="0.0333%" height="15" fill="rgb(221,1,38)" fg:x="23388" fg:w="9"/><text x="86.8177%" y="191.50"></text></g><g><title>mango_chess::board::BoardState::make_move (1,008 samples, 3.73%)</title><rect x="86.6010%" y="245" width="3.7310%" height="15" fill="rgb(206,124,46)" fg:x="23397" fg:w="1008"/><text x="86.8510%" y="255.50">mang..</text></g><g><title>mango_chess::board::BoardState::unmake_move (610 samples, 2.26%)</title><rect x="90.3320%" y="245" width="2.2578%" height="15" fill="rgb(249,21,11)" fg:x="24405" fg:w="610"/><text x="90.5820%" y="255.50">m..</text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="92.5787%" y="229" width="0.0111%" height="15" fill="rgb(222,201,40)" fg:x="25012" fg:w="3"/><text x="92.8287%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="92.5787%" y="213" width="0.0111%" height="15" fill="rgb(235,61,29)" fg:x="25012" fg:w="3"/><text x="92.8287%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="92.5787%" y="197" width="0.0111%" height="15" fill="rgb(219,207,3)" fg:x="25012" fg:w="3"/><text x="92.8287%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="92.5787%" y="181" width="0.0111%" height="15" fill="rgb(222,56,46)" fg:x="25012" fg:w="3"/><text x="92.8287%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="92.5787%" y="165" width="0.0111%" height="15" fill="rgb(239,76,54)" fg:x="25012" fg:w="3"/><text x="92.8287%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="92.5787%" y="149" width="0.0111%" height="15" fill="rgb(231,124,27)" fg:x="25012" fg:w="3"/><text x="92.8287%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.01%)</title><rect x="92.5787%" y="133" width="0.0111%" height="15" fill="rgb(249,195,6)" fg:x="25012" fg:w="3"/><text x="92.8287%" y="143.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.03%)</title><rect x="92.9304%" y="165" width="0.0296%" height="15" fill="rgb(237,174,47)" fg:x="25107" fg:w="8"/><text x="93.1804%" y="175.50"></text></g><g><title>_int_free (5 samples, 0.02%)</title><rect x="92.9600%" y="165" width="0.0185%" height="15" fill="rgb(206,201,31)" fg:x="25115" fg:w="5"/><text x="93.2100%" y="175.50"></text></g><g><title>__GI___libc_realloc (23 samples, 0.09%)</title><rect x="92.9267%" y="197" width="0.0851%" height="15" fill="rgb(231,57,52)" fg:x="25106" fg:w="23"/><text x="93.1767%" y="207.50"></text></g><g><title>_int_realloc (23 samples, 0.09%)</title><rect x="92.9267%" y="181" width="0.0851%" height="15" fill="rgb(248,177,22)" fg:x="25106" fg:w="23"/><text x="93.1767%" y="191.50"></text></g><g><title>_int_malloc (9 samples, 0.03%)</title><rect x="92.9785%" y="165" width="0.0333%" height="15" fill="rgb(215,211,37)" fg:x="25120" fg:w="9"/><text x="93.2285%" y="175.50"></text></g><g><title>unlink_chunk (5 samples, 0.02%)</title><rect x="92.9933%" y="149" width="0.0185%" height="15" fill="rgb(241,128,51)" fg:x="25124" fg:w="5"/><text x="93.2433%" y="159.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (116 samples, 0.43%)</title><rect x="92.5899%" y="245" width="0.4294%" height="15" fill="rgb(227,165,31)" fg:x="25015" fg:w="116"/><text x="92.8399%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (29 samples, 0.11%)</title><rect x="92.9119%" y="229" width="0.1073%" height="15" fill="rgb(228,167,24)" fg:x="25102" fg:w="29"/><text x="93.1619%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (25 samples, 0.09%)</title><rect x="92.9267%" y="213" width="0.0925%" height="15" fill="rgb(228,143,12)" fg:x="25106" fg:w="25"/><text x="93.1767%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (21 samples, 0.08%)</title><rect x="94.0371%" y="165" width="0.0777%" height="15" fill="rgb(249,149,8)" fg:x="25406" fg:w="21"/><text x="94.2871%" y="175.50"></text></g><g><title>_int_free (10 samples, 0.04%)</title><rect x="94.1222%" y="165" width="0.0370%" height="15" fill="rgb(243,35,44)" fg:x="25429" fg:w="10"/><text x="94.3722%" y="175.50"></text></g><g><title>_int_realloc (113 samples, 0.42%)</title><rect x="93.9816%" y="181" width="0.4183%" height="15" fill="rgb(246,89,9)" fg:x="25391" fg:w="113"/><text x="94.2316%" y="191.50"></text></g><g><title>_int_malloc (65 samples, 0.24%)</title><rect x="94.1592%" y="165" width="0.2406%" height="15" fill="rgb(233,213,13)" fg:x="25439" fg:w="65"/><text x="94.4092%" y="175.50"></text></g><g><title>unlink_chunk (20 samples, 0.07%)</title><rect x="94.3258%" y="149" width="0.0740%" height="15" fill="rgb(233,141,41)" fg:x="25484" fg:w="20"/><text x="94.5758%" y="159.50"></text></g><g><title>__GI___libc_realloc (128 samples, 0.47%)</title><rect x="93.9372%" y="197" width="0.4738%" height="15" fill="rgb(239,167,4)" fg:x="25379" fg:w="128"/><text x="94.1872%" y="207.50"></text></g><g><title>__rdl_realloc (6 samples, 0.02%)</title><rect x="94.4109%" y="197" width="0.0222%" height="15" fill="rgb(209,217,16)" fg:x="25507" fg:w="6"/><text x="94.6609%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.01%)</title><rect x="94.4183%" y="181" width="0.0148%" height="15" fill="rgb(219,88,35)" fg:x="25509" fg:w="4"/><text x="94.6683%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (149 samples, 0.55%)</title><rect x="93.8890%" y="229" width="0.5515%" height="15" fill="rgb(220,193,23)" fg:x="25366" fg:w="149"/><text x="94.1390%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (144 samples, 0.53%)</title><rect x="93.9075%" y="213" width="0.5330%" height="15" fill="rgb(230,90,52)" fg:x="25371" fg:w="144"/><text x="94.1575%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.02%)</title><rect x="94.6515%" y="149" width="0.0185%" height="15" fill="rgb(252,106,19)" fg:x="25572" fg:w="5"/><text x="94.9015%" y="159.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (452 samples, 1.67%)</title><rect x="93.0192%" y="245" width="1.6730%" height="15" fill="rgb(206,74,20)" fg:x="25131" fg:w="452"/><text x="93.2692%" y="255.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (68 samples, 0.25%)</title><rect x="94.4405%" y="229" width="0.2517%" height="15" fill="rgb(230,138,44)" fg:x="25515" fg:w="68"/><text x="94.6905%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.04%)</title><rect x="94.6478%" y="213" width="0.0444%" height="15" fill="rgb(235,182,43)" fg:x="25571" fg:w="12"/><text x="94.8978%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.04%)</title><rect x="94.6478%" y="197" width="0.0444%" height="15" fill="rgb(242,16,51)" fg:x="25571" fg:w="12"/><text x="94.8978%" y="207.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.04%)</title><rect x="94.6478%" y="181" width="0.0444%" height="15" fill="rgb(248,9,4)" fg:x="25571" fg:w="12"/><text x="94.8978%" y="191.50"></text></g><g><title>_int_realloc (12 samples, 0.04%)</title><rect x="94.6478%" y="165" width="0.0444%" height="15" fill="rgb(210,31,22)" fg:x="25571" fg:w="12"/><text x="94.8978%" y="175.50"></text></g><g><title>_int_malloc (4 samples, 0.01%)</title><rect x="94.6774%" y="149" width="0.0148%" height="15" fill="rgb(239,54,39)" fg:x="25579" fg:w="4"/><text x="94.9274%" y="159.50"></text></g><g><title>_int_free (4 samples, 0.01%)</title><rect x="95.1845%" y="165" width="0.0148%" height="15" fill="rgb(230,99,41)" fg:x="25716" fg:w="4"/><text x="95.4345%" y="175.50"></text></g><g><title>__GI___libc_realloc (27 samples, 0.10%)</title><rect x="95.1623%" y="197" width="0.0999%" height="15" fill="rgb(253,106,12)" fg:x="25710" fg:w="27"/><text x="95.4123%" y="207.50"></text></g><g><title>_int_realloc (26 samples, 0.10%)</title><rect x="95.1660%" y="181" width="0.0962%" height="15" fill="rgb(213,46,41)" fg:x="25711" fg:w="26"/><text x="95.4160%" y="191.50"></text></g><g><title>_int_malloc (17 samples, 0.06%)</title><rect x="95.1993%" y="165" width="0.0629%" height="15" fill="rgb(215,133,35)" fg:x="25720" fg:w="17"/><text x="95.4493%" y="175.50"></text></g><g><title>unlink_chunk (8 samples, 0.03%)</title><rect x="95.2326%" y="149" width="0.0296%" height="15" fill="rgb(213,28,5)" fg:x="25729" fg:w="8"/><text x="95.4826%" y="159.50"></text></g><g><title>mango_chess::engine::negamax (25,684 samples, 95.07%)</title><rect x="0.2110%" y="277" width="95.0661%" height="15" fill="rgb(215,77,49)" fg:x="57" fg:w="25684"/><text x="0.4610%" y="287.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_moves (23,902 samples, 88.47%)</title><rect x="6.8068%" y="261" width="88.4702%" height="15" fill="rgb(248,100,22)" fg:x="1839" fg:w="23902"/><text x="7.0568%" y="271.50">mango_chess::move_generation::generate_moves</text></g><g><title>mango_chess::move_generation::rook_moves (158 samples, 0.58%)</title><rect x="94.6922%" y="245" width="0.5848%" height="15" fill="rgb(208,67,9)" fg:x="25583" fg:w="158"/><text x="94.9422%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (34 samples, 0.13%)</title><rect x="95.1512%" y="229" width="0.1258%" height="15" fill="rgb(219,133,21)" fg:x="25707" fg:w="34"/><text x="95.4012%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (33 samples, 0.12%)</title><rect x="95.1549%" y="213" width="0.1221%" height="15" fill="rgb(246,46,29)" fg:x="25708" fg:w="33"/><text x="95.4049%" y="223.50"></text></g><g><title>__rdl_realloc (4 samples, 0.01%)</title><rect x="95.2622%" y="197" width="0.0148%" height="15" fill="rgb(246,185,52)" fg:x="25737" fg:w="4"/><text x="95.5122%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.01%)</title><rect x="95.2659%" y="181" width="0.0111%" height="15" fill="rgb(252,136,11)" fg:x="25738" fg:w="3"/><text x="95.5159%" y="191.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.03%)</title><rect x="95.4103%" y="229" width="0.0259%" height="15" fill="rgb(219,138,53)" fg:x="25777" fg:w="7"/><text x="95.6603%" y="239.50"></text></g><g><title>_int_malloc (6 samples, 0.02%)</title><rect x="95.4140%" y="213" width="0.0222%" height="15" fill="rgb(211,51,23)" fg:x="25778" fg:w="6"/><text x="95.6640%" y="223.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.04%)</title><rect x="95.4362%" y="229" width="0.0407%" height="15" fill="rgb(247,221,28)" fg:x="25784" fg:w="11"/><text x="95.6862%" y="239.50"></text></g><g><title>_int_realloc (10 samples, 0.04%)</title><rect x="95.4399%" y="213" width="0.0370%" height="15" fill="rgb(251,222,45)" fg:x="25785" fg:w="10"/><text x="95.6899%" y="223.50"></text></g><g><title>_int_malloc (4 samples, 0.01%)</title><rect x="95.4621%" y="197" width="0.0148%" height="15" fill="rgb(217,162,53)" fg:x="25791" fg:w="4"/><text x="95.7121%" y="207.50"></text></g><g><title>__rdl_realloc (3 samples, 0.01%)</title><rect x="95.4806%" y="229" width="0.0111%" height="15" fill="rgb(229,93,14)" fg:x="25796" fg:w="3"/><text x="95.7306%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.01%)</title><rect x="95.4806%" y="213" width="0.0111%" height="15" fill="rgb(209,67,49)" fg:x="25796" fg:w="3"/><text x="95.7306%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.11%)</title><rect x="95.3807%" y="261" width="0.1147%" height="15" fill="rgb(213,87,29)" fg:x="25769" fg:w="31"/><text x="95.6307%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (28 samples, 0.10%)</title><rect x="95.3918%" y="245" width="0.1036%" height="15" fill="rgb(205,151,52)" fg:x="25772" fg:w="28"/><text x="95.6418%" y="255.50"></text></g><g><title>__GI___libc_free (70 samples, 0.26%)</title><rect x="97.1129%" y="245" width="0.2591%" height="15" fill="rgb(253,215,39)" fg:x="26237" fg:w="70"/><text x="97.3629%" y="255.50"></text></g><g><title>_int_free (42 samples, 0.16%)</title><rect x="97.2166%" y="229" width="0.1555%" height="15" fill="rgb(221,220,41)" fg:x="26265" fg:w="42"/><text x="97.4666%" y="239.50"></text></g><g><title>unlink_chunk (10 samples, 0.04%)</title><rect x="97.3350%" y="213" width="0.0370%" height="15" fill="rgb(218,133,21)" fg:x="26297" fg:w="10"/><text x="97.5850%" y="223.50"></text></g><g><title>__rust_dealloc (3 samples, 0.01%)</title><rect x="97.3757%" y="245" width="0.0111%" height="15" fill="rgb(221,193,43)" fg:x="26308" fg:w="3"/><text x="97.6257%" y="255.50"></text></g><g><title>_int_malloc (82 samples, 0.30%)</title><rect x="97.6681%" y="197" width="0.3035%" height="15" fill="rgb(240,128,52)" fg:x="26387" fg:w="82"/><text x="97.9181%" y="207.50"></text></g><g><title>unlink_chunk (8 samples, 0.03%)</title><rect x="97.9420%" y="181" width="0.0296%" height="15" fill="rgb(253,114,12)" fg:x="26461" fg:w="8"/><text x="98.1920%" y="191.50"></text></g><g><title>__GI___libc_malloc (97 samples, 0.36%)</title><rect x="97.6237%" y="213" width="0.3590%" height="15" fill="rgb(215,223,47)" fg:x="26375" fg:w="97"/><text x="97.8737%" y="223.50"></text></g><g><title>tcache_get (3 samples, 0.01%)</title><rect x="97.9716%" y="197" width="0.0111%" height="15" fill="rgb(248,225,23)" fg:x="26469" fg:w="3"/><text x="98.2216%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.02%)</title><rect x="98.2418%" y="181" width="0.0185%" height="15" fill="rgb(250,108,0)" fg:x="26542" fg:w="5"/><text x="98.4918%" y="191.50"></text></g><g><title>_int_free (30 samples, 0.11%)</title><rect x="98.2604%" y="181" width="0.1110%" height="15" fill="rgb(228,208,7)" fg:x="26547" fg:w="30"/><text x="98.5104%" y="191.50"></text></g><g><title>_int_malloc (64 samples, 0.24%)</title><rect x="98.3714%" y="181" width="0.2369%" height="15" fill="rgb(244,45,10)" fg:x="26577" fg:w="64"/><text x="98.6214%" y="191.50"></text></g><g><title>unlink_chunk (9 samples, 0.03%)</title><rect x="98.5750%" y="165" width="0.0333%" height="15" fill="rgb(207,125,25)" fg:x="26632" fg:w="9"/><text x="98.8250%" y="175.50"></text></g><g><title>_int_realloc (150 samples, 0.56%)</title><rect x="98.0901%" y="197" width="0.5552%" height="15" fill="rgb(210,195,18)" fg:x="26501" fg:w="150"/><text x="98.3401%" y="207.50"></text></g><g><title>unlink_chunk (10 samples, 0.04%)</title><rect x="98.6083%" y="181" width="0.0370%" height="15" fill="rgb(249,80,12)" fg:x="26641" fg:w="10"/><text x="98.8583%" y="191.50"></text></g><g><title>__GI___libc_realloc (180 samples, 0.67%)</title><rect x="97.9828%" y="213" width="0.6662%" height="15" fill="rgb(221,65,9)" fg:x="26472" fg:w="180"/><text x="98.2328%" y="223.50"></text></g><g><title>__rdl_alloc (8 samples, 0.03%)</title><rect x="98.6490%" y="213" width="0.0296%" height="15" fill="rgb(235,49,36)" fg:x="26652" fg:w="8"/><text x="98.8990%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.03%)</title><rect x="98.6527%" y="197" width="0.0259%" height="15" fill="rgb(225,32,20)" fg:x="26653" fg:w="7"/><text x="98.9027%" y="207.50"></text></g><g><title>__rdl_realloc (21 samples, 0.08%)</title><rect x="98.6786%" y="213" width="0.0777%" height="15" fill="rgb(215,141,46)" fg:x="26660" fg:w="21"/><text x="98.9286%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (16 samples, 0.06%)</title><rect x="98.6971%" y="197" width="0.0592%" height="15" fill="rgb(250,160,47)" fg:x="26665" fg:w="16"/><text x="98.9471%" y="207.50"></text></g><g><title>__rust_alloc (6 samples, 0.02%)</title><rect x="98.7563%" y="213" width="0.0222%" height="15" fill="rgb(216,222,40)" fg:x="26681" fg:w="6"/><text x="99.0063%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (380 samples, 1.41%)</title><rect x="97.3868%" y="245" width="1.4065%" height="15" fill="rgb(234,217,39)" fg:x="26311" fg:w="380"/><text x="97.6368%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (345 samples, 1.28%)</title><rect x="97.5164%" y="229" width="1.2770%" height="15" fill="rgb(207,178,40)" fg:x="26346" fg:w="345"/><text x="97.7664%" y="239.50"></text></g><g><title>__rust_realloc (4 samples, 0.01%)</title><rect x="98.7785%" y="213" width="0.0148%" height="15" fill="rgb(221,136,13)" fg:x="26687" fg:w="4"/><text x="99.0285%" y="223.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.01%)</title><rect x="98.8711%" y="197" width="0.0111%" height="15" fill="rgb(249,199,10)" fg:x="26712" fg:w="3"/><text x="99.1211%" y="207.50"></text></g><g><title>__GI___libc_realloc (20 samples, 0.07%)</title><rect x="98.8822%" y="197" width="0.0740%" height="15" fill="rgb(249,222,13)" fg:x="26715" fg:w="20"/><text x="99.1322%" y="207.50"></text></g><g><title>_int_realloc (15 samples, 0.06%)</title><rect x="98.9007%" y="181" width="0.0555%" height="15" fill="rgb(244,185,38)" fg:x="26720" fg:w="15"/><text x="99.1507%" y="191.50"></text></g><g><title>_int_malloc (10 samples, 0.04%)</title><rect x="98.9192%" y="165" width="0.0370%" height="15" fill="rgb(236,202,9)" fg:x="26725" fg:w="10"/><text x="99.1692%" y="175.50"></text></g><g><title>unlink_chunk (3 samples, 0.01%)</title><rect x="98.9451%" y="149" width="0.0111%" height="15" fill="rgb(250,229,37)" fg:x="26732" fg:w="3"/><text x="99.1951%" y="159.50"></text></g><g><title>__rdl_realloc (3 samples, 0.01%)</title><rect x="98.9599%" y="197" width="0.0111%" height="15" fill="rgb(206,174,23)" fg:x="26736" fg:w="3"/><text x="99.2099%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.01%)</title><rect x="98.9599%" y="181" width="0.0111%" height="15" fill="rgb(211,33,43)" fg:x="26736" fg:w="3"/><text x="99.2099%" y="191.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (49 samples, 0.18%)</title><rect x="98.7934%" y="245" width="0.1814%" height="15" fill="rgb(245,58,50)" fg:x="26691" fg:w="49"/><text x="99.0434%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (34 samples, 0.13%)</title><rect x="98.8489%" y="229" width="0.1258%" height="15" fill="rgb(244,68,36)" fg:x="26706" fg:w="34"/><text x="99.0989%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (29 samples, 0.11%)</title><rect x="98.8674%" y="213" width="0.1073%" height="15" fill="rgb(232,229,15)" fg:x="26711" fg:w="29"/><text x="99.1174%" y="223.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.02%)</title><rect x="99.1376%" y="181" width="0.0222%" height="15" fill="rgb(254,30,23)" fg:x="26784" fg:w="6"/><text x="99.3876%" y="191.50"></text></g><g><title>__GI___libc_realloc (17 samples, 0.06%)</title><rect x="99.1598%" y="181" width="0.0629%" height="15" fill="rgb(235,160,14)" fg:x="26790" fg:w="17"/><text x="99.4098%" y="191.50"></text></g><g><title>_int_realloc (15 samples, 0.06%)</title><rect x="99.1672%" y="165" width="0.0555%" height="15" fill="rgb(212,155,44)" fg:x="26792" fg:w="15"/><text x="99.4172%" y="175.50"></text></g><g><title>_int_malloc (11 samples, 0.04%)</title><rect x="99.1820%" y="149" width="0.0407%" height="15" fill="rgb(226,2,50)" fg:x="26796" fg:w="11"/><text x="99.4320%" y="159.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (71 samples, 0.26%)</title><rect x="98.9747%" y="245" width="0.2628%" height="15" fill="rgb(234,177,6)" fg:x="26740" fg:w="71"/><text x="99.2247%" y="255.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (63 samples, 0.23%)</title><rect x="99.0043%" y="229" width="0.2332%" height="15" fill="rgb(217,24,9)" fg:x="26748" fg:w="63"/><text x="99.2543%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.11%)</title><rect x="99.1228%" y="213" width="0.1147%" height="15" fill="rgb(220,13,46)" fg:x="26780" fg:w="31"/><text x="99.3728%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (29 samples, 0.11%)</title><rect x="99.1302%" y="197" width="0.1073%" height="15" fill="rgb(239,221,27)" fg:x="26782" fg:w="29"/><text x="99.3802%" y="207.50"></text></g><g><title>_int_malloc (4 samples, 0.01%)</title><rect x="99.3597%" y="165" width="0.0148%" height="15" fill="rgb(222,198,25)" fg:x="26844" fg:w="4"/><text x="99.6097%" y="175.50"></text></g><g><title>_int_realloc (10 samples, 0.04%)</title><rect x="99.3412%" y="181" width="0.0370%" height="15" fill="rgb(211,99,13)" fg:x="26839" fg:w="10"/><text x="99.5912%" y="191.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.04%)</title><rect x="99.3412%" y="197" width="0.0407%" height="15" fill="rgb(232,111,31)" fg:x="26839" fg:w="11"/><text x="99.5912%" y="207.50"></text></g><g><title>mango_chess::board::BoardState::is_valid_move (1,051 samples, 3.89%)</title><rect x="95.4954%" y="261" width="3.8901%" height="15" fill="rgb(245,82,37)" fg:x="25800" fg:w="1051"/><text x="95.7454%" y="271.50">mang..</text></g><g><title>mango_chess::move_generation::rook_moves (40 samples, 0.15%)</title><rect x="99.2375%" y="245" width="0.1481%" height="15" fill="rgb(227,149,46)" fg:x="26811" fg:w="40"/><text x="99.4875%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.06%)</title><rect x="99.3301%" y="229" width="0.0555%" height="15" fill="rgb(218,36,50)" fg:x="26836" fg:w="15"/><text x="99.5801%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.05%)</title><rect x="99.3338%" y="213" width="0.0518%" height="15" fill="rgb(226,80,48)" fg:x="26837" fg:w="14"/><text x="99.5838%" y="223.50"></text></g><g><title>mango_chess::board::BoardState::make_move (47 samples, 0.17%)</title><rect x="99.3856%" y="261" width="0.1740%" height="15" fill="rgb(238,224,15)" fg:x="26851" fg:w="47"/><text x="99.6356%" y="271.50"></text></g><g><title>mango_chess::board::BoardState::unmake_move (26 samples, 0.10%)</title><rect x="99.5595%" y="261" width="0.0962%" height="15" fill="rgb(241,136,10)" fg:x="26898" fg:w="26"/><text x="99.8095%" y="271.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (7 samples, 0.03%)</title><rect x="99.6558%" y="261" width="0.0259%" height="15" fill="rgb(208,32,45)" fg:x="26924" fg:w="7"/><text x="99.9058%" y="271.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.04%)</title><rect x="99.7520%" y="213" width="0.0370%" height="15" fill="rgb(207,135,9)" fg:x="26950" fg:w="10"/><text x="100.0020%" y="223.50"></text></g><g><title>_int_realloc (9 samples, 0.03%)</title><rect x="99.7557%" y="197" width="0.0333%" height="15" fill="rgb(206,86,44)" fg:x="26951" fg:w="9"/><text x="100.0057%" y="207.50"></text></g><g><title>_int_malloc (6 samples, 0.02%)</title><rect x="99.7668%" y="181" width="0.0222%" height="15" fill="rgb(245,177,15)" fg:x="26954" fg:w="6"/><text x="100.0168%" y="191.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (30 samples, 0.11%)</title><rect x="99.6817%" y="261" width="0.1110%" height="15" fill="rgb(206,64,50)" fg:x="26931" fg:w="30"/><text x="99.9317%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.05%)</title><rect x="99.7446%" y="245" width="0.0481%" height="15" fill="rgb(234,36,40)" fg:x="26948" fg:w="13"/><text x="99.9946%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.04%)</title><rect x="99.7520%" y="229" width="0.0407%" height="15" fill="rgb(213,64,8)" fg:x="26950" fg:w="11"/><text x="100.0020%" y="239.50"></text></g><g><title>mango_chess::engine::negamax (26,960 samples, 99.79%)</title><rect x="0.0222%" y="293" width="99.7890%" height="15" fill="rgb(210,75,36)" fg:x="6" fg:w="26960"/><text x="0.2722%" y="303.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_moves (1,225 samples, 4.53%)</title><rect x="95.2770%" y="277" width="4.5342%" height="15" fill="rgb(229,88,21)" fg:x="25741" fg:w="1225"/><text x="95.5270%" y="287.50">mango..</text></g><g><title>mango_chess::move_generation::rook_moves (5 samples, 0.02%)</title><rect x="99.7927%" y="261" width="0.0185%" height="15" fill="rgb(252,204,47)" fg:x="26961" fg:w="5"/><text x="100.0427%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.01%)</title><rect x="99.8001%" y="245" width="0.0111%" height="15" fill="rgb(208,77,27)" fg:x="26963" fg:w="3"/><text x="100.0501%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="99.8001%" y="229" width="0.0111%" height="15" fill="rgb(221,76,26)" fg:x="26963" fg:w="3"/><text x="100.0501%" y="239.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.01%)</title><rect x="99.8001%" y="213" width="0.0111%" height="15" fill="rgb(225,139,18)" fg:x="26963" fg:w="3"/><text x="100.0501%" y="223.50"></text></g><g><title>_int_realloc (3 samples, 0.01%)</title><rect x="99.8001%" y="197" width="0.0111%" height="15" fill="rgb(230,137,11)" fg:x="26963" fg:w="3"/><text x="100.0501%" y="207.50"></text></g><g><title>__GI___libc_free (3 samples, 0.01%)</title><rect x="99.8816%" y="261" width="0.0111%" height="15" fill="rgb(212,28,1)" fg:x="26985" fg:w="3"/><text x="100.1316%" y="271.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.02%)</title><rect x="99.9112%" y="229" width="0.0185%" height="15" fill="rgb(248,164,17)" fg:x="26993" fg:w="5"/><text x="100.1612%" y="239.50"></text></g><g><title>_int_realloc (4 samples, 0.01%)</title><rect x="99.9149%" y="213" width="0.0148%" height="15" fill="rgb(222,171,42)" fg:x="26994" fg:w="4"/><text x="100.1649%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.04%)</title><rect x="99.8964%" y="261" width="0.0444%" height="15" fill="rgb(243,84,45)" fg:x="26989" fg:w="12"/><text x="100.1464%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.04%)</title><rect x="99.8964%" y="245" width="0.0444%" height="15" fill="rgb(252,49,23)" fg:x="26989" fg:w="12"/><text x="100.1464%" y="255.50"></text></g><g><title>mango_chess::board::BoardState::is_valid_move (33 samples, 0.12%)</title><rect x="99.8260%" y="277" width="0.1221%" height="15" fill="rgb(215,19,7)" fg:x="26970" fg:w="33"/><text x="100.0760%" y="287.50"></text></g><g><title>mango_chess::engine::negamax (27,003 samples, 99.95%)</title><rect x="0.0074%" y="309" width="99.9482%" height="15" fill="rgb(238,81,41)" fg:x="2" fg:w="27003"/><text x="0.2574%" y="319.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_moves (39 samples, 0.14%)</title><rect x="99.8112%" y="293" width="0.1444%" height="15" fill="rgb(210,199,37)" fg:x="26966" fg:w="39"/><text x="100.0612%" y="303.50"></text></g><g><title>mango_chess::engine::negamax (27,009 samples, 99.97%)</title><rect x="0.0037%" y="325" width="99.9704%" height="15" fill="rgb(244,192,49)" fg:x="1" fg:w="27009"/><text x="0.2537%" y="335.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_moves (5 samples, 0.02%)</title><rect x="99.9556%" y="309" width="0.0185%" height="15" fill="rgb(226,211,11)" fg:x="27005" fg:w="5"/><text x="100.2056%" y="319.50"></text></g><g><title>mango_chess::board::BoardState::is_valid_move (5 samples, 0.02%)</title><rect x="99.9556%" y="293" width="0.0185%" height="15" fill="rgb(236,162,54)" fg:x="27005" fg:w="5"/><text x="100.2056%" y="303.50"></text></g><g><title>mango_chess (27,012 samples, 99.98%)</title><rect x="0.0000%" y="613" width="99.9815%" height="15" fill="rgb(220,229,9)" fg:x="0" fg:w="27012"/><text x="0.2500%" y="623.50">mango_chess</text></g><g><title>_start (27,011 samples, 99.98%)</title><rect x="0.0037%" y="597" width="99.9778%" height="15" fill="rgb(250,87,22)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="607.50">_start</text></g><g><title>__libc_start_main_impl (27,011 samples, 99.98%)</title><rect x="0.0037%" y="581" width="99.9778%" height="15" fill="rgb(239,43,17)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="591.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (27,011 samples, 99.98%)</title><rect x="0.0037%" y="565" width="99.9778%" height="15" fill="rgb(231,177,25)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="575.50">__libc_start_call_main</text></g><g><title>main (27,011 samples, 99.98%)</title><rect x="0.0037%" y="549" width="99.9778%" height="15" fill="rgb(219,179,1)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (27,011 samples, 99.98%)</title><rect x="0.0037%" y="533" width="99.9778%" height="15" fill="rgb(238,219,53)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (27,011 samples, 99.98%)</title><rect x="0.0037%" y="517" width="99.9778%" height="15" fill="rgb(232,167,36)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (27,011 samples, 99.98%)</title><rect x="0.0037%" y="501" width="99.9778%" height="15" fill="rgb(244,19,51)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (27,011 samples, 99.98%)</title><rect x="0.0037%" y="485" width="99.9778%" height="15" fill="rgb(224,6,22)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="495.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (27,011 samples, 99.98%)</title><rect x="0.0037%" y="469" width="99.9778%" height="15" fill="rgb(224,145,5)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="479.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (27,011 samples, 99.98%)</title><rect x="0.0037%" y="453" width="99.9778%" height="15" fill="rgb(234,130,49)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (27,011 samples, 99.98%)</title><rect x="0.0037%" y="437" width="99.9778%" height="15" fill="rgb(254,6,2)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (27,011 samples, 99.98%)</title><rect x="0.0037%" y="421" width="99.9778%" height="15" fill="rgb(208,96,46)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="431.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (27,011 samples, 99.98%)</title><rect x="0.0037%" y="405" width="99.9778%" height="15" fill="rgb(239,3,39)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="415.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (27,011 samples, 99.98%)</title><rect x="0.0037%" y="389" width="99.9778%" height="15" fill="rgb(233,210,1)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="399.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (27,011 samples, 99.98%)</title><rect x="0.0037%" y="373" width="99.9778%" height="15" fill="rgb(244,137,37)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mango_chess::main (27,011 samples, 99.98%)</title><rect x="0.0037%" y="357" width="99.9778%" height="15" fill="rgb(240,136,2)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="367.50">mango_chess::main</text></g><g><title>mango_chess::engine::search (27,011 samples, 99.98%)</title><rect x="0.0037%" y="341" width="99.9778%" height="15" fill="rgb(239,18,37)" fg:x="1" fg:w="27011"/><text x="0.2537%" y="351.50">mango_chess::engine::search</text></g><g><title>all (27,017 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="27017"/><text x="0.2500%" y="639.50"></text></g><g><title>perf-exec (5 samples, 0.02%)</title><rect x="99.9815%" y="613" width="0.0185%" height="15" fill="rgb(225,218,4)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="597" width="0.0185%" height="15" fill="rgb(230,182,32)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="581" width="0.0185%" height="15" fill="rgb(242,56,43)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="565" width="0.0185%" height="15" fill="rgb(233,99,24)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="549" width="0.0185%" height="15" fill="rgb(234,209,42)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="533" width="0.0185%" height="15" fill="rgb(227,7,12)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="517" width="0.0185%" height="15" fill="rgb(245,203,43)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="501" width="0.0185%" height="15" fill="rgb(238,205,33)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="485" width="0.0185%" height="15" fill="rgb(231,56,7)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="469" width="0.0185%" height="15" fill="rgb(244,186,29)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="453" width="0.0185%" height="15" fill="rgb(234,111,31)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="437" width="0.0185%" height="15" fill="rgb(241,149,10)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.02%)</title><rect x="99.9815%" y="421" width="0.0185%" height="15" fill="rgb(249,206,44)" fg:x="27012" fg:w="5"/><text x="100.2315%" y="431.50"></text></g></svg></svg>