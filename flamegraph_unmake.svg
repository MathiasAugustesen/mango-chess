<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="694" onload="init(evt)" viewBox="0 0 1200 694" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="694" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="677.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="677.00"> </text><svg id="frames" x="10" width="1180" total_samples="38019"><g><title>__GI___libc_free (5 samples, 0.01%)</title><rect x="0.0868%" y="293" width="0.0132%" height="15" fill="rgb(227,0,7)" fg:x="33" fg:w="5"/><text x="0.3368%" y="303.50"></text></g><g><title>_int_free (4 samples, 0.01%)</title><rect x="0.0894%" y="277" width="0.0105%" height="15" fill="rgb(217,0,24)" fg:x="34" fg:w="4"/><text x="0.3394%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.03%)</title><rect x="0.1026%" y="293" width="0.0342%" height="15" fill="rgb(221,193,54)" fg:x="39" fg:w="13"/><text x="0.3526%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.03%)</title><rect x="0.1052%" y="277" width="0.0316%" height="15" fill="rgb(248,212,6)" fg:x="40" fg:w="12"/><text x="0.3552%" y="287.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.03%)</title><rect x="0.1052%" y="261" width="0.0316%" height="15" fill="rgb(208,68,35)" fg:x="40" fg:w="12"/><text x="0.3552%" y="271.50"></text></g><g><title>_int_realloc (12 samples, 0.03%)</title><rect x="0.1052%" y="245" width="0.0316%" height="15" fill="rgb(232,128,0)" fg:x="40" fg:w="12"/><text x="0.3552%" y="255.50"></text></g><g><title>_int_malloc (6 samples, 0.02%)</title><rect x="0.1210%" y="229" width="0.0158%" height="15" fill="rgb(207,160,47)" fg:x="46" fg:w="6"/><text x="0.3710%" y="239.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (5 samples, 0.01%)</title><rect x="0.1368%" y="293" width="0.0132%" height="15" fill="rgb(228,23,34)" fg:x="52" fg:w="5"/><text x="0.3868%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.01%)</title><rect x="0.1394%" y="277" width="0.0105%" height="15" fill="rgb(218,30,26)" fg:x="53" fg:w="4"/><text x="0.3894%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="0.1394%" y="261" width="0.0105%" height="15" fill="rgb(220,122,19)" fg:x="53" fg:w="4"/><text x="0.3894%" y="271.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.01%)</title><rect x="0.1394%" y="245" width="0.0105%" height="15" fill="rgb(250,228,42)" fg:x="53" fg:w="4"/><text x="0.3894%" y="255.50"></text></g><g><title>_int_realloc (4 samples, 0.01%)</title><rect x="0.1394%" y="229" width="0.0105%" height="15" fill="rgb(240,193,28)" fg:x="53" fg:w="4"/><text x="0.3894%" y="239.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (4 samples, 0.01%)</title><rect x="0.1499%" y="293" width="0.0105%" height="15" fill="rgb(216,20,37)" fg:x="57" fg:w="4"/><text x="0.3999%" y="303.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (4 samples, 0.01%)</title><rect x="0.1499%" y="277" width="0.0105%" height="15" fill="rgb(206,188,39)" fg:x="57" fg:w="4"/><text x="0.3999%" y="287.50"></text></g><g><title>mango_chess::board::BoardState::square_is_attacked (54 samples, 0.14%)</title><rect x="0.0263%" y="309" width="0.1420%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="54"/><text x="0.2763%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (34 samples, 0.09%)</title><rect x="0.2762%" y="293" width="0.0894%" height="15" fill="rgb(231,73,38)" fg:x="105" fg:w="34"/><text x="0.5262%" y="303.50"></text></g><g><title>mango_chess::move_ordering::move_sort (24 samples, 0.06%)</title><rect x="0.3025%" y="277" width="0.0631%" height="15" fill="rgb(225,20,46)" fg:x="115" fg:w="24"/><text x="0.5525%" y="287.50"></text></g><g><title>__GI___libc_free (6 samples, 0.02%)</title><rect x="0.3682%" y="293" width="0.0158%" height="15" fill="rgb(210,31,41)" fg:x="140" fg:w="6"/><text x="0.6182%" y="303.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (21 samples, 0.06%)</title><rect x="0.4734%" y="277" width="0.0552%" height="15" fill="rgb(221,200,47)" fg:x="180" fg:w="21"/><text x="0.7234%" y="287.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (23 samples, 0.06%)</title><rect x="0.5287%" y="261" width="0.0605%" height="15" fill="rgb(226,26,5)" fg:x="201" fg:w="23"/><text x="0.7787%" y="271.50"></text></g><g><title>core::slice::sort::recurse (79 samples, 0.21%)</title><rect x="0.3840%" y="293" width="0.2078%" height="15" fill="rgb(249,33,26)" fg:x="146" fg:w="79"/><text x="0.6340%" y="303.50"></text></g><g><title>core::slice::sort::recurse (24 samples, 0.06%)</title><rect x="0.5287%" y="277" width="0.0631%" height="15" fill="rgb(235,183,28)" fg:x="201" fg:w="24"/><text x="0.7787%" y="287.50"></text></g><g><title>mango_chess::board::BoardState::make_move (32 samples, 0.08%)</title><rect x="0.5918%" y="293" width="0.0842%" height="15" fill="rgb(221,5,38)" fg:x="225" fg:w="32"/><text x="0.8418%" y="303.50"></text></g><g><title>tcache_put (4 samples, 0.01%)</title><rect x="1.9806%" y="245" width="0.0105%" height="15" fill="rgb(247,18,42)" fg:x="753" fg:w="4"/><text x="2.2306%" y="255.50"></text></g><g><title>__GI___libc_free (49 samples, 0.13%)</title><rect x="1.8675%" y="277" width="0.1289%" height="15" fill="rgb(241,131,45)" fg:x="710" fg:w="49"/><text x="2.1175%" y="287.50"></text></g><g><title>_int_free (31 samples, 0.08%)</title><rect x="1.9148%" y="261" width="0.0815%" height="15" fill="rgb(249,31,29)" fg:x="728" fg:w="31"/><text x="2.1648%" y="271.50"></text></g><g><title>__rust_dealloc (9 samples, 0.02%)</title><rect x="1.9964%" y="277" width="0.0237%" height="15" fill="rgb(225,111,53)" fg:x="759" fg:w="9"/><text x="2.2464%" y="287.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.02%)</title><rect x="2.1805%" y="245" width="0.0237%" height="15" fill="rgb(238,160,17)" fg:x="829" fg:w="9"/><text x="2.4305%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14 samples, 0.04%)</title><rect x="2.3304%" y="213" width="0.0368%" height="15" fill="rgb(214,148,48)" fg:x="886" fg:w="14"/><text x="2.5804%" y="223.50"></text></g><g><title>__memmove_avx_unaligned (4 samples, 0.01%)</title><rect x="2.3672%" y="213" width="0.0105%" height="15" fill="rgb(232,36,49)" fg:x="900" fg:w="4"/><text x="2.6172%" y="223.50"></text></g><g><title>_int_free (46 samples, 0.12%)</title><rect x="2.3778%" y="213" width="0.1210%" height="15" fill="rgb(209,103,24)" fg:x="904" fg:w="46"/><text x="2.6278%" y="223.50"></text></g><g><title>tcache_put (4 samples, 0.01%)</title><rect x="2.4882%" y="197" width="0.0105%" height="15" fill="rgb(229,88,8)" fg:x="946" fg:w="4"/><text x="2.7382%" y="207.50"></text></g><g><title>tcache_put (5 samples, 0.01%)</title><rect x="2.6434%" y="197" width="0.0132%" height="15" fill="rgb(213,181,19)" fg:x="1005" fg:w="5"/><text x="2.8934%" y="207.50"></text></g><g><title>__GI___libc_realloc (175 samples, 0.46%)</title><rect x="2.2042%" y="245" width="0.4603%" height="15" fill="rgb(254,191,54)" fg:x="838" fg:w="175"/><text x="2.4542%" y="255.50"></text></g><g><title>_int_realloc (159 samples, 0.42%)</title><rect x="2.2462%" y="229" width="0.4182%" height="15" fill="rgb(241,83,37)" fg:x="854" fg:w="159"/><text x="2.4962%" y="239.50"></text></g><g><title>_int_malloc (63 samples, 0.17%)</title><rect x="2.4988%" y="213" width="0.1657%" height="15" fill="rgb(233,36,39)" fg:x="950" fg:w="63"/><text x="2.7488%" y="223.50"></text></g><g><title>__rdl_alloc (6 samples, 0.02%)</title><rect x="2.6645%" y="245" width="0.0158%" height="15" fill="rgb(226,3,54)" fg:x="1013" fg:w="6"/><text x="2.9145%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.01%)</title><rect x="2.6671%" y="229" width="0.0132%" height="15" fill="rgb(245,192,40)" fg:x="1014" fg:w="5"/><text x="2.9171%" y="239.50"></text></g><g><title>__rdl_realloc (16 samples, 0.04%)</title><rect x="2.6802%" y="245" width="0.0421%" height="15" fill="rgb(238,167,29)" fg:x="1019" fg:w="16"/><text x="2.9302%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (11 samples, 0.03%)</title><rect x="2.6934%" y="229" width="0.0289%" height="15" fill="rgb(232,182,51)" fg:x="1024" fg:w="11"/><text x="2.9434%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (275 samples, 0.72%)</title><rect x="2.0200%" y="277" width="0.7233%" height="15" fill="rgb(231,60,39)" fg:x="768" fg:w="275"/><text x="2.2700%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (242 samples, 0.64%)</title><rect x="2.1068%" y="261" width="0.6365%" height="15" fill="rgb(208,69,12)" fg:x="801" fg:w="242"/><text x="2.3568%" y="271.50"></text></g><g><title>__rust_realloc (7 samples, 0.02%)</title><rect x="2.7250%" y="245" width="0.0184%" height="15" fill="rgb(235,93,37)" fg:x="1036" fg:w="7"/><text x="2.9750%" y="255.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.03%)</title><rect x="2.7881%" y="229" width="0.0263%" height="15" fill="rgb(213,116,39)" fg:x="1060" fg:w="10"/><text x="3.0381%" y="239.50"></text></g><g><title>_int_realloc (9 samples, 0.02%)</title><rect x="2.7907%" y="213" width="0.0237%" height="15" fill="rgb(222,207,29)" fg:x="1061" fg:w="9"/><text x="3.0407%" y="223.50"></text></g><g><title>_int_malloc (6 samples, 0.02%)</title><rect x="2.7986%" y="197" width="0.0158%" height="15" fill="rgb(206,96,30)" fg:x="1064" fg:w="6"/><text x="3.0486%" y="207.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (29 samples, 0.08%)</title><rect x="2.7434%" y="277" width="0.0763%" height="15" fill="rgb(218,138,4)" fg:x="1043" fg:w="29"/><text x="2.9934%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.04%)</title><rect x="2.7776%" y="261" width="0.0421%" height="15" fill="rgb(250,191,14)" fg:x="1056" fg:w="16"/><text x="3.0276%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.04%)</title><rect x="2.7828%" y="245" width="0.0368%" height="15" fill="rgb(239,60,40)" fg:x="1058" fg:w="14"/><text x="3.0328%" y="255.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (37 samples, 0.10%)</title><rect x="2.8196%" y="277" width="0.0973%" height="15" fill="rgb(206,27,48)" fg:x="1072" fg:w="37"/><text x="3.0696%" y="287.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (33 samples, 0.09%)</title><rect x="2.8302%" y="261" width="0.0868%" height="15" fill="rgb(225,35,8)" fg:x="1076" fg:w="33"/><text x="3.0802%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (22 samples, 0.06%)</title><rect x="2.8591%" y="245" width="0.0579%" height="15" fill="rgb(250,213,24)" fg:x="1087" fg:w="22"/><text x="3.1091%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 0.05%)</title><rect x="2.8644%" y="229" width="0.0526%" height="15" fill="rgb(247,123,22)" fg:x="1089" fg:w="20"/><text x="3.1144%" y="239.50"></text></g><g><title>__GI___libc_realloc (16 samples, 0.04%)</title><rect x="2.8749%" y="213" width="0.0421%" height="15" fill="rgb(231,138,38)" fg:x="1093" fg:w="16"/><text x="3.1249%" y="223.50"></text></g><g><title>_int_realloc (14 samples, 0.04%)</title><rect x="2.8801%" y="197" width="0.0368%" height="15" fill="rgb(231,145,46)" fg:x="1095" fg:w="14"/><text x="3.1301%" y="207.50"></text></g><g><title>_int_malloc (4 samples, 0.01%)</title><rect x="2.9064%" y="181" width="0.0105%" height="15" fill="rgb(251,118,11)" fg:x="1105" fg:w="4"/><text x="3.1564%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.01%)</title><rect x="3.0038%" y="197" width="0.0105%" height="15" fill="rgb(217,147,25)" fg:x="1142" fg:w="4"/><text x="3.2538%" y="207.50"></text></g><g><title>__GI___libc_realloc (17 samples, 0.04%)</title><rect x="2.9880%" y="229" width="0.0447%" height="15" fill="rgb(247,81,37)" fg:x="1136" fg:w="17"/><text x="3.2380%" y="239.50"></text></g><g><title>_int_realloc (14 samples, 0.04%)</title><rect x="2.9959%" y="213" width="0.0368%" height="15" fill="rgb(209,12,38)" fg:x="1139" fg:w="14"/><text x="3.2459%" y="223.50"></text></g><g><title>_int_malloc (5 samples, 0.01%)</title><rect x="3.0195%" y="197" width="0.0132%" height="15" fill="rgb(227,1,9)" fg:x="1148" fg:w="5"/><text x="3.2695%" y="207.50"></text></g><g><title>mango_chess::board::BoardState::square_is_attacked (900 samples, 2.37%)</title><rect x="0.6760%" y="293" width="2.3672%" height="15" fill="rgb(248,47,43)" fg:x="257" fg:w="900"/><text x="0.9260%" y="303.50">ma..</text></g><g><title>mango_chess::move_generation::rook_moves (48 samples, 0.13%)</title><rect x="2.9170%" y="277" width="0.1263%" height="15" fill="rgb(221,10,30)" fg:x="1109" fg:w="48"/><text x="3.1670%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.06%)</title><rect x="2.9801%" y="261" width="0.0631%" height="15" fill="rgb(210,229,1)" fg:x="1133" fg:w="24"/><text x="3.2301%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.06%)</title><rect x="2.9853%" y="245" width="0.0579%" height="15" fill="rgb(222,148,37)" fg:x="1135" fg:w="22"/><text x="3.2353%" y="255.50"></text></g><g><title>__rdl_realloc (4 samples, 0.01%)</title><rect x="3.0327%" y="229" width="0.0105%" height="15" fill="rgb(234,67,33)" fg:x="1153" fg:w="4"/><text x="3.2827%" y="239.50"></text></g><g><title>mango_chess::board::BoardState::unmake_move (26 samples, 0.07%)</title><rect x="3.0432%" y="293" width="0.0684%" height="15" fill="rgb(247,98,35)" fg:x="1157" fg:w="26"/><text x="3.2932%" y="303.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.03%)</title><rect x="6.1259%" y="261" width="0.0289%" height="15" fill="rgb(247,138,52)" fg:x="2329" fg:w="11"/><text x="6.3759%" y="271.50"></text></g><g><title>tcache_get (4 samples, 0.01%)</title><rect x="6.1443%" y="245" width="0.0105%" height="15" fill="rgb(213,79,30)" fg:x="2336" fg:w="4"/><text x="6.3943%" y="255.50"></text></g><g><title>__rdl_alloc (4 samples, 0.01%)</title><rect x="6.1548%" y="261" width="0.0105%" height="15" fill="rgb(246,177,23)" fg:x="2340" fg:w="4"/><text x="6.4048%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (528 samples, 1.39%)</title><rect x="5.9391%" y="277" width="1.3888%" height="15" fill="rgb(230,62,27)" fg:x="2258" fg:w="528"/><text x="6.1891%" y="287.50"></text></g><g><title>mango_chess::move_ordering::move_sort (441 samples, 1.16%)</title><rect x="6.1680%" y="261" width="1.1599%" height="15" fill="rgb(216,154,8)" fg:x="2345" fg:w="441"/><text x="6.4180%" y="271.50"></text></g><g><title>__GI___libc_free (54 samples, 0.14%)</title><rect x="7.3358%" y="277" width="0.1420%" height="15" fill="rgb(244,35,45)" fg:x="2789" fg:w="54"/><text x="7.5858%" y="287.50"></text></g><g><title>_int_free (39 samples, 0.10%)</title><rect x="7.3753%" y="261" width="0.1026%" height="15" fill="rgb(251,115,12)" fg:x="2804" fg:w="39"/><text x="7.6253%" y="271.50"></text></g><g><title>tcache_put (4 samples, 0.01%)</title><rect x="7.4673%" y="245" width="0.0105%" height="15" fill="rgb(240,54,50)" fg:x="2839" fg:w="4"/><text x="7.7173%" y="255.50"></text></g><g><title>__rust_dealloc (7 samples, 0.02%)</title><rect x="7.4831%" y="277" width="0.0184%" height="15" fill="rgb(233,84,52)" fg:x="2845" fg:w="7"/><text x="7.7331%" y="287.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (339 samples, 0.89%)</title><rect x="8.7509%" y="261" width="0.8917%" height="15" fill="rgb(207,117,47)" fg:x="3327" fg:w="339"/><text x="9.0009%" y="271.50"></text></g><g><title>core::slice::sort::partial_insertion_sort (5 samples, 0.01%)</title><rect x="9.6425%" y="261" width="0.0132%" height="15" fill="rgb(249,43,39)" fg:x="3666" fg:w="5"/><text x="9.8925%" y="271.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (413 samples, 1.09%)</title><rect x="9.7109%" y="245" width="1.0863%" height="15" fill="rgb(209,38,44)" fg:x="3692" fg:w="413"/><text x="9.9609%" y="255.50"></text></g><g><title>core::slice::sort::recurse (1,262 samples, 3.32%)</title><rect x="7.5015%" y="277" width="3.3194%" height="15" fill="rgb(236,212,23)" fg:x="2852" fg:w="1262"/><text x="7.7515%" y="287.50">cor..</text></g><g><title>core::slice::sort::recurse (443 samples, 1.17%)</title><rect x="9.6557%" y="261" width="1.1652%" height="15" fill="rgb(242,79,21)" fg:x="3671" fg:w="443"/><text x="9.9057%" y="271.50"></text></g><g><title>core::slice::sort::recurse (9 samples, 0.02%)</title><rect x="10.7972%" y="245" width="0.0237%" height="15" fill="rgb(211,96,35)" fg:x="4105" fg:w="9"/><text x="11.0472%" y="255.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (9 samples, 0.02%)</title><rect x="10.7972%" y="229" width="0.0237%" height="15" fill="rgb(253,215,40)" fg:x="4105" fg:w="9"/><text x="11.0472%" y="239.50"></text></g><g><title>mango_chess::board::BoardState::make_move (1,444 samples, 3.80%)</title><rect x="10.8209%" y="277" width="3.7981%" height="15" fill="rgb(211,81,21)" fg:x="4114" fg:w="1444"/><text x="11.0709%" y="287.50">mang..</text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="14.6006%" y="261" width="0.0184%" height="15" fill="rgb(208,190,38)" fg:x="5551" fg:w="7"/><text x="14.8506%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="14.6006%" y="245" width="0.0184%" height="15" fill="rgb(235,213,38)" fg:x="5551" fg:w="7"/><text x="14.8506%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="14.6006%" y="229" width="0.0184%" height="15" fill="rgb(237,122,38)" fg:x="5551" fg:w="7"/><text x="14.8506%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="14.6006%" y="213" width="0.0184%" height="15" fill="rgb(244,218,35)" fg:x="5551" fg:w="7"/><text x="14.8506%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="14.6006%" y="197" width="0.0184%" height="15" fill="rgb(240,68,47)" fg:x="5551" fg:w="7"/><text x="14.8506%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="14.6006%" y="181" width="0.0184%" height="15" fill="rgb(210,16,53)" fg:x="5551" fg:w="7"/><text x="14.8506%" y="191.50"></text></g><g><title>[unknown] (47 samples, 0.12%)</title><rect x="50.8430%" y="261" width="0.1236%" height="15" fill="rgb(235,124,12)" fg:x="19330" fg:w="47"/><text x="51.0930%" y="271.50"></text></g><g><title>[unknown] (46 samples, 0.12%)</title><rect x="50.8456%" y="245" width="0.1210%" height="15" fill="rgb(224,169,11)" fg:x="19331" fg:w="46"/><text x="51.0956%" y="255.50"></text></g><g><title>[unknown] (46 samples, 0.12%)</title><rect x="50.8456%" y="229" width="0.1210%" height="15" fill="rgb(250,166,2)" fg:x="19331" fg:w="46"/><text x="51.0956%" y="239.50"></text></g><g><title>[unknown] (46 samples, 0.12%)</title><rect x="50.8456%" y="213" width="0.1210%" height="15" fill="rgb(242,216,29)" fg:x="19331" fg:w="46"/><text x="51.0956%" y="223.50"></text></g><g><title>[unknown] (46 samples, 0.12%)</title><rect x="50.8456%" y="197" width="0.1210%" height="15" fill="rgb(230,116,27)" fg:x="19331" fg:w="46"/><text x="51.0956%" y="207.50"></text></g><g><title>[unknown] (45 samples, 0.12%)</title><rect x="50.8483%" y="181" width="0.1184%" height="15" fill="rgb(228,99,48)" fg:x="19332" fg:w="45"/><text x="51.0983%" y="191.50"></text></g><g><title>[unknown] (39 samples, 0.10%)</title><rect x="50.8640%" y="165" width="0.1026%" height="15" fill="rgb(253,11,6)" fg:x="19338" fg:w="39"/><text x="51.1140%" y="175.50"></text></g><g><title>[unknown] (25 samples, 0.07%)</title><rect x="50.9009%" y="149" width="0.0658%" height="15" fill="rgb(247,143,39)" fg:x="19352" fg:w="25"/><text x="51.1509%" y="159.50"></text></g><g><title>[unknown] (24 samples, 0.06%)</title><rect x="50.9035%" y="133" width="0.0631%" height="15" fill="rgb(236,97,10)" fg:x="19353" fg:w="24"/><text x="51.1535%" y="143.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="50.9351%" y="117" width="0.0316%" height="15" fill="rgb(233,208,19)" fg:x="19365" fg:w="12"/><text x="51.1851%" y="127.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="50.9429%" y="101" width="0.0237%" height="15" fill="rgb(216,164,2)" fg:x="19368" fg:w="9"/><text x="51.1929%" y="111.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="50.9456%" y="85" width="0.0210%" height="15" fill="rgb(220,129,5)" fg:x="19369" fg:w="8"/><text x="51.1956%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="50.9535%" y="69" width="0.0132%" height="15" fill="rgb(242,17,10)" fg:x="19372" fg:w="5"/><text x="51.2035%" y="79.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="50.9561%" y="53" width="0.0105%" height="15" fill="rgb(242,107,0)" fg:x="19373" fg:w="4"/><text x="51.2061%" y="63.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="52.6316%" y="245" width="0.0105%" height="15" fill="rgb(251,28,31)" fg:x="20010" fg:w="4"/><text x="52.8816%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="52.6316%" y="229" width="0.0105%" height="15" fill="rgb(233,223,10)" fg:x="20010" fg:w="4"/><text x="52.8816%" y="239.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="52.6316%" y="213" width="0.0105%" height="15" fill="rgb(215,21,27)" fg:x="20010" fg:w="4"/><text x="52.8816%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="52.6316%" y="197" width="0.0105%" height="15" fill="rgb(232,23,21)" fg:x="20010" fg:w="4"/><text x="52.8816%" y="207.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="52.6316%" y="181" width="0.0105%" height="15" fill="rgb(244,5,23)" fg:x="20010" fg:w="4"/><text x="52.8816%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="52.6316%" y="165" width="0.0105%" height="15" fill="rgb(226,81,46)" fg:x="20010" fg:w="4"/><text x="52.8816%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="52.6316%" y="149" width="0.0105%" height="15" fill="rgb(247,70,30)" fg:x="20010" fg:w="4"/><text x="52.8816%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="52.6316%" y="133" width="0.0105%" height="15" fill="rgb(212,68,19)" fg:x="20010" fg:w="4"/><text x="52.8816%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="52.6316%" y="117" width="0.0105%" height="15" fill="rgb(240,187,13)" fg:x="20010" fg:w="4"/><text x="52.8816%" y="127.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="55.9983%" y="229" width="0.0316%" height="15" fill="rgb(223,113,26)" fg:x="21290" fg:w="12"/><text x="56.2483%" y="239.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="55.9983%" y="213" width="0.0316%" height="15" fill="rgb(206,192,2)" fg:x="21290" fg:w="12"/><text x="56.2483%" y="223.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="55.9983%" y="197" width="0.0316%" height="15" fill="rgb(241,108,4)" fg:x="21290" fg:w="12"/><text x="56.2483%" y="207.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="55.9983%" y="181" width="0.0316%" height="15" fill="rgb(247,173,49)" fg:x="21290" fg:w="12"/><text x="56.2483%" y="191.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="55.9983%" y="165" width="0.0316%" height="15" fill="rgb(224,114,35)" fg:x="21290" fg:w="12"/><text x="56.2483%" y="175.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="55.9983%" y="149" width="0.0316%" height="15" fill="rgb(245,159,27)" fg:x="21290" fg:w="12"/><text x="56.2483%" y="159.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="55.9983%" y="133" width="0.0316%" height="15" fill="rgb(245,172,44)" fg:x="21290" fg:w="12"/><text x="56.2483%" y="143.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="56.0009%" y="117" width="0.0289%" height="15" fill="rgb(236,23,11)" fg:x="21291" fg:w="11"/><text x="56.2509%" y="127.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="56.0009%" y="101" width="0.0289%" height="15" fill="rgb(205,117,38)" fg:x="21291" fg:w="11"/><text x="56.2509%" y="111.50"></text></g><g><title>free_perturb (17 samples, 0.04%)</title><rect x="56.0299%" y="229" width="0.0447%" height="15" fill="rgb(237,72,25)" fg:x="21302" fg:w="17"/><text x="56.2799%" y="239.50"></text></g><g><title>tcache_put (37 samples, 0.10%)</title><rect x="56.0746%" y="229" width="0.0973%" height="15" fill="rgb(244,70,9)" fg:x="21319" fg:w="37"/><text x="56.3246%" y="239.50"></text></g><g><title>__GI___libc_free (2,024 samples, 5.32%)</title><rect x="50.9666%" y="261" width="5.3237%" height="15" fill="rgb(217,125,39)" fg:x="19377" fg:w="2024"/><text x="51.2166%" y="271.50">__GI___..</text></g><g><title>_int_free (1,387 samples, 3.65%)</title><rect x="52.6421%" y="245" width="3.6482%" height="15" fill="rgb(235,36,10)" fg:x="20014" fg:w="1387"/><text x="52.8921%" y="255.50">_int..</text></g><g><title>unlink_chunk (45 samples, 0.12%)</title><rect x="56.1719%" y="229" width="0.1184%" height="15" fill="rgb(251,123,47)" fg:x="21356" fg:w="45"/><text x="56.4219%" y="239.50"></text></g><g><title>__rdl_dealloc (48 samples, 0.13%)</title><rect x="56.2903%" y="261" width="0.1263%" height="15" fill="rgb(221,13,13)" fg:x="21401" fg:w="48"/><text x="56.5403%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (48 samples, 0.13%)</title><rect x="56.2903%" y="245" width="0.1263%" height="15" fill="rgb(238,131,9)" fg:x="21401" fg:w="48"/><text x="56.5403%" y="255.50"></text></g><g><title>__rust_dealloc (224 samples, 0.59%)</title><rect x="56.4165%" y="261" width="0.5892%" height="15" fill="rgb(211,50,8)" fg:x="21449" fg:w="224"/><text x="56.6665%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="60.2225%" y="245" width="0.0184%" height="15" fill="rgb(245,182,24)" fg:x="22896" fg:w="7"/><text x="60.4725%" y="255.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="60.2225%" y="229" width="0.0184%" height="15" fill="rgb(242,14,37)" fg:x="22896" fg:w="7"/><text x="60.4725%" y="239.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="60.2225%" y="213" width="0.0184%" height="15" fill="rgb(246,228,12)" fg:x="22896" fg:w="7"/><text x="60.4725%" y="223.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="60.2225%" y="197" width="0.0184%" height="15" fill="rgb(213,55,15)" fg:x="22896" fg:w="7"/><text x="60.4725%" y="207.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="60.2225%" y="181" width="0.0184%" height="15" fill="rgb(209,9,3)" fg:x="22896" fg:w="7"/><text x="60.4725%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="60.2225%" y="165" width="0.0184%" height="15" fill="rgb(230,59,30)" fg:x="22896" fg:w="7"/><text x="60.4725%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="60.2225%" y="149" width="0.0184%" height="15" fill="rgb(209,121,21)" fg:x="22896" fg:w="7"/><text x="60.4725%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="60.2304%" y="133" width="0.0105%" height="15" fill="rgb(220,109,13)" fg:x="22899" fg:w="4"/><text x="60.4804%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="60.2304%" y="117" width="0.0105%" height="15" fill="rgb(232,18,1)" fg:x="22899" fg:w="4"/><text x="60.4804%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="62.7055%" y="229" width="0.0132%" height="15" fill="rgb(215,41,42)" fg:x="23840" fg:w="5"/><text x="62.9555%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="62.7055%" y="213" width="0.0132%" height="15" fill="rgb(224,123,36)" fg:x="23840" fg:w="5"/><text x="62.9555%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="62.7055%" y="197" width="0.0132%" height="15" fill="rgb(240,125,3)" fg:x="23840" fg:w="5"/><text x="62.9555%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="62.7055%" y="181" width="0.0132%" height="15" fill="rgb(205,98,50)" fg:x="23840" fg:w="5"/><text x="62.9555%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="62.7055%" y="165" width="0.0132%" height="15" fill="rgb(205,185,37)" fg:x="23840" fg:w="5"/><text x="62.9555%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="62.7055%" y="149" width="0.0132%" height="15" fill="rgb(238,207,15)" fg:x="23840" fg:w="5"/><text x="62.9555%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="62.7055%" y="133" width="0.0132%" height="15" fill="rgb(213,199,42)" fg:x="23840" fg:w="5"/><text x="62.9555%" y="143.50"></text></g><g><title>_int_malloc (47 samples, 0.12%)</title><rect x="63.4446%" y="213" width="0.1236%" height="15" fill="rgb(235,201,11)" fg:x="24121" fg:w="47"/><text x="63.6946%" y="223.50"></text></g><g><title>unlink_chunk (4 samples, 0.01%)</title><rect x="63.5577%" y="197" width="0.0105%" height="15" fill="rgb(207,46,11)" fg:x="24164" fg:w="4"/><text x="63.8077%" y="207.50"></text></g><g><title>__GI___libc_malloc (483 samples, 1.27%)</title><rect x="62.7186%" y="229" width="1.2704%" height="15" fill="rgb(241,35,35)" fg:x="23845" fg:w="483"/><text x="62.9686%" y="239.50"></text></g><g><title>tcache_get (160 samples, 0.42%)</title><rect x="63.5682%" y="213" width="0.4208%" height="15" fill="rgb(243,32,47)" fg:x="24168" fg:w="160"/><text x="63.8182%" y="223.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="65.6067%" y="213" width="0.0210%" height="15" fill="rgb(247,202,23)" fg:x="24943" fg:w="8"/><text x="65.8567%" y="223.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="65.6067%" y="197" width="0.0210%" height="15" fill="rgb(219,102,11)" fg:x="24943" fg:w="8"/><text x="65.8567%" y="207.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="65.6067%" y="181" width="0.0210%" height="15" fill="rgb(243,110,44)" fg:x="24943" fg:w="8"/><text x="65.8567%" y="191.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="65.6067%" y="165" width="0.0210%" height="15" fill="rgb(222,74,54)" fg:x="24943" fg:w="8"/><text x="65.8567%" y="175.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="65.6067%" y="149" width="0.0210%" height="15" fill="rgb(216,99,12)" fg:x="24943" fg:w="8"/><text x="65.8567%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="65.6067%" y="133" width="0.0210%" height="15" fill="rgb(226,22,26)" fg:x="24943" fg:w="8"/><text x="65.8567%" y="143.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="65.6067%" y="117" width="0.0210%" height="15" fill="rgb(217,163,10)" fg:x="24943" fg:w="8"/><text x="65.8567%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="68.2422%" y="197" width="0.0158%" height="15" fill="rgb(213,25,53)" fg:x="25945" fg:w="6"/><text x="68.4922%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="68.2422%" y="181" width="0.0158%" height="15" fill="rgb(252,105,26)" fg:x="25945" fg:w="6"/><text x="68.4922%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="68.2422%" y="165" width="0.0158%" height="15" fill="rgb(220,39,43)" fg:x="25945" fg:w="6"/><text x="68.4922%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="68.2422%" y="149" width="0.0158%" height="15" fill="rgb(229,68,48)" fg:x="25945" fg:w="6"/><text x="68.4922%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="68.2422%" y="133" width="0.0158%" height="15" fill="rgb(252,8,32)" fg:x="25945" fg:w="6"/><text x="68.4922%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="68.2422%" y="117" width="0.0158%" height="15" fill="rgb(223,20,43)" fg:x="25945" fg:w="6"/><text x="68.4922%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="68.2422%" y="101" width="0.0158%" height="15" fill="rgb(229,81,49)" fg:x="25945" fg:w="6"/><text x="68.4922%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="68.2475%" y="85" width="0.0105%" height="15" fill="rgb(236,28,36)" fg:x="25947" fg:w="4"/><text x="68.4975%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="68.2475%" y="69" width="0.0105%" height="15" fill="rgb(249,185,26)" fg:x="25947" fg:w="4"/><text x="68.4975%" y="79.50"></text></g><g><title>__memcpy_avx_unaligned_erms (528 samples, 1.39%)</title><rect x="68.2580%" y="197" width="1.3888%" height="15" fill="rgb(249,174,33)" fg:x="25951" fg:w="528"/><text x="68.5080%" y="207.50"></text></g><g><title>__memmove_avx_unaligned (117 samples, 0.31%)</title><rect x="69.6468%" y="197" width="0.3077%" height="15" fill="rgb(233,201,37)" fg:x="26479" fg:w="117"/><text x="69.8968%" y="207.50"></text></g><g><title>free_perturb (13 samples, 0.03%)</title><rect x="73.4186%" y="181" width="0.0342%" height="15" fill="rgb(221,78,26)" fg:x="27913" fg:w="13"/><text x="73.6686%" y="191.50"></text></g><g><title>_int_free (1,412 samples, 3.71%)</title><rect x="69.9545%" y="197" width="3.7139%" height="15" fill="rgb(250,127,30)" fg:x="26596" fg:w="1412"/><text x="70.2045%" y="207.50">_int..</text></g><g><title>tcache_put (82 samples, 0.22%)</title><rect x="73.4527%" y="181" width="0.2157%" height="15" fill="rgb(230,49,44)" fg:x="27926" fg:w="82"/><text x="73.7027%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="79.3971%" y="181" width="0.0132%" height="15" fill="rgb(229,67,23)" fg:x="30186" fg:w="5"/><text x="79.6471%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="79.3971%" y="165" width="0.0132%" height="15" fill="rgb(249,83,47)" fg:x="30186" fg:w="5"/><text x="79.6471%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="79.3971%" y="149" width="0.0132%" height="15" fill="rgb(215,43,3)" fg:x="30186" fg:w="5"/><text x="79.6471%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="79.3971%" y="133" width="0.0132%" height="15" fill="rgb(238,154,13)" fg:x="30186" fg:w="5"/><text x="79.6471%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="79.3971%" y="117" width="0.0132%" height="15" fill="rgb(219,56,2)" fg:x="30186" fg:w="5"/><text x="79.6471%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="79.3971%" y="101" width="0.0132%" height="15" fill="rgb(233,0,4)" fg:x="30186" fg:w="5"/><text x="79.6471%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="79.3971%" y="85" width="0.0132%" height="15" fill="rgb(235,30,7)" fg:x="30186" fg:w="5"/><text x="79.6471%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="79.3971%" y="69" width="0.0132%" height="15" fill="rgb(250,79,13)" fg:x="30186" fg:w="5"/><text x="79.6471%" y="79.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="79.3998%" y="53" width="0.0105%" height="15" fill="rgb(211,146,34)" fg:x="30187" fg:w="4"/><text x="79.6498%" y="63.50"></text></g><g><title>alloc_perturb (24 samples, 0.06%)</title><rect x="79.4103%" y="181" width="0.0631%" height="15" fill="rgb(228,22,38)" fg:x="30191" fg:w="24"/><text x="79.6603%" y="191.50"></text></g><g><title>checked_request2size (70 samples, 0.18%)</title><rect x="79.4734%" y="181" width="0.1841%" height="15" fill="rgb(235,168,5)" fg:x="30215" fg:w="70"/><text x="79.7234%" y="191.50"></text></g><g><title>tcache_put (114 samples, 0.30%)</title><rect x="79.6575%" y="181" width="0.2999%" height="15" fill="rgb(221,155,16)" fg:x="30285" fg:w="114"/><text x="79.9075%" y="191.50"></text></g><g><title>_int_malloc (2,439 samples, 6.42%)</title><rect x="73.6684%" y="197" width="6.4152%" height="15" fill="rgb(215,215,53)" fg:x="28008" fg:w="2439"/><text x="73.9184%" y="207.50">_int_mal..</text></g><g><title>unlink_chunk (48 samples, 0.13%)</title><rect x="79.9574%" y="181" width="0.1263%" height="15" fill="rgb(223,4,10)" fg:x="30399" fg:w="48"/><text x="80.2074%" y="191.50"></text></g><g><title>_int_realloc (5,504 samples, 14.48%)</title><rect x="65.6277%" y="213" width="14.4770%" height="15" fill="rgb(234,103,6)" fg:x="24951" fg:w="5504"/><text x="65.8777%" y="223.50">_int_realloc</text></g><g><title>unlink_chunk (8 samples, 0.02%)</title><rect x="80.0836%" y="197" width="0.0210%" height="15" fill="rgb(227,97,0)" fg:x="30447" fg:w="8"/><text x="80.3336%" y="207.50"></text></g><g><title>arena_for_chunk (4 samples, 0.01%)</title><rect x="80.1047%" y="213" width="0.0105%" height="15" fill="rgb(234,150,53)" fg:x="30455" fg:w="4"/><text x="80.3547%" y="223.50"></text></g><g><title>__GI___libc_realloc (6,155 samples, 16.19%)</title><rect x="63.9891%" y="229" width="16.1893%" height="15" fill="rgb(228,201,54)" fg:x="24328" fg:w="6155"/><text x="64.2391%" y="239.50">__GI___libc_realloc</text></g><g><title>checked_request2size (24 samples, 0.06%)</title><rect x="80.1152%" y="213" width="0.0631%" height="15" fill="rgb(222,22,37)" fg:x="30459" fg:w="24"/><text x="80.3652%" y="223.50"></text></g><g><title>__rdl_alloc (263 samples, 0.69%)</title><rect x="80.1783%" y="229" width="0.6918%" height="15" fill="rgb(237,53,32)" fg:x="30483" fg:w="263"/><text x="80.4283%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (220 samples, 0.58%)</title><rect x="80.2914%" y="213" width="0.5787%" height="15" fill="rgb(233,25,53)" fg:x="30526" fg:w="220"/><text x="80.5414%" y="223.50"></text></g><g><title>__rdl_realloc (586 samples, 1.54%)</title><rect x="80.8701%" y="229" width="1.5413%" height="15" fill="rgb(210,40,34)" fg:x="30746" fg:w="586"/><text x="81.1201%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (405 samples, 1.07%)</title><rect x="81.3462%" y="213" width="1.0653%" height="15" fill="rgb(241,220,44)" fg:x="30927" fg:w="405"/><text x="81.5962%" y="223.50"></text></g><g><title>__rust_alloc (138 samples, 0.36%)</title><rect x="82.4114%" y="229" width="0.3630%" height="15" fill="rgb(235,28,35)" fg:x="31332" fg:w="138"/><text x="82.6614%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10,049 samples, 26.43%)</title><rect x="57.0057%" y="261" width="26.4315%" height="15" fill="rgb(210,56,17)" fg:x="21673" fg:w="10049"/><text x="57.2557%" y="271.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_p..</text></g><g><title>alloc::raw_vec::finish_grow (8,819 samples, 23.20%)</title><rect x="60.2409%" y="245" width="23.1963%" height="15" fill="rgb(224,130,29)" fg:x="22903" fg:w="8819"/><text x="60.4909%" y="255.50">alloc::raw_vec::finish_grow</text></g><g><title>__rust_realloc (252 samples, 0.66%)</title><rect x="82.7744%" y="229" width="0.6628%" height="15" fill="rgb(235,212,8)" fg:x="31470" fg:w="252"/><text x="83.0244%" y="239.50"></text></g><g><title>__GI___libc_malloc (47 samples, 0.12%)</title><rect x="84.8260%" y="213" width="0.1236%" height="15" fill="rgb(223,33,50)" fg:x="32250" fg:w="47"/><text x="85.0760%" y="223.50"></text></g><g><title>tcache_get (22 samples, 0.06%)</title><rect x="84.8918%" y="197" width="0.0579%" height="15" fill="rgb(219,149,13)" fg:x="32275" fg:w="22"/><text x="85.1418%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (36 samples, 0.09%)</title><rect x="85.1864%" y="181" width="0.0947%" height="15" fill="rgb(250,156,29)" fg:x="32387" fg:w="36"/><text x="85.4364%" y="191.50"></text></g><g><title>_int_free (43 samples, 0.11%)</title><rect x="85.2863%" y="181" width="0.1131%" height="15" fill="rgb(216,193,19)" fg:x="32425" fg:w="43"/><text x="85.5363%" y="191.50"></text></g><g><title>tcache_put (11 samples, 0.03%)</title><rect x="85.3705%" y="165" width="0.0289%" height="15" fill="rgb(216,135,14)" fg:x="32457" fg:w="11"/><text x="85.6205%" y="175.50"></text></g><g><title>_int_malloc (165 samples, 0.43%)</title><rect x="85.3994%" y="181" width="0.4340%" height="15" fill="rgb(241,47,5)" fg:x="32468" fg:w="165"/><text x="85.6494%" y="191.50"></text></g><g><title>_int_realloc (303 samples, 0.80%)</title><rect x="85.0391%" y="197" width="0.7970%" height="15" fill="rgb(233,42,35)" fg:x="32331" fg:w="303"/><text x="85.2891%" y="207.50"></text></g><g><title>__GI___libc_realloc (339 samples, 0.89%)</title><rect x="84.9496%" y="213" width="0.8917%" height="15" fill="rgb(231,13,6)" fg:x="32297" fg:w="339"/><text x="85.1996%" y="223.50"></text></g><g><title>__rdl_alloc (15 samples, 0.04%)</title><rect x="85.8413%" y="213" width="0.0395%" height="15" fill="rgb(207,181,40)" fg:x="32636" fg:w="15"/><text x="86.0913%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.03%)</title><rect x="85.8518%" y="197" width="0.0289%" height="15" fill="rgb(254,173,49)" fg:x="32640" fg:w="11"/><text x="86.1018%" y="207.50"></text></g><g><title>__rdl_realloc (28 samples, 0.07%)</title><rect x="85.8807%" y="213" width="0.0736%" height="15" fill="rgb(221,1,38)" fg:x="32651" fg:w="28"/><text x="86.1307%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (22 samples, 0.06%)</title><rect x="85.8965%" y="197" width="0.0579%" height="15" fill="rgb(206,124,46)" fg:x="32657" fg:w="22"/><text x="86.1465%" y="207.50"></text></g><g><title>__rust_alloc (4 samples, 0.01%)</title><rect x="85.9544%" y="213" width="0.0105%" height="15" fill="rgb(249,21,11)" fg:x="32679" fg:w="4"/><text x="86.2044%" y="223.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (969 samples, 2.55%)</title><rect x="83.4372%" y="261" width="2.5487%" height="15" fill="rgb(222,201,40)" fg:x="31722" fg:w="969"/><text x="83.6872%" y="271.50">ma..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (553 samples, 1.45%)</title><rect x="84.5314%" y="245" width="1.4545%" height="15" fill="rgb(235,61,29)" fg:x="32138" fg:w="553"/><text x="84.7814%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (493 samples, 1.30%)</title><rect x="84.6892%" y="229" width="1.2967%" height="15" fill="rgb(219,207,3)" fg:x="32198" fg:w="493"/><text x="84.9392%" y="239.50"></text></g><g><title>__rust_realloc (8 samples, 0.02%)</title><rect x="85.9649%" y="213" width="0.0210%" height="15" fill="rgb(222,56,46)" fg:x="32683" fg:w="8"/><text x="86.2149%" y="223.50"></text></g><g><title>_int_free (4 samples, 0.01%)</title><rect x="86.3858%" y="181" width="0.0105%" height="15" fill="rgb(239,76,54)" fg:x="32843" fg:w="4"/><text x="86.6358%" y="191.50"></text></g><g><title>__GI___libc_realloc (24 samples, 0.06%)</title><rect x="86.3647%" y="213" width="0.0631%" height="15" fill="rgb(231,124,27)" fg:x="32835" fg:w="24"/><text x="86.6147%" y="223.50"></text></g><g><title>_int_realloc (21 samples, 0.06%)</title><rect x="86.3726%" y="197" width="0.0552%" height="15" fill="rgb(249,195,6)" fg:x="32838" fg:w="21"/><text x="86.6226%" y="207.50"></text></g><g><title>_int_malloc (12 samples, 0.03%)</title><rect x="86.3963%" y="181" width="0.0316%" height="15" fill="rgb(237,174,47)" fg:x="32847" fg:w="12"/><text x="86.6463%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.08%)</title><rect x="86.3489%" y="245" width="0.0815%" height="15" fill="rgb(206,201,31)" fg:x="32829" fg:w="31"/><text x="86.5989%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (29 samples, 0.08%)</title><rect x="86.3542%" y="229" width="0.0763%" height="15" fill="rgb(231,57,52)" fg:x="32831" fg:w="29"/><text x="86.6042%" y="239.50"></text></g><g><title>__GI___libc_malloc (44 samples, 0.12%)</title><rect x="87.9323%" y="197" width="0.1157%" height="15" fill="rgb(248,177,22)" fg:x="33431" fg:w="44"/><text x="88.1823%" y="207.50"></text></g><g><title>tcache_get (15 samples, 0.04%)</title><rect x="88.0086%" y="181" width="0.0395%" height="15" fill="rgb(215,211,37)" fg:x="33460" fg:w="15"/><text x="88.2586%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (36 samples, 0.09%)</title><rect x="88.2480%" y="165" width="0.0947%" height="15" fill="rgb(241,128,51)" fg:x="33551" fg:w="36"/><text x="88.4980%" y="175.50"></text></g><g><title>_int_free (32 samples, 0.08%)</title><rect x="88.3479%" y="165" width="0.0842%" height="15" fill="rgb(227,165,31)" fg:x="33589" fg:w="32"/><text x="88.5979%" y="175.50"></text></g><g><title>tcache_put (5 samples, 0.01%)</title><rect x="88.4189%" y="149" width="0.0132%" height="15" fill="rgb(228,167,24)" fg:x="33616" fg:w="5"/><text x="88.6689%" y="159.50"></text></g><g><title>_int_realloc (279 samples, 0.73%)</title><rect x="88.1059%" y="181" width="0.7338%" height="15" fill="rgb(228,143,12)" fg:x="33497" fg:w="279"/><text x="88.3559%" y="191.50"></text></g><g><title>_int_malloc (155 samples, 0.41%)</title><rect x="88.4321%" y="165" width="0.4077%" height="15" fill="rgb(249,149,8)" fg:x="33621" fg:w="155"/><text x="88.6821%" y="175.50"></text></g><g><title>__GI___libc_realloc (302 samples, 0.79%)</title><rect x="88.0481%" y="197" width="0.7943%" height="15" fill="rgb(243,35,44)" fg:x="33475" fg:w="302"/><text x="88.2981%" y="207.50"></text></g><g><title>__rdl_alloc (21 samples, 0.06%)</title><rect x="88.8424%" y="197" width="0.0552%" height="15" fill="rgb(246,89,9)" fg:x="33777" fg:w="21"/><text x="89.0924%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.04%)</title><rect x="88.8529%" y="181" width="0.0447%" height="15" fill="rgb(233,213,13)" fg:x="33781" fg:w="17"/><text x="89.1029%" y="191.50"></text></g><g><title>__rdl_realloc (21 samples, 0.06%)</title><rect x="88.8977%" y="197" width="0.0552%" height="15" fill="rgb(233,141,41)" fg:x="33798" fg:w="21"/><text x="89.1477%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (9 samples, 0.02%)</title><rect x="88.9292%" y="181" width="0.0237%" height="15" fill="rgb(239,167,4)" fg:x="33810" fg:w="9"/><text x="89.1792%" y="191.50"></text></g><g><title>__rust_alloc (6 samples, 0.02%)</title><rect x="88.9529%" y="197" width="0.0158%" height="15" fill="rgb(209,217,16)" fg:x="33819" fg:w="6"/><text x="89.2029%" y="207.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (1,135 samples, 2.99%)</title><rect x="85.9860%" y="261" width="2.9853%" height="15" fill="rgb(219,88,35)" fg:x="32691" fg:w="1135"/><text x="86.2360%" y="271.50">man..</text></g><g><title>mango_chess::move_generation::bishop_moves (966 samples, 2.54%)</title><rect x="86.4305%" y="245" width="2.5408%" height="15" fill="rgb(220,193,23)" fg:x="32860" fg:w="966"/><text x="86.6805%" y="255.50">ma..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (484 samples, 1.27%)</title><rect x="87.6983%" y="229" width="1.2730%" height="15" fill="rgb(230,90,52)" fg:x="33342" fg:w="484"/><text x="87.9483%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (437 samples, 1.15%)</title><rect x="87.8219%" y="213" width="1.1494%" height="15" fill="rgb(252,106,19)" fg:x="33389" fg:w="437"/><text x="88.0719%" y="223.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.01%)</title><rect x="90.7730%" y="213" width="0.0132%" height="15" fill="rgb(206,74,20)" fg:x="34511" fg:w="5"/><text x="91.0230%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (94 samples, 0.25%)</title><rect x="91.2465%" y="181" width="0.2472%" height="15" fill="rgb(230,138,44)" fg:x="34691" fg:w="94"/><text x="91.4965%" y="191.50"></text></g><g><title>__memmove_avx_unaligned (10 samples, 0.03%)</title><rect x="91.4937%" y="181" width="0.0263%" height="15" fill="rgb(235,182,43)" fg:x="34785" fg:w="10"/><text x="91.7437%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="91.8646%" y="165" width="0.0184%" height="15" fill="rgb(242,16,51)" fg:x="34926" fg:w="7"/><text x="92.1146%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="91.8646%" y="149" width="0.0184%" height="15" fill="rgb(248,9,4)" fg:x="34926" fg:w="7"/><text x="92.1146%" y="159.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="91.8646%" y="133" width="0.0184%" height="15" fill="rgb(210,31,22)" fg:x="34926" fg:w="7"/><text x="92.1146%" y="143.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="91.8646%" y="117" width="0.0184%" height="15" fill="rgb(239,54,39)" fg:x="34926" fg:w="7"/><text x="92.1146%" y="127.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="91.8646%" y="101" width="0.0184%" height="15" fill="rgb(230,99,41)" fg:x="34926" fg:w="7"/><text x="92.1146%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="91.8646%" y="85" width="0.0184%" height="15" fill="rgb(253,106,12)" fg:x="34926" fg:w="7"/><text x="92.1146%" y="95.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="91.8646%" y="69" width="0.0184%" height="15" fill="rgb(213,46,41)" fg:x="34926" fg:w="7"/><text x="92.1146%" y="79.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="91.8646%" y="53" width="0.0184%" height="15" fill="rgb(215,133,35)" fg:x="34926" fg:w="7"/><text x="92.1146%" y="63.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="91.8646%" y="37" width="0.0184%" height="15" fill="rgb(213,28,5)" fg:x="34926" fg:w="7"/><text x="92.1146%" y="47.50"></text></g><g><title>_int_free (146 samples, 0.38%)</title><rect x="91.5200%" y="181" width="0.3840%" height="15" fill="rgb(215,77,49)" fg:x="34795" fg:w="146"/><text x="91.7700%" y="191.50"></text></g><g><title>tcache_put (6 samples, 0.02%)</title><rect x="91.8883%" y="165" width="0.0158%" height="15" fill="rgb(248,100,22)" fg:x="34935" fg:w="6"/><text x="92.1383%" y="175.50"></text></g><g><title>alloc_perturb (4 samples, 0.01%)</title><rect x="92.5379%" y="165" width="0.0105%" height="15" fill="rgb(208,67,9)" fg:x="35182" fg:w="4"/><text x="92.7879%" y="175.50"></text></g><g><title>tcache_put (7 samples, 0.02%)</title><rect x="92.5564%" y="165" width="0.0184%" height="15" fill="rgb(219,133,21)" fg:x="35189" fg:w="7"/><text x="92.8064%" y="175.50"></text></g><g><title>_int_malloc (268 samples, 0.70%)</title><rect x="91.9040%" y="181" width="0.7049%" height="15" fill="rgb(246,46,29)" fg:x="34941" fg:w="268"/><text x="92.1540%" y="191.50"></text></g><g><title>unlink_chunk (13 samples, 0.03%)</title><rect x="92.5748%" y="165" width="0.0342%" height="15" fill="rgb(246,185,52)" fg:x="35196" fg:w="13"/><text x="92.8248%" y="175.50"></text></g><g><title>_int_realloc (627 samples, 1.65%)</title><rect x="90.9624%" y="197" width="1.6492%" height="15" fill="rgb(252,136,11)" fg:x="34583" fg:w="627"/><text x="91.2124%" y="207.50"></text></g><g><title>arena_for_chunk (4 samples, 0.01%)</title><rect x="92.6116%" y="197" width="0.0105%" height="15" fill="rgb(219,138,53)" fg:x="35210" fg:w="4"/><text x="92.8616%" y="207.50"></text></g><g><title>__GI___libc_realloc (702 samples, 1.85%)</title><rect x="90.7862%" y="213" width="1.8464%" height="15" fill="rgb(211,51,23)" fg:x="34516" fg:w="702"/><text x="91.0362%" y="223.50">_..</text></g><g><title>checked_request2size (4 samples, 0.01%)</title><rect x="92.6221%" y="197" width="0.0105%" height="15" fill="rgb(247,221,28)" fg:x="35214" fg:w="4"/><text x="92.8721%" y="207.50"></text></g><g><title>__rdl_alloc (4 samples, 0.01%)</title><rect x="92.6326%" y="213" width="0.0105%" height="15" fill="rgb(251,222,45)" fg:x="35218" fg:w="4"/><text x="92.8826%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.01%)</title><rect x="92.6326%" y="197" width="0.0105%" height="15" fill="rgb(217,162,53)" fg:x="35218" fg:w="4"/><text x="92.8826%" y="207.50"></text></g><g><title>__rdl_realloc (40 samples, 0.11%)</title><rect x="92.6432%" y="213" width="0.1052%" height="15" fill="rgb(229,93,14)" fg:x="35222" fg:w="40"/><text x="92.8932%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (32 samples, 0.08%)</title><rect x="92.6642%" y="197" width="0.0842%" height="15" fill="rgb(209,67,49)" fg:x="35230" fg:w="32"/><text x="92.9142%" y="207.50"></text></g><g><title>mango_chess::board::BoardState::square_is_attacked (29,714 samples, 78.16%)</title><rect x="14.6190%" y="277" width="78.1557%" height="15" fill="rgb(213,87,29)" fg:x="5558" fg:w="29714"/><text x="14.8690%" y="287.50">mango_chess::board::BoardState::square_is_attacked</text></g><g><title>mango_chess::move_generation::rook_moves (1,446 samples, 3.80%)</title><rect x="88.9713%" y="261" width="3.8034%" height="15" fill="rgb(205,151,52)" fg:x="33826" fg:w="1446"/><text x="89.2213%" y="271.50">mang..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (882 samples, 2.32%)</title><rect x="90.4548%" y="245" width="2.3199%" height="15" fill="rgb(253,215,39)" fg:x="34390" fg:w="882"/><text x="90.7048%" y="255.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (809 samples, 2.13%)</title><rect x="90.6468%" y="229" width="2.1279%" height="15" fill="rgb(221,220,41)" fg:x="34463" fg:w="809"/><text x="90.8968%" y="239.50">a..</text></g><g><title>__rust_realloc (10 samples, 0.03%)</title><rect x="92.7484%" y="213" width="0.0263%" height="15" fill="rgb(218,133,21)" fg:x="35262" fg:w="10"/><text x="92.9984%" y="223.50"></text></g><g><title>mango_chess::board::BoardState::unmake_move (963 samples, 2.53%)</title><rect x="92.7747%" y="277" width="2.5329%" height="15" fill="rgb(221,193,43)" fg:x="35272" fg:w="963"/><text x="93.0247%" y="287.50">ma..</text></g><g><title>mango_chess::engine::negamax (368 samples, 0.97%)</title><rect x="95.3076%" y="277" width="0.9679%" height="15" fill="rgb(240,128,52)" fg:x="36235" fg:w="368"/><text x="95.5576%" y="287.50"></text></g><g><title>__GI___libc_free (28 samples, 0.07%)</title><rect x="96.8674%" y="261" width="0.0736%" height="15" fill="rgb(253,114,12)" fg:x="36828" fg:w="28"/><text x="97.1174%" y="271.50"></text></g><g><title>_int_free (24 samples, 0.06%)</title><rect x="96.8779%" y="245" width="0.0631%" height="15" fill="rgb(215,223,47)" fg:x="36832" fg:w="24"/><text x="97.1279%" y="255.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.02%)</title><rect x="96.9410%" y="261" width="0.0158%" height="15" fill="rgb(248,225,23)" fg:x="36856" fg:w="6"/><text x="97.1910%" y="271.50"></text></g><g><title>__rust_alloc (5 samples, 0.01%)</title><rect x="96.9673%" y="261" width="0.0132%" height="15" fill="rgb(250,108,0)" fg:x="36866" fg:w="5"/><text x="97.2173%" y="271.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.03%)</title><rect x="97.1067%" y="229" width="0.0289%" height="15" fill="rgb(228,208,7)" fg:x="36919" fg:w="11"/><text x="97.3567%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14 samples, 0.04%)</title><rect x="97.2514%" y="197" width="0.0368%" height="15" fill="rgb(244,45,10)" fg:x="36974" fg:w="14"/><text x="97.5014%" y="207.50"></text></g><g><title>__memmove_avx_unaligned (4 samples, 0.01%)</title><rect x="97.2882%" y="197" width="0.0105%" height="15" fill="rgb(207,125,25)" fg:x="36988" fg:w="4"/><text x="97.5382%" y="207.50"></text></g><g><title>_int_free (36 samples, 0.09%)</title><rect x="97.2987%" y="197" width="0.0947%" height="15" fill="rgb(210,195,18)" fg:x="36992" fg:w="36"/><text x="97.5487%" y="207.50"></text></g><g><title>_int_realloc (133 samples, 0.35%)</title><rect x="97.1804%" y="213" width="0.3498%" height="15" fill="rgb(249,80,12)" fg:x="36947" fg:w="133"/><text x="97.4304%" y="223.50"></text></g><g><title>_int_malloc (52 samples, 0.14%)</title><rect x="97.3934%" y="197" width="0.1368%" height="15" fill="rgb(221,65,9)" fg:x="37028" fg:w="52"/><text x="97.6434%" y="207.50"></text></g><g><title>__GI___libc_realloc (151 samples, 0.40%)</title><rect x="97.1356%" y="229" width="0.3972%" height="15" fill="rgb(235,49,36)" fg:x="36930" fg:w="151"/><text x="97.3856%" y="239.50"></text></g><g><title>__rdl_alloc (4 samples, 0.01%)</title><rect x="97.5328%" y="229" width="0.0105%" height="15" fill="rgb(225,32,20)" fg:x="37081" fg:w="4"/><text x="97.7828%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.01%)</title><rect x="97.5328%" y="213" width="0.0105%" height="15" fill="rgb(215,141,46)" fg:x="37081" fg:w="4"/><text x="97.7828%" y="223.50"></text></g><g><title>__rdl_realloc (14 samples, 0.04%)</title><rect x="97.5433%" y="229" width="0.0368%" height="15" fill="rgb(250,160,47)" fg:x="37085" fg:w="14"/><text x="97.7933%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (9 samples, 0.02%)</title><rect x="97.5565%" y="213" width="0.0237%" height="15" fill="rgb(216,222,40)" fg:x="37090" fg:w="9"/><text x="97.8065%" y="223.50"></text></g><g><title>__rust_alloc (4 samples, 0.01%)</title><rect x="97.5802%" y="229" width="0.0105%" height="15" fill="rgb(234,217,39)" fg:x="37099" fg:w="4"/><text x="97.8302%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (236 samples, 0.62%)</title><rect x="96.9883%" y="261" width="0.6207%" height="15" fill="rgb(207,178,40)" fg:x="36874" fg:w="236"/><text x="97.2383%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (215 samples, 0.57%)</title><rect x="97.0436%" y="245" width="0.5655%" height="15" fill="rgb(221,136,13)" fg:x="36895" fg:w="215"/><text x="97.2936%" y="255.50"></text></g><g><title>__rust_realloc (7 samples, 0.02%)</title><rect x="97.5907%" y="229" width="0.0184%" height="15" fill="rgb(249,199,10)" fg:x="37103" fg:w="7"/><text x="97.8407%" y="239.50"></text></g><g><title>_int_realloc (16 samples, 0.04%)</title><rect x="97.8905%" y="197" width="0.0421%" height="15" fill="rgb(249,222,13)" fg:x="37217" fg:w="16"/><text x="98.1405%" y="207.50"></text></g><g><title>_int_malloc (7 samples, 0.02%)</title><rect x="97.9142%" y="181" width="0.0184%" height="15" fill="rgb(244,185,38)" fg:x="37226" fg:w="7"/><text x="98.1642%" y="191.50"></text></g><g><title>__GI___libc_realloc (19 samples, 0.05%)</title><rect x="97.8879%" y="213" width="0.0500%" height="15" fill="rgb(236,202,9)" fg:x="37216" fg:w="19"/><text x="98.1379%" y="223.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (130 samples, 0.34%)</title><rect x="97.6091%" y="261" width="0.3419%" height="15" fill="rgb(250,229,37)" fg:x="37110" fg:w="130"/><text x="97.8591%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (28 samples, 0.07%)</title><rect x="97.8774%" y="245" width="0.0736%" height="15" fill="rgb(206,174,23)" fg:x="37212" fg:w="28"/><text x="98.1274%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 0.07%)</title><rect x="97.8826%" y="229" width="0.0684%" height="15" fill="rgb(211,33,43)" fg:x="37214" fg:w="26"/><text x="98.1326%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (19 samples, 0.05%)</title><rect x="98.8269%" y="181" width="0.0500%" height="15" fill="rgb(245,58,50)" fg:x="37573" fg:w="19"/><text x="99.0769%" y="191.50"></text></g><g><title>_int_free (14 samples, 0.04%)</title><rect x="98.8821%" y="181" width="0.0368%" height="15" fill="rgb(244,68,36)" fg:x="37594" fg:w="14"/><text x="99.1321%" y="191.50"></text></g><g><title>_int_realloc (89 samples, 0.23%)</title><rect x="98.7743%" y="197" width="0.2341%" height="15" fill="rgb(232,229,15)" fg:x="37553" fg:w="89"/><text x="99.0243%" y="207.50"></text></g><g><title>_int_malloc (34 samples, 0.09%)</title><rect x="98.9190%" y="181" width="0.0894%" height="15" fill="rgb(254,30,23)" fg:x="37608" fg:w="34"/><text x="99.1690%" y="191.50"></text></g><g><title>__GI___libc_realloc (106 samples, 0.28%)</title><rect x="98.7401%" y="213" width="0.2788%" height="15" fill="rgb(235,160,14)" fg:x="37540" fg:w="106"/><text x="98.9901%" y="223.50"></text></g><g><title>checked_request2size (4 samples, 0.01%)</title><rect x="99.0084%" y="197" width="0.0105%" height="15" fill="rgb(212,155,44)" fg:x="37642" fg:w="4"/><text x="99.2584%" y="207.50"></text></g><g><title>__rdl_realloc (6 samples, 0.02%)</title><rect x="99.0189%" y="213" width="0.0158%" height="15" fill="rgb(226,2,50)" fg:x="37646" fg:w="6"/><text x="99.2689%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (5 samples, 0.01%)</title><rect x="99.0215%" y="197" width="0.0132%" height="15" fill="rgb(234,177,6)" fg:x="37647" fg:w="5"/><text x="99.2715%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (138 samples, 0.36%)</title><rect x="98.6770%" y="245" width="0.3630%" height="15" fill="rgb(217,24,9)" fg:x="37516" fg:w="138"/><text x="98.9270%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (124 samples, 0.33%)</title><rect x="98.7138%" y="229" width="0.3262%" height="15" fill="rgb(220,13,46)" fg:x="37530" fg:w="124"/><text x="98.9638%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.01%)</title><rect x="99.1978%" y="165" width="0.0105%" height="15" fill="rgb(239,221,27)" fg:x="37714" fg:w="4"/><text x="99.4478%" y="175.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.04%)</title><rect x="99.1925%" y="197" width="0.0368%" height="15" fill="rgb(222,198,25)" fg:x="37712" fg:w="14"/><text x="99.4425%" y="207.50"></text></g><g><title>_int_realloc (14 samples, 0.04%)</title><rect x="99.1925%" y="181" width="0.0368%" height="15" fill="rgb(211,99,13)" fg:x="37712" fg:w="14"/><text x="99.4425%" y="191.50"></text></g><g><title>_int_malloc (5 samples, 0.01%)</title><rect x="99.2162%" y="165" width="0.0132%" height="15" fill="rgb(232,111,31)" fg:x="37721" fg:w="5"/><text x="99.4662%" y="175.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (487 samples, 1.28%)</title><rect x="97.9510%" y="261" width="1.2809%" height="15" fill="rgb(245,82,37)" fg:x="37240" fg:w="487"/><text x="98.2010%" y="271.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (73 samples, 0.19%)</title><rect x="99.0400%" y="245" width="0.1920%" height="15" fill="rgb(227,149,46)" fg:x="37654" fg:w="73"/><text x="99.2900%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (18 samples, 0.05%)</title><rect x="99.1846%" y="229" width="0.0473%" height="15" fill="rgb(218,36,50)" fg:x="37709" fg:w="18"/><text x="99.4346%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.04%)</title><rect x="99.1899%" y="213" width="0.0421%" height="15" fill="rgb(226,80,48)" fg:x="37711" fg:w="16"/><text x="99.4399%" y="223.50"></text></g><g><title>_int_free (4 samples, 0.01%)</title><rect x="99.6686%" y="181" width="0.0105%" height="15" fill="rgb(238,224,15)" fg:x="37893" fg:w="4"/><text x="99.9186%" y="191.50"></text></g><g><title>__GI___libc_realloc (30 samples, 0.08%)</title><rect x="99.6370%" y="213" width="0.0789%" height="15" fill="rgb(241,136,10)" fg:x="37881" fg:w="30"/><text x="99.8870%" y="223.50"></text></g><g><title>_int_realloc (29 samples, 0.08%)</title><rect x="99.6397%" y="197" width="0.0763%" height="15" fill="rgb(208,32,45)" fg:x="37882" fg:w="29"/><text x="99.8897%" y="207.50"></text></g><g><title>_int_malloc (14 samples, 0.04%)</title><rect x="99.6791%" y="181" width="0.0368%" height="15" fill="rgb(207,135,9)" fg:x="37897" fg:w="14"/><text x="99.9291%" y="191.50"></text></g><g><title>mango_chess::engine::negamax (36,730 samples, 96.61%)</title><rect x="3.1116%" y="293" width="96.6096%" height="15" fill="rgb(206,86,44)" fg:x="1183" fg:w="36730"/><text x="3.3616%" y="303.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_player (1,310 samples, 3.45%)</title><rect x="96.2755%" y="277" width="3.4456%" height="15" fill="rgb(245,177,15)" fg:x="36603" fg:w="1310"/><text x="96.5255%" y="287.50">man..</text></g><g><title>mango_chess::move_generation::rook_moves (186 samples, 0.49%)</title><rect x="99.2320%" y="261" width="0.4892%" height="15" fill="rgb(206,64,50)" fg:x="37727" fg:w="186"/><text x="99.4820%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (35 samples, 0.09%)</title><rect x="99.6291%" y="245" width="0.0921%" height="15" fill="rgb(234,36,40)" fg:x="37878" fg:w="35"/><text x="99.8791%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (33 samples, 0.09%)</title><rect x="99.6344%" y="229" width="0.0868%" height="15" fill="rgb(213,64,8)" fg:x="37880" fg:w="33"/><text x="99.8844%" y="239.50"></text></g><g><title>__GI___libc_free (4 samples, 0.01%)</title><rect x="99.7633%" y="277" width="0.0105%" height="15" fill="rgb(210,75,36)" fg:x="37929" fg:w="4"/><text x="100.0133%" y="287.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.03%)</title><rect x="99.7817%" y="245" width="0.0289%" height="15" fill="rgb(229,88,21)" fg:x="37936" fg:w="11"/><text x="100.0317%" y="255.50"></text></g><g><title>_int_realloc (10 samples, 0.03%)</title><rect x="99.7843%" y="229" width="0.0263%" height="15" fill="rgb(252,204,47)" fg:x="37937" fg:w="10"/><text x="100.0343%" y="239.50"></text></g><g><title>_int_malloc (6 samples, 0.02%)</title><rect x="99.7948%" y="213" width="0.0158%" height="15" fill="rgb(208,77,27)" fg:x="37941" fg:w="6"/><text x="100.0448%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.04%)</title><rect x="99.7764%" y="277" width="0.0395%" height="15" fill="rgb(221,76,26)" fg:x="37934" fg:w="15"/><text x="100.0264%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.04%)</title><rect x="99.7791%" y="261" width="0.0368%" height="15" fill="rgb(225,139,18)" fg:x="37935" fg:w="14"/><text x="100.0291%" y="271.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (10 samples, 0.03%)</title><rect x="99.8159%" y="277" width="0.0263%" height="15" fill="rgb(230,137,11)" fg:x="37949" fg:w="10"/><text x="100.0659%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.01%)</title><rect x="99.8290%" y="261" width="0.0132%" height="15" fill="rgb(212,28,1)" fg:x="37954" fg:w="5"/><text x="100.0790%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.01%)</title><rect x="99.8290%" y="245" width="0.0132%" height="15" fill="rgb(248,164,17)" fg:x="37954" fg:w="5"/><text x="100.0790%" y="255.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.01%)</title><rect x="99.8317%" y="229" width="0.0105%" height="15" fill="rgb(222,171,42)" fg:x="37955" fg:w="4"/><text x="100.0817%" y="239.50"></text></g><g><title>_int_realloc (4 samples, 0.01%)</title><rect x="99.8317%" y="213" width="0.0105%" height="15" fill="rgb(243,84,45)" fg:x="37955" fg:w="4"/><text x="100.0817%" y="223.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.03%)</title><rect x="99.8948%" y="229" width="0.0289%" height="15" fill="rgb(252,49,23)" fg:x="37979" fg:w="11"/><text x="100.1448%" y="239.50"></text></g><g><title>_int_realloc (9 samples, 0.02%)</title><rect x="99.9000%" y="213" width="0.0237%" height="15" fill="rgb(215,19,7)" fg:x="37981" fg:w="9"/><text x="100.1500%" y="223.50"></text></g><g><title>_int_malloc (7 samples, 0.02%)</title><rect x="99.9053%" y="197" width="0.0184%" height="15" fill="rgb(238,81,41)" fg:x="37983" fg:w="7"/><text x="100.1553%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.03%)</title><rect x="99.8922%" y="261" width="0.0342%" height="15" fill="rgb(210,199,37)" fg:x="37978" fg:w="13"/><text x="100.1422%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.03%)</title><rect x="99.8922%" y="245" width="0.0342%" height="15" fill="rgb(244,192,49)" fg:x="37978" fg:w="13"/><text x="100.1422%" y="255.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (36 samples, 0.09%)</title><rect x="99.8422%" y="277" width="0.0947%" height="15" fill="rgb(226,211,11)" fg:x="37959" fg:w="36"/><text x="100.0922%" y="287.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (4 samples, 0.01%)</title><rect x="99.9264%" y="261" width="0.0105%" height="15" fill="rgb(236,162,54)" fg:x="37991" fg:w="4"/><text x="100.1764%" y="271.50"></text></g><g><title>mango_chess::engine::negamax (37,944 samples, 99.80%)</title><rect x="0.1683%" y="309" width="99.8027%" height="15" fill="rgb(220,229,9)" fg:x="64" fg:w="37944"/><text x="0.4183%" y="319.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_player (95 samples, 0.25%)</title><rect x="99.7212%" y="293" width="0.2499%" height="15" fill="rgb(250,87,22)" fg:x="37913" fg:w="95"/><text x="99.9712%" y="303.50"></text></g><g><title>mango_chess::move_generation::rook_moves (13 samples, 0.03%)</title><rect x="99.9369%" y="277" width="0.0342%" height="15" fill="rgb(239,43,17)" fg:x="37995" fg:w="13"/><text x="100.1869%" y="287.50"></text></g><g><title>mango_chess::engine::negamax (38,006 samples, 99.97%)</title><rect x="0.0079%" y="325" width="99.9658%" height="15" fill="rgb(231,177,25)" fg:x="3" fg:w="38006"/><text x="0.2579%" y="335.50">mango_chess::engine::negamax</text></g><g><title>mango_chess (38,013 samples, 99.98%)</title><rect x="0.0000%" y="629" width="99.9842%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="38013"/><text x="0.2500%" y="639.50">mango_chess</text></g><g><title>_start (38,012 samples, 99.98%)</title><rect x="0.0026%" y="613" width="99.9816%" height="15" fill="rgb(238,219,53)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="623.50">_start</text></g><g><title>__libc_start_main_impl (38,012 samples, 99.98%)</title><rect x="0.0026%" y="597" width="99.9816%" height="15" fill="rgb(232,167,36)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="607.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (38,012 samples, 99.98%)</title><rect x="0.0026%" y="581" width="99.9816%" height="15" fill="rgb(244,19,51)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="591.50">__libc_start_call_main</text></g><g><title>main (38,012 samples, 99.98%)</title><rect x="0.0026%" y="565" width="99.9816%" height="15" fill="rgb(224,6,22)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="575.50">main</text></g><g><title>std::rt::lang_start_internal (38,012 samples, 99.98%)</title><rect x="0.0026%" y="549" width="99.9816%" height="15" fill="rgb(224,145,5)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="559.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (38,012 samples, 99.98%)</title><rect x="0.0026%" y="533" width="99.9816%" height="15" fill="rgb(234,130,49)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (38,012 samples, 99.98%)</title><rect x="0.0026%" y="517" width="99.9816%" height="15" fill="rgb(254,6,2)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (38,012 samples, 99.98%)</title><rect x="0.0026%" y="501" width="99.9816%" height="15" fill="rgb(208,96,46)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="511.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (38,012 samples, 99.98%)</title><rect x="0.0026%" y="485" width="99.9816%" height="15" fill="rgb(239,3,39)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="495.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (38,012 samples, 99.98%)</title><rect x="0.0026%" y="469" width="99.9816%" height="15" fill="rgb(233,210,1)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="479.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (38,012 samples, 99.98%)</title><rect x="0.0026%" y="453" width="99.9816%" height="15" fill="rgb(244,137,37)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="463.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (38,012 samples, 99.98%)</title><rect x="0.0026%" y="437" width="99.9816%" height="15" fill="rgb(240,136,2)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="447.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (38,012 samples, 99.98%)</title><rect x="0.0026%" y="421" width="99.9816%" height="15" fill="rgb(239,18,37)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (38,012 samples, 99.98%)</title><rect x="0.0026%" y="405" width="99.9816%" height="15" fill="rgb(218,185,22)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="415.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38,012 samples, 99.98%)</title><rect x="0.0026%" y="389" width="99.9816%" height="15" fill="rgb(225,218,4)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mango_chess::main (38,012 samples, 99.98%)</title><rect x="0.0026%" y="373" width="99.9816%" height="15" fill="rgb(230,182,32)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="383.50">mango_chess::main</text></g><g><title>mango_chess::engine::search (38,012 samples, 99.98%)</title><rect x="0.0026%" y="357" width="99.9816%" height="15" fill="rgb(242,56,43)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="367.50">mango_chess::engine::search</text></g><g><title>mango_chess::engine::negamax (38,012 samples, 99.98%)</title><rect x="0.0026%" y="341" width="99.9816%" height="15" fill="rgb(233,99,24)" fg:x="1" fg:w="38012"/><text x="0.2526%" y="351.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_player (4 samples, 0.01%)</title><rect x="99.9737%" y="325" width="0.0105%" height="15" fill="rgb(234,209,42)" fg:x="38009" fg:w="4"/><text x="100.2237%" y="335.50"></text></g><g><title>all (38,019 samples, 100%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="38019"/><text x="0.2500%" y="655.50"></text></g><g><title>perf-exec (6 samples, 0.02%)</title><rect x="99.9842%" y="629" width="0.0158%" height="15" fill="rgb(245,203,43)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="639.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="613" width="0.0158%" height="15" fill="rgb(238,205,33)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="623.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="597" width="0.0158%" height="15" fill="rgb(231,56,7)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="607.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="581" width="0.0158%" height="15" fill="rgb(244,186,29)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="565" width="0.0158%" height="15" fill="rgb(234,111,31)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="549" width="0.0158%" height="15" fill="rgb(241,149,10)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="533" width="0.0158%" height="15" fill="rgb(249,206,44)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="517" width="0.0158%" height="15" fill="rgb(251,153,30)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="501" width="0.0158%" height="15" fill="rgb(239,152,38)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="485" width="0.0158%" height="15" fill="rgb(249,139,47)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="469" width="0.0158%" height="15" fill="rgb(244,64,35)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="453" width="0.0158%" height="15" fill="rgb(216,46,15)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9842%" y="437" width="0.0158%" height="15" fill="rgb(250,74,19)" fg:x="38013" fg:w="6"/><text x="100.2342%" y="447.50"></text></g></svg></svg>