<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="38384"><g><title>mango_chess::board::BoardState::make_move (9 samples, 0.02%)</title><rect x="0.0156%" y="277" width="0.0234%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="9"/><text x="0.2656%" y="287.50"></text></g><g><title>mango_chess::board::BoardState::unmake_move (25 samples, 0.07%)</title><rect x="0.0391%" y="277" width="0.0651%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="25"/><text x="0.2891%" y="287.50"></text></g><g><title>__GI___libc_free (22 samples, 0.06%)</title><rect x="0.4663%" y="261" width="0.0573%" height="15" fill="rgb(221,193,54)" fg:x="179" fg:w="22"/><text x="0.7163%" y="271.50"></text></g><g><title>_int_free (19 samples, 0.05%)</title><rect x="0.4742%" y="245" width="0.0495%" height="15" fill="rgb(248,212,6)" fg:x="182" fg:w="19"/><text x="0.7242%" y="255.50"></text></g><g><title>unlink_chunk (4 samples, 0.01%)</title><rect x="0.5132%" y="229" width="0.0104%" height="15" fill="rgb(208,68,35)" fg:x="197" fg:w="4"/><text x="0.7632%" y="239.50"></text></g><g><title>__rust_dealloc (5 samples, 0.01%)</title><rect x="0.5237%" y="261" width="0.0130%" height="15" fill="rgb(232,128,0)" fg:x="201" fg:w="5"/><text x="0.7737%" y="271.50"></text></g><g><title>mango_chess::board::BoardState::make_move (376 samples, 0.98%)</title><rect x="0.5367%" y="261" width="0.9796%" height="15" fill="rgb(207,160,47)" fg:x="206" fg:w="376"/><text x="0.7867%" y="271.50"></text></g><g><title>mango_chess::board::BoardState::unmake_move (463 samples, 1.21%)</title><rect x="1.5163%" y="261" width="1.2062%" height="15" fill="rgb(228,23,34)" fg:x="582" fg:w="463"/><text x="1.7663%" y="271.50"></text></g><g><title>mango_chess::engine::negamax (164 samples, 0.43%)</title><rect x="2.7225%" y="261" width="0.4273%" height="15" fill="rgb(218,30,26)" fg:x="1045" fg:w="164"/><text x="2.9725%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="20.6596%" y="229" width="0.0130%" height="15" fill="rgb(220,122,19)" fg:x="7930" fg:w="5"/><text x="20.9096%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="20.6596%" y="213" width="0.0130%" height="15" fill="rgb(250,228,42)" fg:x="7930" fg:w="5"/><text x="20.9096%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="20.6596%" y="197" width="0.0130%" height="15" fill="rgb(240,193,28)" fg:x="7930" fg:w="5"/><text x="20.9096%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="20.6596%" y="181" width="0.0130%" height="15" fill="rgb(216,20,37)" fg:x="7930" fg:w="5"/><text x="20.9096%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="20.6596%" y="165" width="0.0130%" height="15" fill="rgb(206,188,39)" fg:x="7930" fg:w="5"/><text x="20.9096%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="20.6596%" y="149" width="0.0130%" height="15" fill="rgb(217,207,13)" fg:x="7930" fg:w="5"/><text x="20.9096%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="20.6596%" y="133" width="0.0130%" height="15" fill="rgb(231,73,38)" fg:x="7930" fg:w="5"/><text x="20.9096%" y="143.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="22.3322%" y="197" width="0.0208%" height="15" fill="rgb(225,20,46)" fg:x="8572" fg:w="8"/><text x="22.5822%" y="207.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="22.3322%" y="181" width="0.0208%" height="15" fill="rgb(210,31,41)" fg:x="8572" fg:w="8"/><text x="22.5822%" y="191.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="22.3322%" y="165" width="0.0208%" height="15" fill="rgb(221,200,47)" fg:x="8572" fg:w="8"/><text x="22.5822%" y="175.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="22.3322%" y="149" width="0.0208%" height="15" fill="rgb(226,26,5)" fg:x="8572" fg:w="8"/><text x="22.5822%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="22.3322%" y="133" width="0.0208%" height="15" fill="rgb(249,33,26)" fg:x="8572" fg:w="8"/><text x="22.5822%" y="143.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="22.3322%" y="117" width="0.0208%" height="15" fill="rgb(235,183,28)" fg:x="8572" fg:w="8"/><text x="22.5822%" y="127.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="22.3322%" y="101" width="0.0208%" height="15" fill="rgb(221,5,38)" fg:x="8572" fg:w="8"/><text x="22.5822%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.3348%" y="85" width="0.0182%" height="15" fill="rgb(247,18,42)" fg:x="8573" fg:w="7"/><text x="22.5848%" y="95.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="22.3348%" y="69" width="0.0182%" height="15" fill="rgb(241,131,45)" fg:x="8573" fg:w="7"/><text x="22.5848%" y="79.50"></text></g><g><title>free_perturb (25 samples, 0.07%)</title><rect x="22.3531%" y="197" width="0.0651%" height="15" fill="rgb(249,31,29)" fg:x="8580" fg:w="25"/><text x="22.6031%" y="207.50"></text></g><g><title>_int_free (840 samples, 2.19%)</title><rect x="20.9254%" y="213" width="2.1884%" height="15" fill="rgb(225,111,53)" fg:x="8032" fg:w="840"/><text x="21.1754%" y="223.50">_..</text></g><g><title>unlink_chunk (267 samples, 0.70%)</title><rect x="22.4182%" y="197" width="0.6956%" height="15" fill="rgb(238,160,17)" fg:x="8605" fg:w="267"/><text x="22.6682%" y="207.50"></text></g><g><title>__GI___libc_free (955 samples, 2.49%)</title><rect x="20.6727%" y="229" width="2.4880%" height="15" fill="rgb(214,148,48)" fg:x="7935" fg:w="955"/><text x="20.9227%" y="239.50">__..</text></g><g><title>arena_for_chunk (18 samples, 0.05%)</title><rect x="23.1138%" y="213" width="0.0469%" height="15" fill="rgb(232,36,49)" fg:x="8872" fg:w="18"/><text x="23.3638%" y="223.50"></text></g><g><title>__rdl_dealloc (32 samples, 0.08%)</title><rect x="23.1607%" y="229" width="0.0834%" height="15" fill="rgb(209,103,24)" fg:x="8890" fg:w="32"/><text x="23.4107%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (32 samples, 0.08%)</title><rect x="23.1607%" y="213" width="0.0834%" height="15" fill="rgb(229,88,8)" fg:x="8890" fg:w="32"/><text x="23.4107%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,859 samples, 12.66%)</title><rect x="10.6711%" y="245" width="12.6589%" height="15" fill="rgb(213,181,19)" fg:x="4096" fg:w="4859"/><text x="10.9211%" y="255.50">&lt;core::iter::adapte..</text></g><g><title>__rust_dealloc (33 samples, 0.09%)</title><rect x="23.2441%" y="229" width="0.0860%" height="15" fill="rgb(254,191,54)" fg:x="8922" fg:w="33"/><text x="23.4941%" y="239.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="23.3300%" y="245" width="0.0339%" height="15" fill="rgb(241,83,37)" fg:x="8955" fg:w="13"/><text x="23.5800%" y="255.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="23.3300%" y="229" width="0.0339%" height="15" fill="rgb(233,36,39)" fg:x="8955" fg:w="13"/><text x="23.5800%" y="239.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="23.3300%" y="213" width="0.0339%" height="15" fill="rgb(226,3,54)" fg:x="8955" fg:w="13"/><text x="23.5800%" y="223.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="23.3326%" y="197" width="0.0313%" height="15" fill="rgb(245,192,40)" fg:x="8956" fg:w="12"/><text x="23.5826%" y="207.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="23.3326%" y="181" width="0.0313%" height="15" fill="rgb(238,167,29)" fg:x="8956" fg:w="12"/><text x="23.5826%" y="191.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="23.3326%" y="165" width="0.0313%" height="15" fill="rgb(232,182,51)" fg:x="8956" fg:w="12"/><text x="23.5826%" y="175.50"></text></g><g><title>[unknown] (12 samples, 0.03%)</title><rect x="23.3326%" y="149" width="0.0313%" height="15" fill="rgb(231,60,39)" fg:x="8956" fg:w="12"/><text x="23.5826%" y="159.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="23.3457%" y="133" width="0.0182%" height="15" fill="rgb(208,69,12)" fg:x="8961" fg:w="7"/><text x="23.5957%" y="143.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="23.3457%" y="117" width="0.0182%" height="15" fill="rgb(235,93,37)" fg:x="8961" fg:w="7"/><text x="23.5957%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="33.6781%" y="181" width="0.0156%" height="15" fill="rgb(213,116,39)" fg:x="12927" fg:w="6"/><text x="33.9281%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="33.6781%" y="165" width="0.0156%" height="15" fill="rgb(222,207,29)" fg:x="12927" fg:w="6"/><text x="33.9281%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="33.6781%" y="149" width="0.0156%" height="15" fill="rgb(206,96,30)" fg:x="12927" fg:w="6"/><text x="33.9281%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="33.6781%" y="133" width="0.0156%" height="15" fill="rgb(218,138,4)" fg:x="12927" fg:w="6"/><text x="33.9281%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="33.6781%" y="117" width="0.0156%" height="15" fill="rgb(250,191,14)" fg:x="12927" fg:w="6"/><text x="33.9281%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="33.6781%" y="101" width="0.0156%" height="15" fill="rgb(239,60,40)" fg:x="12927" fg:w="6"/><text x="33.9281%" y="111.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="33.6781%" y="85" width="0.0156%" height="15" fill="rgb(206,27,48)" fg:x="12927" fg:w="6"/><text x="33.9281%" y="95.50"></text></g><g><title>alloc_perturb (4 samples, 0.01%)</title><rect x="33.6937%" y="181" width="0.0104%" height="15" fill="rgb(225,35,8)" fg:x="12933" fg:w="4"/><text x="33.9437%" y="191.50"></text></g><g><title>checked_request2size (92 samples, 0.24%)</title><rect x="33.7041%" y="181" width="0.2397%" height="15" fill="rgb(250,213,24)" fg:x="12937" fg:w="92"/><text x="33.9541%" y="191.50"></text></g><g><title>tcache_put (24 samples, 0.06%)</title><rect x="33.9438%" y="181" width="0.0625%" height="15" fill="rgb(247,123,22)" fg:x="13029" fg:w="24"/><text x="34.1938%" y="191.50"></text></g><g><title>__GI___libc_malloc (2,824 samples, 7.36%)</title><rect x="27.5323%" y="213" width="7.3572%" height="15" fill="rgb(231,138,38)" fg:x="10568" fg:w="2824"/><text x="27.7823%" y="223.50">__GI___lib..</text></g><g><title>_int_malloc (2,588 samples, 6.74%)</title><rect x="28.1471%" y="197" width="6.7424%" height="15" fill="rgb(231,145,46)" fg:x="10804" fg:w="2588"/><text x="28.3971%" y="207.50">_int_mall..</text></g><g><title>unlink_chunk (339 samples, 0.88%)</title><rect x="34.0064%" y="181" width="0.8832%" height="15" fill="rgb(251,118,11)" fg:x="13053" fg:w="339"/><text x="34.2564%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="39.8916%" y="181" width="0.0104%" height="15" fill="rgb(217,147,25)" fg:x="15312" fg:w="4"/><text x="40.1416%" y="191.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="39.8916%" y="165" width="0.0104%" height="15" fill="rgb(247,81,37)" fg:x="15312" fg:w="4"/><text x="40.1416%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="39.8916%" y="149" width="0.0104%" height="15" fill="rgb(209,12,38)" fg:x="15312" fg:w="4"/><text x="40.1416%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="39.8916%" y="133" width="0.0104%" height="15" fill="rgb(227,1,9)" fg:x="15312" fg:w="4"/><text x="40.1416%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="39.8916%" y="117" width="0.0104%" height="15" fill="rgb(248,47,43)" fg:x="15312" fg:w="4"/><text x="40.1416%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="39.8916%" y="101" width="0.0104%" height="15" fill="rgb(221,10,30)" fg:x="15312" fg:w="4"/><text x="40.1416%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="39.8916%" y="85" width="0.0104%" height="15" fill="rgb(210,229,1)" fg:x="15312" fg:w="4"/><text x="40.1416%" y="95.50"></text></g><g><title>__memcpy_avx_unaligned_erms (381 samples, 0.99%)</title><rect x="39.9020%" y="181" width="0.9926%" height="15" fill="rgb(222,148,37)" fg:x="15316" fg:w="381"/><text x="40.1520%" y="191.50"></text></g><g><title>__memmove_avx_unaligned (42 samples, 0.11%)</title><rect x="40.8946%" y="181" width="0.1094%" height="15" fill="rgb(234,67,33)" fg:x="15697" fg:w="42"/><text x="41.1446%" y="191.50"></text></g><g><title>_int_free (883 samples, 2.30%)</title><rect x="41.0041%" y="181" width="2.3004%" height="15" fill="rgb(247,98,35)" fg:x="15739" fg:w="883"/><text x="41.2541%" y="191.50">_..</text></g><g><title>free_perturb (16 samples, 0.04%)</title><rect x="43.2628%" y="165" width="0.0417%" height="15" fill="rgb(247,138,52)" fg:x="16606" fg:w="16"/><text x="43.5128%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="46.9675%" y="165" width="0.0182%" height="15" fill="rgb(213,79,30)" fg:x="18028" fg:w="7"/><text x="47.2175%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="46.9675%" y="149" width="0.0182%" height="15" fill="rgb(246,177,23)" fg:x="18028" fg:w="7"/><text x="47.2175%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="46.9701%" y="133" width="0.0156%" height="15" fill="rgb(230,62,27)" fg:x="18029" fg:w="6"/><text x="47.2201%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="46.9701%" y="117" width="0.0156%" height="15" fill="rgb(216,154,8)" fg:x="18029" fg:w="6"/><text x="47.2201%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="46.9701%" y="101" width="0.0156%" height="15" fill="rgb(244,35,45)" fg:x="18029" fg:w="6"/><text x="47.2201%" y="111.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="46.9701%" y="85" width="0.0156%" height="15" fill="rgb(251,115,12)" fg:x="18029" fg:w="6"/><text x="47.2201%" y="95.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="46.9701%" y="69" width="0.0156%" height="15" fill="rgb(240,54,50)" fg:x="18029" fg:w="6"/><text x="47.2201%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="46.9727%" y="53" width="0.0130%" height="15" fill="rgb(233,84,52)" fg:x="18030" fg:w="5"/><text x="47.2227%" y="63.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="46.9727%" y="37" width="0.0130%" height="15" fill="rgb(207,117,47)" fg:x="18030" fg:w="5"/><text x="47.2227%" y="47.50"></text></g><g><title>alloc_perturb (9 samples, 0.02%)</title><rect x="46.9857%" y="165" width="0.0234%" height="15" fill="rgb(249,43,39)" fg:x="18035" fg:w="9"/><text x="47.2357%" y="175.50"></text></g><g><title>checked_request2size (58 samples, 0.15%)</title><rect x="47.0092%" y="165" width="0.1511%" height="15" fill="rgb(209,38,44)" fg:x="18044" fg:w="58"/><text x="47.2592%" y="175.50"></text></g><g><title>_int_malloc (1,832 samples, 4.77%)</title><rect x="43.3045%" y="181" width="4.7728%" height="15" fill="rgb(236,212,23)" fg:x="16622" fg:w="1832"/><text x="43.5545%" y="191.50">_int_m..</text></g><g><title>unlink_chunk (352 samples, 0.92%)</title><rect x="47.1603%" y="165" width="0.9170%" height="15" fill="rgb(242,79,21)" fg:x="18102" fg:w="352"/><text x="47.4103%" y="175.50"></text></g><g><title>_int_realloc (4,597 samples, 11.98%)</title><rect x="36.9529%" y="197" width="11.9763%" height="15" fill="rgb(211,96,35)" fg:x="14184" fg:w="4597"/><text x="37.2029%" y="207.50">_int_realloc</text></g><g><title>unlink_chunk (327 samples, 0.85%)</title><rect x="48.0773%" y="181" width="0.8519%" height="15" fill="rgb(253,215,40)" fg:x="18454" fg:w="327"/><text x="48.3273%" y="191.50"></text></g><g><title>arena_for_chunk (23 samples, 0.06%)</title><rect x="48.9292%" y="197" width="0.0599%" height="15" fill="rgb(211,81,21)" fg:x="18781" fg:w="23"/><text x="49.1792%" y="207.50"></text></g><g><title>__GI___libc_realloc (5,445 samples, 14.19%)</title><rect x="34.8895%" y="213" width="14.1856%" height="15" fill="rgb(208,190,38)" fg:x="13392" fg:w="5445"/><text x="35.1395%" y="223.50">__GI___libc_realloc</text></g><g><title>checked_request2size (33 samples, 0.09%)</title><rect x="48.9892%" y="197" width="0.0860%" height="15" fill="rgb(235,213,38)" fg:x="18804" fg:w="33"/><text x="49.2392%" y="207.50"></text></g><g><title>__rdl_alloc (214 samples, 0.56%)</title><rect x="49.0751%" y="213" width="0.5575%" height="15" fill="rgb(237,122,38)" fg:x="18837" fg:w="214"/><text x="49.3251%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (176 samples, 0.46%)</title><rect x="49.1741%" y="197" width="0.4585%" height="15" fill="rgb(244,218,35)" fg:x="18875" fg:w="176"/><text x="49.4241%" y="207.50"></text></g><g><title>__rdl_realloc (571 samples, 1.49%)</title><rect x="49.6327%" y="213" width="1.4876%" height="15" fill="rgb(240,68,47)" fg:x="19051" fg:w="571"/><text x="49.8827%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (412 samples, 1.07%)</title><rect x="50.0469%" y="197" width="1.0734%" height="15" fill="rgb(210,16,53)" fg:x="19210" fg:w="412"/><text x="50.2969%" y="207.50"></text></g><g><title>__rust_alloc (103 samples, 0.27%)</title><rect x="51.1203%" y="213" width="0.2683%" height="15" fill="rgb(235,124,12)" fg:x="19622" fg:w="103"/><text x="51.3703%" y="223.50"></text></g><g><title>mango_chess::evaluation::evaluate (18,643 samples, 48.57%)</title><rect x="3.1497%" y="261" width="48.5697%" height="15" fill="rgb(224,169,11)" fg:x="1209" fg:w="18643"/><text x="3.3997%" y="271.50">mango_chess::evaluation::evaluate</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10,884 samples, 28.36%)</title><rect x="23.3639%" y="245" width="28.3556%" height="15" fill="rgb(250,166,2)" fg:x="8968" fg:w="10884"/><text x="23.6139%" y="255.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push</text></g><g><title>alloc::raw_vec::finish_grow (10,010 samples, 26.08%)</title><rect x="25.6409%" y="229" width="26.0786%" height="15" fill="rgb(242,216,29)" fg:x="9842" fg:w="10010"/><text x="25.8909%" y="239.50">alloc::raw_vec::finish_grow</text></g><g><title>__rust_realloc (127 samples, 0.33%)</title><rect x="51.3886%" y="213" width="0.3309%" height="15" fill="rgb(230,116,27)" fg:x="19725" fg:w="127"/><text x="51.6386%" y="223.50"></text></g><g><title>__GI___libc_free (54 samples, 0.14%)</title><rect x="52.7980%" y="245" width="0.1407%" height="15" fill="rgb(228,99,48)" fg:x="20266" fg:w="54"/><text x="53.0480%" y="255.50"></text></g><g><title>_int_free (43 samples, 0.11%)</title><rect x="52.8267%" y="229" width="0.1120%" height="15" fill="rgb(253,11,6)" fg:x="20277" fg:w="43"/><text x="53.0767%" y="239.50"></text></g><g><title>unlink_chunk (6 samples, 0.02%)</title><rect x="52.9231%" y="213" width="0.0156%" height="15" fill="rgb(247,143,39)" fg:x="20314" fg:w="6"/><text x="53.1731%" y="223.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.03%)</title><rect x="52.9387%" y="245" width="0.0339%" height="15" fill="rgb(236,97,10)" fg:x="20320" fg:w="13"/><text x="53.1887%" y="255.50"></text></g><g><title>__rust_dealloc (10 samples, 0.03%)</title><rect x="52.9778%" y="245" width="0.0261%" height="15" fill="rgb(233,208,19)" fg:x="20335" fg:w="10"/><text x="53.2278%" y="255.50"></text></g><g><title>__GI___libc_malloc (37 samples, 0.10%)</title><rect x="53.1419%" y="213" width="0.0964%" height="15" fill="rgb(216,164,2)" fg:x="20398" fg:w="37"/><text x="53.3919%" y="223.50"></text></g><g><title>_int_malloc (34 samples, 0.09%)</title><rect x="53.1497%" y="197" width="0.0886%" height="15" fill="rgb(220,129,5)" fg:x="20401" fg:w="34"/><text x="53.3997%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (27 samples, 0.07%)</title><rect x="53.3868%" y="181" width="0.0703%" height="15" fill="rgb(242,17,10)" fg:x="20492" fg:w="27"/><text x="53.6368%" y="191.50"></text></g><g><title>tcache_put (4 samples, 0.01%)</title><rect x="53.5353%" y="165" width="0.0104%" height="15" fill="rgb(242,107,0)" fg:x="20549" fg:w="4"/><text x="53.7853%" y="175.50"></text></g><g><title>_int_free (34 samples, 0.09%)</title><rect x="53.4598%" y="181" width="0.0886%" height="15" fill="rgb(251,28,31)" fg:x="20520" fg:w="34"/><text x="53.7098%" y="191.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="53.7646%" y="165" width="0.0182%" height="15" fill="rgb(233,223,10)" fg:x="20637" fg:w="7"/><text x="54.0146%" y="175.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="53.7646%" y="149" width="0.0182%" height="15" fill="rgb(215,21,27)" fg:x="20637" fg:w="7"/><text x="54.0146%" y="159.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="53.7646%" y="133" width="0.0182%" height="15" fill="rgb(232,23,21)" fg:x="20637" fg:w="7"/><text x="54.0146%" y="143.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="53.7646%" y="117" width="0.0182%" height="15" fill="rgb(244,5,23)" fg:x="20637" fg:w="7"/><text x="54.0146%" y="127.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="53.7646%" y="101" width="0.0182%" height="15" fill="rgb(226,81,46)" fg:x="20637" fg:w="7"/><text x="54.0146%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="53.7646%" y="85" width="0.0182%" height="15" fill="rgb(247,70,30)" fg:x="20637" fg:w="7"/><text x="54.0146%" y="95.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="53.7646%" y="69" width="0.0182%" height="15" fill="rgb(212,68,19)" fg:x="20637" fg:w="7"/><text x="54.0146%" y="79.50"></text></g><g><title>_int_malloc (105 samples, 0.27%)</title><rect x="53.5484%" y="181" width="0.2736%" height="15" fill="rgb(240,187,13)" fg:x="20554" fg:w="105"/><text x="53.7984%" y="191.50"></text></g><g><title>unlink_chunk (15 samples, 0.04%)</title><rect x="53.7828%" y="165" width="0.0391%" height="15" fill="rgb(223,113,26)" fg:x="20644" fg:w="15"/><text x="54.0328%" y="175.50"></text></g><g><title>_int_realloc (203 samples, 0.53%)</title><rect x="53.3087%" y="197" width="0.5289%" height="15" fill="rgb(206,192,2)" fg:x="20462" fg:w="203"/><text x="53.5587%" y="207.50"></text></g><g><title>unlink_chunk (6 samples, 0.02%)</title><rect x="53.8219%" y="181" width="0.0156%" height="15" fill="rgb(241,108,4)" fg:x="20659" fg:w="6"/><text x="54.0719%" y="191.50"></text></g><g><title>__GI___libc_realloc (232 samples, 0.60%)</title><rect x="53.2383%" y="213" width="0.6044%" height="15" fill="rgb(247,173,49)" fg:x="20435" fg:w="232"/><text x="53.4883%" y="223.50"></text></g><g><title>__rdl_alloc (8 samples, 0.02%)</title><rect x="53.8427%" y="213" width="0.0208%" height="15" fill="rgb(224,114,35)" fg:x="20667" fg:w="8"/><text x="54.0927%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.02%)</title><rect x="53.8480%" y="197" width="0.0156%" height="15" fill="rgb(245,159,27)" fg:x="20669" fg:w="6"/><text x="54.0980%" y="207.50"></text></g><g><title>__rdl_realloc (11 samples, 0.03%)</title><rect x="53.8636%" y="213" width="0.0287%" height="15" fill="rgb(245,172,44)" fg:x="20675" fg:w="11"/><text x="54.1136%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (8 samples, 0.02%)</title><rect x="53.8714%" y="197" width="0.0208%" height="15" fill="rgb(236,23,11)" fg:x="20678" fg:w="8"/><text x="54.1214%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (354 samples, 0.92%)</title><rect x="53.0039%" y="245" width="0.9223%" height="15" fill="rgb(205,117,38)" fg:x="20345" fg:w="354"/><text x="53.2539%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (319 samples, 0.83%)</title><rect x="53.0950%" y="229" width="0.8311%" height="15" fill="rgb(237,72,25)" fg:x="20380" fg:w="319"/><text x="53.3450%" y="239.50"></text></g><g><title>__rust_realloc (10 samples, 0.03%)</title><rect x="53.9001%" y="213" width="0.0261%" height="15" fill="rgb(244,70,9)" fg:x="20689" fg:w="10"/><text x="54.1501%" y="223.50"></text></g><g><title>[unknown] (24 samples, 0.06%)</title><rect x="72.8793%" y="229" width="0.0625%" height="15" fill="rgb(217,125,39)" fg:x="27974" fg:w="24"/><text x="73.1293%" y="239.50"></text></g><g><title>[unknown] (24 samples, 0.06%)</title><rect x="72.8793%" y="213" width="0.0625%" height="15" fill="rgb(235,36,10)" fg:x="27974" fg:w="24"/><text x="73.1293%" y="223.50"></text></g><g><title>[unknown] (24 samples, 0.06%)</title><rect x="72.8793%" y="197" width="0.0625%" height="15" fill="rgb(251,123,47)" fg:x="27974" fg:w="24"/><text x="73.1293%" y="207.50"></text></g><g><title>[unknown] (24 samples, 0.06%)</title><rect x="72.8793%" y="181" width="0.0625%" height="15" fill="rgb(221,13,13)" fg:x="27974" fg:w="24"/><text x="73.1293%" y="191.50"></text></g><g><title>[unknown] (24 samples, 0.06%)</title><rect x="72.8793%" y="165" width="0.0625%" height="15" fill="rgb(238,131,9)" fg:x="27974" fg:w="24"/><text x="73.1293%" y="175.50"></text></g><g><title>[unknown] (23 samples, 0.06%)</title><rect x="72.8819%" y="149" width="0.0599%" height="15" fill="rgb(211,50,8)" fg:x="27975" fg:w="23"/><text x="73.1319%" y="159.50"></text></g><g><title>[unknown] (23 samples, 0.06%)</title><rect x="72.8819%" y="133" width="0.0599%" height="15" fill="rgb(245,182,24)" fg:x="27975" fg:w="23"/><text x="73.1319%" y="143.50"></text></g><g><title>[unknown] (14 samples, 0.04%)</title><rect x="72.9054%" y="117" width="0.0365%" height="15" fill="rgb(242,14,37)" fg:x="27984" fg:w="14"/><text x="73.1554%" y="127.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="72.9080%" y="101" width="0.0339%" height="15" fill="rgb(246,228,12)" fg:x="27985" fg:w="13"/><text x="73.1580%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="72.9288%" y="85" width="0.0130%" height="15" fill="rgb(213,55,15)" fg:x="27993" fg:w="5"/><text x="73.1788%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="72.9314%" y="69" width="0.0104%" height="15" fill="rgb(209,9,3)" fg:x="27994" fg:w="4"/><text x="73.1814%" y="79.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="72.9314%" y="53" width="0.0104%" height="15" fill="rgb(230,59,30)" fg:x="27994" fg:w="4"/><text x="73.1814%" y="63.50"></text></g><g><title>free_perturb (4 samples, 0.01%)</title><rect x="74.9713%" y="197" width="0.0104%" height="15" fill="rgb(209,121,21)" fg:x="28777" fg:w="4"/><text x="75.2213%" y="207.50"></text></g><g><title>tcache_put (18 samples, 0.05%)</title><rect x="74.9818%" y="197" width="0.0469%" height="15" fill="rgb(220,109,13)" fg:x="28781" fg:w="18"/><text x="75.2318%" y="207.50"></text></g><g><title>_int_free (794 samples, 2.07%)</title><rect x="73.5515%" y="213" width="2.0686%" height="15" fill="rgb(232,18,1)" fg:x="28232" fg:w="794"/><text x="73.8015%" y="223.50">_..</text></g><g><title>unlink_chunk (227 samples, 0.59%)</title><rect x="75.0287%" y="197" width="0.5914%" height="15" fill="rgb(215,41,42)" fg:x="28799" fg:w="227"/><text x="75.2787%" y="207.50"></text></g><g><title>__GI___libc_free (1,029 samples, 2.68%)</title><rect x="72.9419%" y="229" width="2.6808%" height="15" fill="rgb(224,123,36)" fg:x="27998" fg:w="1029"/><text x="73.1919%" y="239.50">__..</text></g><g><title>__rdl_dealloc (23 samples, 0.06%)</title><rect x="75.6227%" y="229" width="0.0599%" height="15" fill="rgb(240,125,3)" fg:x="29027" fg:w="23"/><text x="75.8727%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (23 samples, 0.06%)</title><rect x="75.6227%" y="213" width="0.0599%" height="15" fill="rgb(205,98,50)" fg:x="29027" fg:w="23"/><text x="75.8727%" y="223.50"></text></g><g><title>__rust_dealloc (97 samples, 0.25%)</title><rect x="75.6826%" y="229" width="0.2527%" height="15" fill="rgb(205,185,37)" fg:x="29050" fg:w="97"/><text x="75.9326%" y="239.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="81.9378%" y="165" width="0.0208%" height="15" fill="rgb(238,207,15)" fg:x="31451" fg:w="8"/><text x="82.1878%" y="175.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="81.9378%" y="149" width="0.0208%" height="15" fill="rgb(213,199,42)" fg:x="31451" fg:w="8"/><text x="82.1878%" y="159.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="81.9378%" y="133" width="0.0208%" height="15" fill="rgb(235,201,11)" fg:x="31451" fg:w="8"/><text x="82.1878%" y="143.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="81.9378%" y="117" width="0.0208%" height="15" fill="rgb(207,46,11)" fg:x="31451" fg:w="8"/><text x="82.1878%" y="127.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="81.9378%" y="101" width="0.0208%" height="15" fill="rgb(241,35,35)" fg:x="31451" fg:w="8"/><text x="82.1878%" y="111.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="81.9378%" y="85" width="0.0208%" height="15" fill="rgb(243,32,47)" fg:x="31451" fg:w="8"/><text x="82.1878%" y="95.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="81.9378%" y="69" width="0.0208%" height="15" fill="rgb(247,202,23)" fg:x="31451" fg:w="8"/><text x="82.1878%" y="79.50"></text></g><g><title>checked_request2size (17 samples, 0.04%)</title><rect x="81.9612%" y="165" width="0.0443%" height="15" fill="rgb(219,102,11)" fg:x="31460" fg:w="17"/><text x="82.2112%" y="175.50"></text></g><g><title>tcache_put (18 samples, 0.05%)</title><rect x="82.0055%" y="165" width="0.0469%" height="15" fill="rgb(243,110,44)" fg:x="31477" fg:w="18"/><text x="82.2555%" y="175.50"></text></g><g><title>_int_malloc (1,335 samples, 3.48%)</title><rect x="79.0017%" y="181" width="3.4780%" height="15" fill="rgb(222,74,54)" fg:x="30324" fg:w="1335"/><text x="79.2517%" y="191.50">_in..</text></g><g><title>unlink_chunk (164 samples, 0.43%)</title><rect x="82.0524%" y="165" width="0.4273%" height="15" fill="rgb(216,99,12)" fg:x="31495" fg:w="164"/><text x="82.3024%" y="175.50"></text></g><g><title>__GI___libc_malloc (1,474 samples, 3.84%)</title><rect x="78.6682%" y="197" width="3.8401%" height="15" fill="rgb(226,22,26)" fg:x="30196" fg:w="1474"/><text x="78.9182%" y="207.50">__GI..</text></g><g><title>tcache_get (10 samples, 0.03%)</title><rect x="82.4823%" y="181" width="0.0261%" height="15" fill="rgb(217,163,10)" fg:x="31660" fg:w="10"/><text x="82.7323%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (151 samples, 0.39%)</title><rect x="85.0485%" y="165" width="0.3934%" height="15" fill="rgb(213,25,53)" fg:x="32645" fg:w="151"/><text x="85.2985%" y="175.50"></text></g><g><title>__memmove_avx_unaligned (25 samples, 0.07%)</title><rect x="85.4419%" y="165" width="0.0651%" height="15" fill="rgb(252,105,26)" fg:x="32796" fg:w="25"/><text x="85.6919%" y="175.50"></text></g><g><title>_int_free (468 samples, 1.22%)</title><rect x="85.5070%" y="165" width="1.2193%" height="15" fill="rgb(220,39,43)" fg:x="32821" fg:w="468"/><text x="85.7570%" y="175.50"></text></g><g><title>free_perturb (6 samples, 0.02%)</title><rect x="86.7106%" y="149" width="0.0156%" height="15" fill="rgb(229,68,48)" fg:x="33283" fg:w="6"/><text x="86.9606%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="88.3988%" y="149" width="0.0104%" height="15" fill="rgb(252,8,32)" fg:x="33931" fg:w="4"/><text x="88.6488%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="88.3988%" y="133" width="0.0104%" height="15" fill="rgb(223,20,43)" fg:x="33931" fg:w="4"/><text x="88.6488%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="88.3988%" y="117" width="0.0104%" height="15" fill="rgb(229,81,49)" fg:x="33931" fg:w="4"/><text x="88.6488%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="88.3988%" y="101" width="0.0104%" height="15" fill="rgb(236,28,36)" fg:x="33931" fg:w="4"/><text x="88.6488%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="88.3988%" y="85" width="0.0104%" height="15" fill="rgb(249,185,26)" fg:x="33931" fg:w="4"/><text x="88.6488%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.01%)</title><rect x="88.3988%" y="69" width="0.0104%" height="15" fill="rgb(249,174,33)" fg:x="33931" fg:w="4"/><text x="88.6488%" y="79.50"></text></g><g><title>alloc_perturb (7 samples, 0.02%)</title><rect x="88.4092%" y="149" width="0.0182%" height="15" fill="rgb(233,201,37)" fg:x="33935" fg:w="7"/><text x="88.6592%" y="159.50"></text></g><g><title>checked_request2size (19 samples, 0.05%)</title><rect x="88.4275%" y="149" width="0.0495%" height="15" fill="rgb(221,78,26)" fg:x="33942" fg:w="19"/><text x="88.6775%" y="159.50"></text></g><g><title>_int_malloc (848 samples, 2.21%)</title><rect x="86.7262%" y="165" width="2.2093%" height="15" fill="rgb(250,127,30)" fg:x="33289" fg:w="848"/><text x="86.9762%" y="175.50">_..</text></g><g><title>unlink_chunk (176 samples, 0.46%)</title><rect x="88.4770%" y="149" width="0.4585%" height="15" fill="rgb(230,49,44)" fg:x="33961" fg:w="176"/><text x="88.7270%" y="159.50"></text></g><g><title>_int_realloc (2,231 samples, 5.81%)</title><rect x="83.4983%" y="181" width="5.8123%" height="15" fill="rgb(229,67,23)" fg:x="32050" fg:w="2231"/><text x="83.7483%" y="191.50">_int_re..</text></g><g><title>unlink_chunk (144 samples, 0.38%)</title><rect x="88.9355%" y="165" width="0.3752%" height="15" fill="rgb(249,83,47)" fg:x="34137" fg:w="144"/><text x="89.1855%" y="175.50"></text></g><g><title>arena_for_chunk (4 samples, 0.01%)</title><rect x="89.3107%" y="181" width="0.0104%" height="15" fill="rgb(215,43,3)" fg:x="34281" fg:w="4"/><text x="89.5607%" y="191.50"></text></g><g><title>__GI___libc_realloc (2,636 samples, 6.87%)</title><rect x="82.5083%" y="197" width="6.8674%" height="15" fill="rgb(238,154,13)" fg:x="31670" fg:w="2636"/><text x="82.7583%" y="207.50">__GI___li..</text></g><g><title>checked_request2size (21 samples, 0.05%)</title><rect x="89.3211%" y="181" width="0.0547%" height="15" fill="rgb(219,56,2)" fg:x="34285" fg:w="21"/><text x="89.5711%" y="191.50"></text></g><g><title>__rdl_alloc (88 samples, 0.23%)</title><rect x="89.3758%" y="197" width="0.2293%" height="15" fill="rgb(233,0,4)" fg:x="34306" fg:w="88"/><text x="89.6258%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (61 samples, 0.16%)</title><rect x="89.4461%" y="181" width="0.1589%" height="15" fill="rgb(235,30,7)" fg:x="34333" fg:w="61"/><text x="89.6961%" y="191.50"></text></g><g><title>__rdl_realloc (279 samples, 0.73%)</title><rect x="89.6050%" y="197" width="0.7269%" height="15" fill="rgb(250,79,13)" fg:x="34394" fg:w="279"/><text x="89.8550%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (216 samples, 0.56%)</title><rect x="89.7692%" y="181" width="0.5627%" height="15" fill="rgb(211,146,34)" fg:x="34457" fg:w="216"/><text x="90.0192%" y="191.50"></text></g><g><title>__rust_alloc (29 samples, 0.08%)</title><rect x="90.3319%" y="197" width="0.0756%" height="15" fill="rgb(228,22,38)" fg:x="34673" fg:w="29"/><text x="90.5819%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5,649 samples, 14.72%)</title><rect x="75.9353%" y="229" width="14.7171%" height="15" fill="rgb(235,168,5)" fg:x="29147" fg:w="5649"/><text x="76.1853%" y="239.50">alloc::raw_vec::RawVec..</text></g><g><title>alloc::raw_vec::finish_grow (5,034 samples, 13.11%)</title><rect x="77.5375%" y="213" width="13.1148%" height="15" fill="rgb(221,155,16)" fg:x="29762" fg:w="5034"/><text x="77.7875%" y="223.50">alloc::raw_vec::fini..</text></g><g><title>__rust_realloc (94 samples, 0.24%)</title><rect x="90.4075%" y="197" width="0.2449%" height="15" fill="rgb(215,215,53)" fg:x="34702" fg:w="94"/><text x="90.6575%" y="207.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.02%)</title><rect x="91.1995%" y="181" width="0.0234%" height="15" fill="rgb(223,4,10)" fg:x="35006" fg:w="9"/><text x="91.4495%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.03%)</title><rect x="91.2906%" y="149" width="0.0261%" height="15" fill="rgb(234,103,6)" fg:x="35041" fg:w="10"/><text x="91.5406%" y="159.50"></text></g><g><title>_int_free (39 samples, 0.10%)</title><rect x="91.3167%" y="149" width="0.1016%" height="15" fill="rgb(227,97,0)" fg:x="35051" fg:w="39"/><text x="91.5667%" y="159.50"></text></g><g><title>tcache_put (6 samples, 0.02%)</title><rect x="91.4027%" y="133" width="0.0156%" height="15" fill="rgb(234,150,53)" fg:x="35084" fg:w="6"/><text x="91.6527%" y="143.50"></text></g><g><title>_int_realloc (164 samples, 0.43%)</title><rect x="91.2542%" y="165" width="0.4273%" height="15" fill="rgb(228,201,54)" fg:x="35027" fg:w="164"/><text x="91.5042%" y="175.50"></text></g><g><title>_int_malloc (101 samples, 0.26%)</title><rect x="91.4183%" y="149" width="0.2631%" height="15" fill="rgb(222,22,37)" fg:x="35090" fg:w="101"/><text x="91.6683%" y="159.50"></text></g><g><title>unlink_chunk (12 samples, 0.03%)</title><rect x="91.6502%" y="133" width="0.0313%" height="15" fill="rgb(237,53,32)" fg:x="35179" fg:w="12"/><text x="91.9002%" y="143.50"></text></g><g><title>__GI___libc_realloc (177 samples, 0.46%)</title><rect x="91.2229%" y="181" width="0.4611%" height="15" fill="rgb(233,25,53)" fg:x="35015" fg:w="177"/><text x="91.4729%" y="191.50"></text></g><g><title>__rdl_alloc (15 samples, 0.04%)</title><rect x="91.6840%" y="181" width="0.0391%" height="15" fill="rgb(210,40,34)" fg:x="35192" fg:w="15"/><text x="91.9340%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.03%)</title><rect x="91.6892%" y="165" width="0.0339%" height="15" fill="rgb(241,220,44)" fg:x="35194" fg:w="13"/><text x="91.9392%" y="175.50"></text></g><g><title>__rdl_realloc (10 samples, 0.03%)</title><rect x="91.7231%" y="181" width="0.0261%" height="15" fill="rgb(235,28,35)" fg:x="35207" fg:w="10"/><text x="91.9731%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (5 samples, 0.01%)</title><rect x="91.7361%" y="165" width="0.0130%" height="15" fill="rgb(210,56,17)" fg:x="35212" fg:w="5"/><text x="91.9861%" y="175.50"></text></g><g><title>__rust_alloc (4 samples, 0.01%)</title><rect x="91.7492%" y="181" width="0.0104%" height="15" fill="rgb(224,130,29)" fg:x="35217" fg:w="4"/><text x="91.9992%" y="191.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (429 samples, 1.12%)</title><rect x="90.6524%" y="229" width="1.1177%" height="15" fill="rgb(235,212,8)" fg:x="34796" fg:w="429"/><text x="90.9024%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (266 samples, 0.69%)</title><rect x="91.0770%" y="213" width="0.6930%" height="15" fill="rgb(223,33,50)" fg:x="34959" fg:w="266"/><text x="91.3270%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (234 samples, 0.61%)</title><rect x="91.1604%" y="197" width="0.6096%" height="15" fill="rgb(219,149,13)" fg:x="34991" fg:w="234"/><text x="91.4104%" y="207.50"></text></g><g><title>__rust_realloc (4 samples, 0.01%)</title><rect x="91.7596%" y="181" width="0.0104%" height="15" fill="rgb(250,156,29)" fg:x="35221" fg:w="4"/><text x="92.0096%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.01%)</title><rect x="91.9003%" y="213" width="0.0130%" height="15" fill="rgb(216,193,19)" fg:x="35275" fg:w="5"/><text x="92.1503%" y="223.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.06%)</title><rect x="92.5646%" y="165" width="0.0599%" height="15" fill="rgb(216,135,14)" fg:x="35530" fg:w="23"/><text x="92.8146%" y="175.50"></text></g><g><title>tcache_get (8 samples, 0.02%)</title><rect x="92.6037%" y="149" width="0.0208%" height="15" fill="rgb(241,47,5)" fg:x="35545" fg:w="8"/><text x="92.8537%" y="159.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.03%)</title><rect x="92.7470%" y="133" width="0.0261%" height="15" fill="rgb(233,42,35)" fg:x="35600" fg:w="10"/><text x="92.9970%" y="143.50"></text></g><g><title>_int_free (26 samples, 0.07%)</title><rect x="92.7730%" y="133" width="0.0677%" height="15" fill="rgb(231,13,6)" fg:x="35610" fg:w="26"/><text x="93.0230%" y="143.50"></text></g><g><title>tcache_put (9 samples, 0.02%)</title><rect x="92.8173%" y="117" width="0.0234%" height="15" fill="rgb(207,181,40)" fg:x="35627" fg:w="9"/><text x="93.0673%" y="127.50"></text></g><g><title>_int_malloc (97 samples, 0.25%)</title><rect x="92.8408%" y="133" width="0.2527%" height="15" fill="rgb(254,173,49)" fg:x="35636" fg:w="97"/><text x="93.0908%" y="143.50"></text></g><g><title>unlink_chunk (15 samples, 0.04%)</title><rect x="93.0544%" y="117" width="0.0391%" height="15" fill="rgb(221,1,38)" fg:x="35718" fg:w="15"/><text x="93.3044%" y="127.50"></text></g><g><title>__GI___libc_realloc (181 samples, 0.47%)</title><rect x="92.6245%" y="165" width="0.4716%" height="15" fill="rgb(206,124,46)" fg:x="35553" fg:w="181"/><text x="92.8745%" y="175.50"></text></g><g><title>_int_realloc (158 samples, 0.41%)</title><rect x="92.6845%" y="149" width="0.4116%" height="15" fill="rgb(249,21,11)" fg:x="35576" fg:w="158"/><text x="92.9345%" y="159.50"></text></g><g><title>__rdl_alloc (10 samples, 0.03%)</title><rect x="93.0961%" y="165" width="0.0261%" height="15" fill="rgb(222,201,40)" fg:x="35734" fg:w="10"/><text x="93.3461%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.02%)</title><rect x="93.0987%" y="149" width="0.0234%" height="15" fill="rgb(235,61,29)" fg:x="35735" fg:w="9"/><text x="93.3487%" y="159.50"></text></g><g><title>__rdl_realloc (13 samples, 0.03%)</title><rect x="93.1221%" y="165" width="0.0339%" height="15" fill="rgb(219,207,3)" fg:x="35744" fg:w="13"/><text x="93.3721%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 0.02%)</title><rect x="93.1404%" y="149" width="0.0156%" height="15" fill="rgb(222,56,46)" fg:x="35751" fg:w="6"/><text x="93.3904%" y="159.50"></text></g><g><title>__rust_alloc (8 samples, 0.02%)</title><rect x="93.1560%" y="165" width="0.0208%" height="15" fill="rgb(239,76,54)" fg:x="35757" fg:w="8"/><text x="93.4060%" y="175.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (543 samples, 1.41%)</title><rect x="91.7700%" y="229" width="1.4147%" height="15" fill="rgb(231,124,27)" fg:x="35225" fg:w="543"/><text x="92.0200%" y="239.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (488 samples, 1.27%)</title><rect x="91.9133%" y="213" width="1.2714%" height="15" fill="rgb(249,195,6)" fg:x="35280" fg:w="488"/><text x="92.1633%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (288 samples, 0.75%)</title><rect x="92.4343%" y="197" width="0.7503%" height="15" fill="rgb(237,174,47)" fg:x="35480" fg:w="288"/><text x="92.6843%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (259 samples, 0.67%)</title><rect x="92.5099%" y="181" width="0.6748%" height="15" fill="rgb(206,201,31)" fg:x="35509" fg:w="259"/><text x="92.7599%" y="191.50"></text></g><g><title>_int_free (16 samples, 0.04%)</title><rect x="93.6797%" y="149" width="0.0417%" height="15" fill="rgb(231,57,52)" fg:x="35958" fg:w="16"/><text x="93.9297%" y="159.50"></text></g><g><title>_int_malloc (31 samples, 0.08%)</title><rect x="93.7213%" y="149" width="0.0808%" height="15" fill="rgb(248,177,22)" fg:x="35974" fg:w="31"/><text x="93.9713%" y="159.50"></text></g><g><title>unlink_chunk (7 samples, 0.02%)</title><rect x="93.7839%" y="133" width="0.0182%" height="15" fill="rgb(215,211,37)" fg:x="35998" fg:w="7"/><text x="94.0339%" y="143.50"></text></g><g><title>_int_realloc (76 samples, 0.20%)</title><rect x="93.6354%" y="165" width="0.1980%" height="15" fill="rgb(241,128,51)" fg:x="35941" fg:w="76"/><text x="93.8854%" y="175.50"></text></g><g><title>unlink_chunk (12 samples, 0.03%)</title><rect x="93.8021%" y="149" width="0.0313%" height="15" fill="rgb(227,165,31)" fg:x="36005" fg:w="12"/><text x="94.0521%" y="159.50"></text></g><g><title>__GI___libc_realloc (96 samples, 0.25%)</title><rect x="93.5859%" y="181" width="0.2501%" height="15" fill="rgb(228,167,24)" fg:x="35922" fg:w="96"/><text x="93.8359%" y="191.50"></text></g><g><title>__rdl_realloc (16 samples, 0.04%)</title><rect x="93.8360%" y="181" width="0.0417%" height="15" fill="rgb(228,143,12)" fg:x="36018" fg:w="16"/><text x="94.0860%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (10 samples, 0.03%)</title><rect x="93.8516%" y="165" width="0.0261%" height="15" fill="rgb(249,149,8)" fg:x="36024" fg:w="10"/><text x="94.1016%" y="175.50"></text></g><g><title>mango_chess::board::BoardState::is_valid_move (15,343 samples, 39.97%)</title><rect x="53.9261%" y="245" width="39.9724%" height="15" fill="rgb(243,35,44)" fg:x="20699" fg:w="15343"/><text x="54.1761%" y="255.50">mango_chess::board::BoardState::is_valid_move</text></g><g><title>mango_chess::move_generation::rook_moves (274 samples, 0.71%)</title><rect x="93.1847%" y="229" width="0.7138%" height="15" fill="rgb(246,89,9)" fg:x="35768" fg:w="274"/><text x="93.4347%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (144 samples, 0.38%)</title><rect x="93.5233%" y="213" width="0.3752%" height="15" fill="rgb(233,213,13)" fg:x="35898" fg:w="144"/><text x="93.7733%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (134 samples, 0.35%)</title><rect x="93.5494%" y="197" width="0.3491%" height="15" fill="rgb(233,141,41)" fg:x="35908" fg:w="134"/><text x="93.7994%" y="207.50"></text></g><g><title>__rust_realloc (8 samples, 0.02%)</title><rect x="93.8777%" y="181" width="0.0208%" height="15" fill="rgb(239,167,4)" fg:x="36034" fg:w="8"/><text x="94.1277%" y="191.50"></text></g><g><title>mango_chess::board::BoardState::make_move (414 samples, 1.08%)</title><rect x="93.8985%" y="245" width="1.0786%" height="15" fill="rgb(209,217,16)" fg:x="36042" fg:w="414"/><text x="94.1485%" y="255.50"></text></g><g><title>mango_chess::board::BoardState::unmake_move (453 samples, 1.18%)</title><rect x="94.9771%" y="245" width="1.1802%" height="15" fill="rgb(219,88,35)" fg:x="36456" fg:w="453"/><text x="95.2271%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.02%)</title><rect x="96.3631%" y="165" width="0.0156%" height="15" fill="rgb(220,193,23)" fg:x="36988" fg:w="6"/><text x="96.6131%" y="175.50"></text></g><g><title>_int_free (4 samples, 0.01%)</title><rect x="96.3787%" y="165" width="0.0104%" height="15" fill="rgb(230,90,52)" fg:x="36994" fg:w="4"/><text x="96.6287%" y="175.50"></text></g><g><title>__GI___libc_realloc (35 samples, 0.09%)</title><rect x="96.3422%" y="197" width="0.0912%" height="15" fill="rgb(252,106,19)" fg:x="36980" fg:w="35"/><text x="96.5922%" y="207.50"></text></g><g><title>_int_realloc (32 samples, 0.08%)</title><rect x="96.3500%" y="181" width="0.0834%" height="15" fill="rgb(206,74,20)" fg:x="36983" fg:w="32"/><text x="96.6000%" y="191.50"></text></g><g><title>_int_malloc (17 samples, 0.04%)</title><rect x="96.3891%" y="165" width="0.0443%" height="15" fill="rgb(230,138,44)" fg:x="36998" fg:w="17"/><text x="96.6391%" y="175.50"></text></g><g><title>unlink_chunk (6 samples, 0.02%)</title><rect x="96.4178%" y="149" width="0.0156%" height="15" fill="rgb(235,182,43)" fg:x="37009" fg:w="6"/><text x="96.6678%" y="159.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (107 samples, 0.28%)</title><rect x="96.1573%" y="245" width="0.2788%" height="15" fill="rgb(242,16,51)" fg:x="36909" fg:w="107"/><text x="96.4073%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (37 samples, 0.10%)</title><rect x="96.3396%" y="229" width="0.0964%" height="15" fill="rgb(248,9,4)" fg:x="36979" fg:w="37"/><text x="96.5896%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (36 samples, 0.09%)</title><rect x="96.3422%" y="213" width="0.0938%" height="15" fill="rgb(210,31,22)" fg:x="36980" fg:w="36"/><text x="96.5922%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (17 samples, 0.04%)</title><rect x="96.9961%" y="165" width="0.0443%" height="15" fill="rgb(239,54,39)" fg:x="37231" fg:w="17"/><text x="97.2461%" y="175.50"></text></g><g><title>_int_free (7 samples, 0.02%)</title><rect x="97.0456%" y="165" width="0.0182%" height="15" fill="rgb(230,99,41)" fg:x="37250" fg:w="7"/><text x="97.2956%" y="175.50"></text></g><g><title>_int_malloc (48 samples, 0.13%)</title><rect x="97.0639%" y="165" width="0.1251%" height="15" fill="rgb(253,106,12)" fg:x="37257" fg:w="48"/><text x="97.3139%" y="175.50"></text></g><g><title>unlink_chunk (16 samples, 0.04%)</title><rect x="97.1472%" y="149" width="0.0417%" height="15" fill="rgb(213,46,41)" fg:x="37289" fg:w="16"/><text x="97.3972%" y="159.50"></text></g><g><title>_int_realloc (78 samples, 0.20%)</title><rect x="96.9883%" y="181" width="0.2032%" height="15" fill="rgb(215,133,35)" fg:x="37228" fg:w="78"/><text x="97.2383%" y="191.50"></text></g><g><title>__GI___libc_realloc (87 samples, 0.23%)</title><rect x="96.9675%" y="197" width="0.2267%" height="15" fill="rgb(213,28,5)" fg:x="37220" fg:w="87"/><text x="97.2175%" y="207.50"></text></g><g><title>__rdl_realloc (7 samples, 0.02%)</title><rect x="97.1941%" y="197" width="0.0182%" height="15" fill="rgb(215,77,49)" fg:x="37307" fg:w="7"/><text x="97.4441%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 0.02%)</title><rect x="97.1967%" y="181" width="0.0156%" height="15" fill="rgb(248,100,22)" fg:x="37308" fg:w="6"/><text x="97.4467%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (112 samples, 0.29%)</title><rect x="96.9232%" y="229" width="0.2918%" height="15" fill="rgb(208,67,9)" fg:x="37203" fg:w="112"/><text x="97.1732%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (101 samples, 0.26%)</title><rect x="96.9519%" y="213" width="0.2631%" height="15" fill="rgb(219,133,21)" fg:x="37214" fg:w="101"/><text x="97.2019%" y="223.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (337 samples, 0.88%)</title><rect x="96.4360%" y="245" width="0.8780%" height="15" fill="rgb(246,46,29)" fg:x="37016" fg:w="337"/><text x="96.6860%" y="255.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (38 samples, 0.10%)</title><rect x="97.2150%" y="229" width="0.0990%" height="15" fill="rgb(246,185,52)" fg:x="37315" fg:w="38"/><text x="97.4650%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.01%)</title><rect x="97.3036%" y="213" width="0.0104%" height="15" fill="rgb(252,136,11)" fg:x="37349" fg:w="4"/><text x="97.5536%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="97.3036%" y="197" width="0.0104%" height="15" fill="rgb(219,138,53)" fg:x="37349" fg:w="4"/><text x="97.5536%" y="207.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.01%)</title><rect x="97.3036%" y="181" width="0.0104%" height="15" fill="rgb(211,51,23)" fg:x="37349" fg:w="4"/><text x="97.5536%" y="191.50"></text></g><g><title>_int_realloc (4 samples, 0.01%)</title><rect x="97.3036%" y="165" width="0.0104%" height="15" fill="rgb(247,221,28)" fg:x="37349" fg:w="4"/><text x="97.5536%" y="175.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.01%)</title><rect x="97.4964%" y="165" width="0.0104%" height="15" fill="rgb(251,222,45)" fg:x="37423" fg:w="4"/><text x="97.7464%" y="175.50"></text></g><g><title>__GI___libc_realloc (21 samples, 0.05%)</title><rect x="97.4885%" y="197" width="0.0547%" height="15" fill="rgb(217,162,53)" fg:x="37420" fg:w="21"/><text x="97.7385%" y="207.50"></text></g><g><title>_int_realloc (20 samples, 0.05%)</title><rect x="97.4911%" y="181" width="0.0521%" height="15" fill="rgb(229,93,14)" fg:x="37421" fg:w="20"/><text x="97.7411%" y="191.50"></text></g><g><title>_int_malloc (14 samples, 0.04%)</title><rect x="97.5068%" y="165" width="0.0365%" height="15" fill="rgb(209,67,49)" fg:x="37427" fg:w="14"/><text x="97.7568%" y="175.50"></text></g><g><title>mango_chess::engine::negamax (37,402 samples, 97.44%)</title><rect x="0.1042%" y="277" width="97.4416%" height="15" fill="rgb(213,87,29)" fg:x="40" fg:w="37402"/><text x="0.3542%" y="287.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_moves (17,590 samples, 45.83%)</title><rect x="51.7195%" y="261" width="45.8264%" height="15" fill="rgb(205,151,52)" fg:x="19852" fg:w="17590"/><text x="51.9695%" y="271.50">mango_chess::move_generation::generate_moves</text></g><g><title>mango_chess::move_generation::rook_moves (89 samples, 0.23%)</title><rect x="97.3140%" y="245" width="0.2319%" height="15" fill="rgb(253,215,39)" fg:x="37353" fg:w="89"/><text x="97.5640%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 0.07%)</title><rect x="97.4807%" y="229" width="0.0651%" height="15" fill="rgb(221,220,41)" fg:x="37417" fg:w="25"/><text x="97.7307%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.06%)</title><rect x="97.4885%" y="213" width="0.0573%" height="15" fill="rgb(218,133,21)" fg:x="37420" fg:w="22"/><text x="97.7385%" y="223.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.04%)</title><rect x="97.6214%" y="229" width="0.0391%" height="15" fill="rgb(221,193,43)" fg:x="37471" fg:w="15"/><text x="97.8714%" y="239.50"></text></g><g><title>_int_realloc (14 samples, 0.04%)</title><rect x="97.6240%" y="213" width="0.0365%" height="15" fill="rgb(240,128,52)" fg:x="37472" fg:w="14"/><text x="97.8740%" y="223.50"></text></g><g><title>_int_malloc (7 samples, 0.02%)</title><rect x="97.6422%" y="197" width="0.0182%" height="15" fill="rgb(253,114,12)" fg:x="37479" fg:w="7"/><text x="97.8922%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.04%)</title><rect x="97.6188%" y="261" width="0.0443%" height="15" fill="rgb(215,223,47)" fg:x="37470" fg:w="17"/><text x="97.8688%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 0.04%)</title><rect x="97.6188%" y="245" width="0.0443%" height="15" fill="rgb(248,225,23)" fg:x="37470" fg:w="17"/><text x="97.8688%" y="255.50"></text></g><g><title>__GI___libc_free (56 samples, 0.15%)</title><rect x="98.5932%" y="245" width="0.1459%" height="15" fill="rgb(250,108,0)" fg:x="37844" fg:w="56"/><text x="98.8432%" y="255.50"></text></g><g><title>_int_free (40 samples, 0.10%)</title><rect x="98.6348%" y="229" width="0.1042%" height="15" fill="rgb(228,208,7)" fg:x="37860" fg:w="40"/><text x="98.8848%" y="239.50"></text></g><g><title>unlink_chunk (11 samples, 0.03%)</title><rect x="98.7104%" y="213" width="0.0287%" height="15" fill="rgb(244,45,10)" fg:x="37889" fg:w="11"/><text x="98.9604%" y="223.50"></text></g><g><title>__rust_dealloc (5 samples, 0.01%)</title><rect x="98.7417%" y="245" width="0.0130%" height="15" fill="rgb(207,125,25)" fg:x="37901" fg:w="5"/><text x="98.9917%" y="255.50"></text></g><g><title>__GI___libc_malloc (78 samples, 0.20%)</title><rect x="98.9032%" y="213" width="0.2032%" height="15" fill="rgb(210,195,18)" fg:x="37963" fg:w="78"/><text x="99.1532%" y="223.50"></text></g><g><title>_int_malloc (70 samples, 0.18%)</title><rect x="98.9240%" y="197" width="0.1824%" height="15" fill="rgb(249,80,12)" fg:x="37971" fg:w="70"/><text x="99.1740%" y="207.50"></text></g><g><title>unlink_chunk (12 samples, 0.03%)</title><rect x="99.0751%" y="181" width="0.0313%" height="15" fill="rgb(221,65,9)" fg:x="38029" fg:w="12"/><text x="99.3251%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.02%)</title><rect x="99.2158%" y="181" width="0.0234%" height="15" fill="rgb(235,49,36)" fg:x="38083" fg:w="9"/><text x="99.4658%" y="191.50"></text></g><g><title>_int_free (23 samples, 0.06%)</title><rect x="99.2419%" y="181" width="0.0599%" height="15" fill="rgb(225,32,20)" fg:x="38093" fg:w="23"/><text x="99.4919%" y="191.50"></text></g><g><title>_int_malloc (43 samples, 0.11%)</title><rect x="99.3018%" y="181" width="0.1120%" height="15" fill="rgb(215,141,46)" fg:x="38116" fg:w="43"/><text x="99.5518%" y="191.50"></text></g><g><title>unlink_chunk (11 samples, 0.03%)</title><rect x="99.3852%" y="165" width="0.0287%" height="15" fill="rgb(250,160,47)" fg:x="38148" fg:w="11"/><text x="99.6352%" y="175.50"></text></g><g><title>_int_realloc (107 samples, 0.28%)</title><rect x="99.1533%" y="197" width="0.2788%" height="15" fill="rgb(216,222,40)" fg:x="38059" fg:w="107"/><text x="99.4033%" y="207.50"></text></g><g><title>unlink_chunk (7 samples, 0.02%)</title><rect x="99.4138%" y="181" width="0.0182%" height="15" fill="rgb(234,217,39)" fg:x="38159" fg:w="7"/><text x="99.6638%" y="191.50"></text></g><g><title>__GI___libc_realloc (128 samples, 0.33%)</title><rect x="99.1064%" y="213" width="0.3335%" height="15" fill="rgb(207,178,40)" fg:x="38041" fg:w="128"/><text x="99.3564%" y="223.50"></text></g><g><title>__rdl_alloc (7 samples, 0.02%)</title><rect x="99.4399%" y="213" width="0.0182%" height="15" fill="rgb(221,136,13)" fg:x="38169" fg:w="7"/><text x="99.6899%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.02%)</title><rect x="99.4399%" y="197" width="0.0182%" height="15" fill="rgb(249,199,10)" fg:x="38169" fg:w="7"/><text x="99.6899%" y="207.50"></text></g><g><title>__rdl_realloc (18 samples, 0.05%)</title><rect x="99.4581%" y="213" width="0.0469%" height="15" fill="rgb(249,222,13)" fg:x="38176" fg:w="18"/><text x="99.7081%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (11 samples, 0.03%)</title><rect x="99.4763%" y="197" width="0.0287%" height="15" fill="rgb(244,185,38)" fg:x="38183" fg:w="11"/><text x="99.7263%" y="207.50"></text></g><g><title>__rust_alloc (4 samples, 0.01%)</title><rect x="99.5050%" y="213" width="0.0104%" height="15" fill="rgb(236,202,9)" fg:x="38194" fg:w="4"/><text x="99.7550%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (297 samples, 0.77%)</title><rect x="98.7547%" y="245" width="0.7738%" height="15" fill="rgb(250,229,37)" fg:x="37906" fg:w="297"/><text x="99.0047%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (270 samples, 0.70%)</title><rect x="98.8250%" y="229" width="0.7034%" height="15" fill="rgb(206,174,23)" fg:x="37933" fg:w="270"/><text x="99.0750%" y="239.50"></text></g><g><title>__rust_realloc (5 samples, 0.01%)</title><rect x="99.5154%" y="213" width="0.0130%" height="15" fill="rgb(211,33,43)" fg:x="38198" fg:w="5"/><text x="99.7654%" y="223.50"></text></g><g><title>__GI___libc_realloc (9 samples, 0.02%)</title><rect x="99.5493%" y="197" width="0.0234%" height="15" fill="rgb(245,58,50)" fg:x="38211" fg:w="9"/><text x="99.7993%" y="207.50"></text></g><g><title>_int_realloc (8 samples, 0.02%)</title><rect x="99.5519%" y="181" width="0.0208%" height="15" fill="rgb(244,68,36)" fg:x="38212" fg:w="8"/><text x="99.8019%" y="191.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (19 samples, 0.05%)</title><rect x="99.5284%" y="245" width="0.0495%" height="15" fill="rgb(232,229,15)" fg:x="38203" fg:w="19"/><text x="99.7784%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.03%)</title><rect x="99.5467%" y="229" width="0.0313%" height="15" fill="rgb(254,30,23)" fg:x="38210" fg:w="12"/><text x="99.7967%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.03%)</title><rect x="99.5493%" y="213" width="0.0287%" height="15" fill="rgb(235,160,14)" fg:x="38211" fg:w="11"/><text x="99.7993%" y="223.50"></text></g><g><title>_int_free (4 samples, 0.01%)</title><rect x="99.6222%" y="149" width="0.0104%" height="15" fill="rgb(212,155,44)" fg:x="38239" fg:w="4"/><text x="99.8722%" y="159.50"></text></g><g><title>__GI___libc_realloc (16 samples, 0.04%)</title><rect x="99.6144%" y="181" width="0.0417%" height="15" fill="rgb(226,2,50)" fg:x="38236" fg:w="16"/><text x="99.8644%" y="191.50"></text></g><g><title>_int_realloc (16 samples, 0.04%)</title><rect x="99.6144%" y="165" width="0.0417%" height="15" fill="rgb(234,177,6)" fg:x="38236" fg:w="16"/><text x="99.8644%" y="175.50"></text></g><g><title>_int_malloc (9 samples, 0.02%)</title><rect x="99.6327%" y="149" width="0.0234%" height="15" fill="rgb(217,24,9)" fg:x="38243" fg:w="9"/><text x="99.8827%" y="159.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (33 samples, 0.09%)</title><rect x="99.5779%" y="245" width="0.0860%" height="15" fill="rgb(220,13,46)" fg:x="38222" fg:w="33"/><text x="99.8279%" y="255.50"></text></g><g><title>mango_chess::move_generation::bishop_moves (31 samples, 0.08%)</title><rect x="99.5832%" y="229" width="0.0808%" height="15" fill="rgb(239,221,27)" fg:x="38224" fg:w="31"/><text x="99.8332%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (23 samples, 0.06%)</title><rect x="99.6040%" y="213" width="0.0599%" height="15" fill="rgb(222,198,25)" fg:x="38232" fg:w="23"/><text x="99.8540%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.05%)</title><rect x="99.6144%" y="197" width="0.0495%" height="15" fill="rgb(211,99,13)" fg:x="38236" fg:w="19"/><text x="99.8644%" y="207.50"></text></g><g><title>_int_realloc (6 samples, 0.02%)</title><rect x="99.6978%" y="181" width="0.0156%" height="15" fill="rgb(232,111,31)" fg:x="38268" fg:w="6"/><text x="99.9478%" y="191.50"></text></g><g><title>mango_chess::board::BoardState::is_valid_move (788 samples, 2.05%)</title><rect x="97.6631%" y="261" width="2.0529%" height="15" fill="rgb(245,82,37)" fg:x="37487" fg:w="788"/><text x="97.9131%" y="271.50">m..</text></g><g><title>mango_chess::move_generation::rook_moves (20 samples, 0.05%)</title><rect x="99.6639%" y="245" width="0.0521%" height="15" fill="rgb(227,149,46)" fg:x="38255" fg:w="20"/><text x="99.9139%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.02%)</title><rect x="99.6926%" y="229" width="0.0234%" height="15" fill="rgb(218,36,50)" fg:x="38266" fg:w="9"/><text x="99.9426%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.02%)</title><rect x="99.6978%" y="213" width="0.0182%" height="15" fill="rgb(226,80,48)" fg:x="38268" fg:w="7"/><text x="99.9478%" y="223.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.02%)</title><rect x="99.6978%" y="197" width="0.0182%" height="15" fill="rgb(238,224,15)" fg:x="38268" fg:w="7"/><text x="99.9478%" y="207.50"></text></g><g><title>mango_chess::board::BoardState::make_move (24 samples, 0.06%)</title><rect x="99.7160%" y="261" width="0.0625%" height="15" fill="rgb(241,136,10)" fg:x="38275" fg:w="24"/><text x="99.9660%" y="271.50"></text></g><g><title>mango_chess::board::BoardState::unmake_move (24 samples, 0.06%)</title><rect x="99.7786%" y="261" width="0.0625%" height="15" fill="rgb(208,32,45)" fg:x="38299" fg:w="24"/><text x="100.0286%" y="271.50"></text></g><g><title>mango_chess::move_generation::generate_pseudo_moves_for_piece (16 samples, 0.04%)</title><rect x="99.8489%" y="261" width="0.0417%" height="15" fill="rgb(207,135,9)" fg:x="38326" fg:w="16"/><text x="100.0989%" y="271.50"></text></g><g><title>mango_chess::engine::negamax (38,346 samples, 99.90%)</title><rect x="0.0052%" y="293" width="99.9010%" height="15" fill="rgb(206,86,44)" fg:x="2" fg:w="38346"/><text x="0.2552%" y="303.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_moves (906 samples, 2.36%)</title><rect x="97.5459%" y="277" width="2.3604%" height="15" fill="rgb(245,177,15)" fg:x="37442" fg:w="906"/><text x="97.7959%" y="287.50">ma..</text></g><g><title>mango_chess::move_generation::rook_moves (6 samples, 0.02%)</title><rect x="99.8906%" y="261" width="0.0156%" height="15" fill="rgb(206,64,50)" fg:x="38342" fg:w="6"/><text x="100.1406%" y="271.50"></text></g><g><title>mango_chess::board::BoardState::is_valid_move (17 samples, 0.04%)</title><rect x="99.9140%" y="277" width="0.0443%" height="15" fill="rgb(234,36,40)" fg:x="38351" fg:w="17"/><text x="100.1640%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.01%)</title><rect x="99.9479%" y="261" width="0.0104%" height="15" fill="rgb(213,64,8)" fg:x="38364" fg:w="4"/><text x="100.1979%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="99.9479%" y="245" width="0.0104%" height="15" fill="rgb(210,75,36)" fg:x="38364" fg:w="4"/><text x="100.1979%" y="255.50"></text></g><g><title>mango_chess::board::BoardState::make_move (4 samples, 0.01%)</title><rect x="99.9583%" y="277" width="0.0104%" height="15" fill="rgb(229,88,21)" fg:x="38368" fg:w="4"/><text x="100.2083%" y="287.50"></text></g><g><title>mango_chess::engine::negamax (38,374 samples, 99.97%)</title><rect x="0.0000%" y="309" width="99.9739%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="38374"/><text x="0.2500%" y="319.50">mango_chess::engine::negamax</text></g><g><title>mango_chess::move_generation::generate_moves (26 samples, 0.07%)</title><rect x="99.9062%" y="293" width="0.0677%" height="15" fill="rgb(208,77,27)" fg:x="38348" fg:w="26"/><text x="100.1562%" y="303.50"></text></g><g><title>__libc_start_main_impl (38,377 samples, 99.98%)</title><rect x="0.0000%" y="581" width="99.9818%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="591.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (38,377 samples, 99.98%)</title><rect x="0.0000%" y="565" width="99.9818%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="575.50">__libc_start_call_main</text></g><g><title>main (38,377 samples, 99.98%)</title><rect x="0.0000%" y="549" width="99.9818%" height="15" fill="rgb(230,137,11)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (38,377 samples, 99.98%)</title><rect x="0.0000%" y="533" width="99.9818%" height="15" fill="rgb(212,28,1)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (38,377 samples, 99.98%)</title><rect x="0.0000%" y="517" width="99.9818%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (38,377 samples, 99.98%)</title><rect x="0.0000%" y="501" width="99.9818%" height="15" fill="rgb(222,171,42)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (38,377 samples, 99.98%)</title><rect x="0.0000%" y="485" width="99.9818%" height="15" fill="rgb(243,84,45)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="495.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (38,377 samples, 99.98%)</title><rect x="0.0000%" y="469" width="99.9818%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="479.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (38,377 samples, 99.98%)</title><rect x="0.0000%" y="453" width="99.9818%" height="15" fill="rgb(215,19,7)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (38,377 samples, 99.98%)</title><rect x="0.0000%" y="437" width="99.9818%" height="15" fill="rgb(238,81,41)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (38,377 samples, 99.98%)</title><rect x="0.0000%" y="421" width="99.9818%" height="15" fill="rgb(210,199,37)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="431.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (38,377 samples, 99.98%)</title><rect x="0.0000%" y="405" width="99.9818%" height="15" fill="rgb(244,192,49)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="415.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (38,377 samples, 99.98%)</title><rect x="0.0000%" y="389" width="99.9818%" height="15" fill="rgb(226,211,11)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="399.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (38,377 samples, 99.98%)</title><rect x="0.0000%" y="373" width="99.9818%" height="15" fill="rgb(236,162,54)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mango_chess::main (38,377 samples, 99.98%)</title><rect x="0.0000%" y="357" width="99.9818%" height="15" fill="rgb(220,229,9)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="367.50">mango_chess::main</text></g><g><title>mango_chess::engine::search (38,377 samples, 99.98%)</title><rect x="0.0000%" y="341" width="99.9818%" height="15" fill="rgb(250,87,22)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="351.50">mango_chess::engine::search</text></g><g><title>mango_chess::engine::negamax (38,377 samples, 99.98%)</title><rect x="0.0000%" y="325" width="99.9818%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="38377"/><text x="0.2500%" y="335.50">mango_chess::engine::negamax</text></g><g><title>mango_chess (38,378 samples, 99.98%)</title><rect x="0.0000%" y="613" width="99.9844%" height="15" fill="rgb(231,177,25)" fg:x="0" fg:w="38378"/><text x="0.2500%" y="623.50">mango_chess</text></g><g><title>_start (38,378 samples, 99.98%)</title><rect x="0.0000%" y="597" width="99.9844%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="38378"/><text x="0.2500%" y="607.50">_start</text></g><g><title>all (38,384 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="38384"/><text x="0.2500%" y="639.50"></text></g><g><title>perf-exec (6 samples, 0.02%)</title><rect x="99.9844%" y="613" width="0.0156%" height="15" fill="rgb(232,167,36)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="623.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="597" width="0.0156%" height="15" fill="rgb(244,19,51)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="607.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="581" width="0.0156%" height="15" fill="rgb(224,6,22)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="591.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="565" width="0.0156%" height="15" fill="rgb(224,145,5)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="575.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="549" width="0.0156%" height="15" fill="rgb(234,130,49)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="559.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="533" width="0.0156%" height="15" fill="rgb(254,6,2)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="517" width="0.0156%" height="15" fill="rgb(208,96,46)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="501" width="0.0156%" height="15" fill="rgb(239,3,39)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="485" width="0.0156%" height="15" fill="rgb(233,210,1)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="469" width="0.0156%" height="15" fill="rgb(244,137,37)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="453" width="0.0156%" height="15" fill="rgb(240,136,2)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="437" width="0.0156%" height="15" fill="rgb(239,18,37)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.02%)</title><rect x="99.9844%" y="421" width="0.0156%" height="15" fill="rgb(218,185,22)" fg:x="38378" fg:w="6"/><text x="100.2344%" y="431.50"></text></g></svg></svg>